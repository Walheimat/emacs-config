#+TITLE: Ivy Configuration
#+AUTHOR: @Walheimat

Before switching to =vertico=, I used =ivy= and many additional packages.

These have been excised from my config. But since I was quite happy
with the configuration and it's quite extensive, I'll put all of its
aspects here.

I will not keep these up-to-date so there's no guarantee the
configurations will remain compatible with future versions.

* Integration

** Ignoring

Ignore some buffers when switching.

#+BEGIN_SRC emacs-lisp
(defcustom wal/commonly-ignored-major-modes
  '(dired-mode
    wdired-mode
    helpful-mode
    magit-diff-mode
    magit-status-mode
    vterm-mode)
  "Major modes whose buffers should be commonly ignored."
  :type '(repeat symbol)
  :group 'wal-func)

(defun wal/commonly-ignored-buffer-p (buffer-or-string)
  "Check if provided BUFFER-OR-STRING is commonly ignored.

Commonly ignored buffers are those belonging to major modes in
`wal/commonly-ignored-major-modes' as well as starred buffers
other than scratch and eww buffers."
  (let ((maj (with-current-buffer
                 (get-buffer-create buffer-or-string)
               major-mode)))
    (or (member maj wal/commonly-ignored-major-modes)
        ;; Starred buffers other than scratch and eww buffers.
        (and (not (string-match "^\\*scratch" buffer-or-string))
             (not (string-match "^\\*eww\\*\\'" buffer-or-string))
             (string-match "^\\*[[:ascii:]]+\\*\\'" buffer-or-string)))))
#+END_SRC

** ace-window

#+BEGIN_SRC emacs-lisp
(defun wal/advise-aw--switch-buffer-ivy (&rest _r)
  "Advise `aw--switch-buffer' to use `ivy-switch-buffer'."
  (call-interactively 'wal/ivy-switch-buffer))

(defun wal/configure-ace-window ()
  "Configure package `ace-window'."
  (setq aw-dispatch-alist '((?h aw-split-window-horz "horizontal split")
                            (?v aw-split-window-vert "vertical split")
                            (?d aw-delete-window "delete")
                            (?x wal/aw-delete-window-kill-buffer "kill")
                            (?o delete-other-windows "delete other")
                            (?m aw-move-window "move")
                            (?c aw-copy-window "copy")
                            (?s aw-swap-window "swap")
                            (?b aw-switch-buffer-in-window "buffer")
                            ;; If this has a description, it doesn't work.
                            (?? aw-show-dispatch-help)))
  (advice-add
   'aw--switch-buffer
   :override #'wal/advise-aw--switch-buffer-ivy))
#+END_SRC

** all-the-icons

#+BEGIN_SRC emacs-lisp
(defun wal/configure-rich-transformers ()
  "Configure (additional) transformers in the list.

This function is called before `all-the-icons-ivy-rich' is activated."
  (let ((tl all-the-icons-ivy-rich-display-transformers-list))
    (plist-put tl 'persp-kill-buffer* (plist-get tl 'persp-kill-buffer))))

(use-package all-the-icons-ivy-rich
  :config
  (wal/configure-rich-transformers)
  (all-the-icons-ivy-rich-mode +1)
  :demand
  :after (all-the-cions ivy-rich))
#+END_SRC


** avy

#+BEGIN_SRC emacs-lisp
;; Use `avy' inside `ivy'.
(use-package ivy-avy
  :wal-bind
  (:map ivy-minibuffer-map
   ("l" . ivy-avy))
  :demand
  :after ivy)
#+END_SRC

** dumb-jump

#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
  :init
  (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
  :config
  (setq dumb-jump-selector 'ivy)
  :custom
  (dumb-jump-force-searcher 'ag))
#+END_SRC

** perspective

#+BEGIN_SRC emacs-lisp
(defun wal/configure-perspective ()
  "Configure package `perspective'.

This mainly makes sure that switching buffers using any
completion provider also switches perspectives."
  (advice-add 'persp-kill :around #'wal/advise-persp-kill)
  (defalias 'wal/ivy-switch-buffer #'persp-counsel-switch-buffer)
  (wal/captain
    "i" '(:keymap perspective-map :wk "perspective")))
#+END_SRC


* Core Packages

** ivy

#+BEGIN_SRC emacs-lisp
;; Hide `dired', `docker', `ag' and default Emacs buffers when switching.
(defcustom wal/ivy-ignore-buffers
  '(wal/commonly-ignored-buffer-p
    "\\` "
    "\\`\\*tramp/")
  "Buffers that are commonly ignored when switching."
  :type '(restricted-sexp :match-alternatives (stringp symbolp))
  :group 'wal-complete)

(defun wal/ivy-switch-ignored-buffers (&rest r)
  "Show only commonly ignored buffers.
Pass R to the switch buffer function."
  (interactive)
  (let ((ivy-ignore-buffers
         '((lambda (buffer-or-string)
             (not (wal/commmonly-ignored-buffer-p buffer-or-string))))))
    (wal/ivy-switch-buffer r)))

(defalias 'wal/ivy-switch-buffer #'ivy-switch-buffer)

(use-package ivy
  :if (eq wal/completion-provider 'ivy)
  :config
  (setq enable-recursive-minibuffers t)
  (ivy-mode 1)
  :custom
  (ivy-height 6)
  (ivy-ignore-buffers wal/ivy-ignore-buffers)
  (ivy-count-format "%d/%d ")
  (ivy-wrap t)
  :bind
  (:map ivy-mode-map
   ("C-x b" . wal/ivy-switch-buffer)
   ("C-x x b" . wal/ivy-switch-ignored-buffers))
  :defer 1)
#+END_SRC

** ivy-rich

Some nicer candidate view when switching buffers.

#+BEGIN_SRC emacs-lisp
(use-package ivy-rich
  :config
  (when (fboundp 'ivy-format-function-line)
    (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line))
  (ivy-rich-mode 1)
  :demand
  :after ivy)
#+END_SRC

** prescient

Better short-term-memory for =ivy=.

#+BEGIN_SRC emacs-lisp
;; `prescient' is defined later, so we have to define it here.
(defcustom wal/use-prescient t
  "Whether `prescient' is used."
  :type 'boolean
  :group 'wal-complete)

(use-package prescient
  :if (and wal/use-prescient (eq wal/completion-provider 'ivy))
  :config
  (when (fboundp 'prescient-persist-mode)
    (prescient-persist-mode +1))
  :custom
  (prescient-sort-length-enable nil)
  (prescient-save-file (expand-file-name "prescient-persist" wal/cache-directory))
  (prescient-filter-method '(literal regexp))
  :demand
  :after counsel)

(use-package ivy-prescient
  :config
  (ivy-prescient-mode +1)
  :custom
  (ivy-prescient-retain-classic-highlighting t)
  :demand
  :after (ivy prescient))
#+END_SRC

** counsel

Counsel me this, Counselor: =ivy= is not enough!

#+BEGIN_SRC emacs-lisp
(use-package counsel
  :config
  ;; Package ivy-prescient sets `ivy-initial-inputs-alist' to nil!
  (unless wal/use-prescient
    (setcdr (assq 'counsel-M-x ivy-initial-inputs-alist) ""))
  :custom
  (counsel-linux-app-format-function #'counsel-linux-app-format-function-command-only)
  :bind
  (:map ivy-mode-map
   ("M-g m" . counsel-mark-ring)
   ("M-x" . counsel-M-x)
   ("<menu>" . counsel-M-x)
   ("C-x C-f" . counsel-find-file)
   :map bookmark-map
   ("b" . counsel-bookmark))
  :general
  (wal/general
    "St" '(counsel-load-theme :wk "counsel theme")
    "fl" '(counsel-find-library :wk "library"))
  (wal/general-sink
    "h" '(counsel-command-history :wk "command history")
    "v" '(counsel-set-variable :wk "set variable"))
  (wal/lieutenant
    "o" '(:ignore t :wk "counsel")
    "os" '(counsel-search :wk "search")
    "ox" '(counsel-find-file-extern :wk "(external) find file")
    "ol" '(counsel-linux-app :wk "Linux app")
    "or" '(counsel-recentf :wk "find recent"))
  :demand
  :after ivy)
#+END_SRC

** counsel-projectile

Add =counsel= integration to =projectile=.

#+BEGIN_SRC emacs-lisp
(defun wal/advise-counsel-projectile-ag-around (fun &rest r)
  "Call `counsel-ag' not FUN with R outside of projects.

This eliminates getting prompted to open one first."
  (if (projectile-project-p)
      (apply fun r)
    (apply 'counsel-ag r)))

(use-package counsel-projectile
  :config
  ;; Make opening with `dired' the default action.
  (setf (nth 0 counsel-projectile-switch-project-action) 4)
  (advice-add
   'counsel-projectile-ag
   :around #'wal/advise-counsel-projectile-ag-around)
  (counsel-projectile-mode +1)
  :custom
  ;; (counsel-projectile-preview-buffers t)
  (counsel-projectile-org-capture-templates
   ;; Reminders are stored relative to the project root
   `(("r" "[${name}] reminder" entry
      (file+headline "${root}/reminders.org" "Reminders")
      "* TODO %?\n%i\n%U -- %a")
     ;; Tasks are stored in the common task directory
     ("t" "[${name}] task" entry
      (file+headline ,(expand-file-name "${name}.org" wal/agenda-tasks-directory) "Tasks")
      "* TODO %?")
     ("n" "[${name}] note" entry
      (file+olp+datetree "${root}/notes.org")
      "* %?")))
  :bind
  (:map projectile-command-map
   ("ss" . counsel-projectile-ag)
   ("n" . counsel-projectile-org-capture)
   ("b" . counsel-projectile-switch-to-buffer)
   ("d" . counsel-projectile-find-dir))
  :wal-bind
  (:map projectile-mode-map
   ("h" . counsel-projectile-find-file)
   ("u" . counsel-projectile-switch-to-buffer))
  :demand
  :after (projectile counsel))
#+END_SRC
