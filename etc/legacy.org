* Legacy

Everything defined using =:tangle no= which would need
to be removed for blocks one wants to tangle from this file.

** Package Configurations

This is a list of packages I no longer use
but I have configured in the past.

Some might still prove useful at some point.

*** blacken

Reformat buffer using =black=.
Using the formatter provided by LSP is probably better.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package blacken
  :general
  (wal/major :keymaps 'python-mode-map
    "b" '(blacken-buffer :wk "blacken buffer")))
#+END_SRC

*** web-mode

Web mode uses =flycheck=, prompts user if =lsp= should be enabled.

#+BEGIN_SRC emacs-lisp :tangle no
(defun wal/web-mode ()
  "Hook into `web-mode'."
  (message "This is the Internet")
  (add-node-modules-path)
  (hack-local-variables)
  (wal/maybe-enable-tabs nil #'web-mode-use-tabs)
  (flycheck-mode 1))

(use-package web-mode
  :hook (web-mode . wal/web-mode)
  :custom
  (web-mode-comment-style 2)
  :mode ("\\.vue\\'"
         "\\.component.html\\'"
         "\\.ejs\\'"))
#+END_SRC

*** angular-mode

You might think Angular is dead and you'd be right but not everyone knows yet.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package angular-mode
  :defer t
  :config
  ;; I use nvm and I assume the language server is installed.
  (let* ((node-v (string-trim (substring (shell-command-to-string "node -v") 1)))
         (node-m (format ".config/nvm/%s/lib/node_modules" node-v))
         (node-abs (expand-file-name node-m "~"))
         (lang-serv (expand-file-name "@angular/language-server" node-abs)))
    (when (f-directory? lang-serv)
      (setq lsp-clients-angular-server-command
            `("node"
              ,lang-serv
              "--ngProbeLocations"
              ,node-abs
              "--tsProbeLocations"
              ,node-abs
              "--stdio")))))
#+END_SRC

*** window-purpose

Give your windows purpose.
This does not seem to respect changes made to
=display-buffer-alist= unfortunately.

#+BEGIN_SRC emacs-lisp :tangle no
(defvar wal/mode-purpose-terminal
  '(vterm-mode)
  "`terminal' purpose defined by mode.")

(defvar wal/regexp-purpose-result
  '("\\*HTTP Response\\*")
  "`result' purpose defined by regexp.")

(defvar wal/mode-purpose-prompt
  '(docker-container-mode)
  "`prompt' purpose defined by mode.")

(defun wal/configure-purposes()
  "Configure purposes."
  (setq purpose-user-mode-purposes nil)
  ;; `terminal' purpose.
  (--each
      wal/mode-purpose-terminal
    (add-to-list 'purpose-user-mode-purposes
                 `(,it . terminal)))
  ;; `result' purpose.
  (--each
      wal/regexp-purpose-result
    (add-to-list 'purpose-user-regexp-purposes
                 `(,it . result)))
  ;; `prompt' purpose.
  (--each
      wal/mode-purpose-prompt
    (add-to-list 'purpose-user-mode-purposes
                 `(,it . prompt)))
  (purpose-compile-user-configuration))

(use-package window-purpose
  :custom
  (default-purpose 'none)
  (default-file-purpose 'write)
  (purpose-display-fallback nil)
  :config
  (define-key purpose-mode-map (kbd "C-x b") nil) ; Just don't!
  ;; Require additional packages.
  (require 'window-purpose-x)
  (purpose-x-persp-setup)
  (purpose-x-kill-setup)
  ;; Configure.
  (wal/configure-purposes)
  :general
  (wal/colonel "p" '(purpose-mode :wk "purpose")))
#+END_SRC

*** symon

Show some system stats when nothing else is going on.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package symon
  :defer 6
  :if (and (eq system-type 'gnu/linux)
           ;; This package doesn't seem to work with `native-comp'.
           (not (fboundp 'native-comp-available-p)))
  :custom
  (symon-sparkline-type 'bounded)
  (symon-delay 10)
  (symon-monitors '(symon-linux-cpu-monitor
                    symon-linux-memory-monitor
                    symon-linux-network-rx-monitor
                    symon-linux-network-tx-monitor))
  :config
  (symon-mode))
#+END_SRC

*** kubernetes

Who doesn't like pods and stuff?

#+BEGIN_SRC emacs-lisp :tangle no
(use-package kubernetes
  :commands kubernetes-overview)
#+END_SRC

*** company-prescient

#+begin_src emacs-lisp :tangle no
(use-package company-prescient
  :if wal/use-prescient
  :after (company prescient)
  :config
  (company-prescient-mode +1))
#+end_src

*** find-file-in-project

Finding files by name should be easy.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package find-file-in-project
  :defer 2)
#+END_SRC

*** ansi-term

Sometimes you need an =ansi= terminal.
Is that true?

#+BEGIN_SRC emacs-lisp :tangle no
(use-package term
  :ensure nil)
#+END_SRC

*** smooth-scrolling

Smooth scrolling at the margins using =C-n= and =C-p=.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package smooth-scrolling
  :defer 3.5
  :custom
  (smooth-scroll-margin 4)
  :config
  (smooth-scrolling-mode 1))
#+END_SRC

*** evil-nerd-commenter

Comment code like in =vim=, evil, evil =vim=.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package evil-nerd-commenter
  :bind
  (:map prog-mode-map
   ("H-c" . evilnc-comment-or-uncomment-lines)))
#+END_SRC

*** undo-fu

Undoing un-undoing is weird in Emacs.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package undo-fu
  :bind (("C-/" . undo-fu-only-undo)
         ("C-?" . undo-fu-only-redo)))
#+END_SRC

*** smartparens

I still use this package, but not its mode.

#+begin_src emacs-lisp :tangle no
(use-package smartparens
  :config
  ;; Only require configs that I want.
  (require 'smartparens-python)
  (add-to-list 'sp-lisp-modes 'lisp-data-mode)
  (sp-with-modes sp-lisp-modes
    ;; disable ', it's the quote character!
    (sp-local-pair "'" nil :actions nil))
  :general
  (wal/captain :keymaps 'prog-mode
    "p" '(:ignore t :wk "smartparens")
    "pr" '(sp-rewrap-sexp :wk "rewrap")
    "pk" '(sp-kill-sexp :wk "kill")
    "pf" '(sp-forward-sexp :wk "forward")
    "pb" '(sp-backward-sexp :wk "backward")))
#+end_src

*** vdiff-magit

I find =ediff= quite cumbersome, so I'm giving =vdiff= a try.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package vdiff-magit
  :after magit
  :demand
  :custom
  (vdiff-diff-algorithm 'git-diff)
  (vdiff-magit-stage-is-2way t)
  :config
  ;; `:bind-keymap' doesn't seem to allow mode predicates.
  (define-key vdiff-mode-map (kbd "C-c v") vdiff-mode-prefix-map)
  ;; Add to `magit' dispatch.
  (transient-suffix-put 'magit-dispatch "e" :description "vdiff (dwim)")
  (transient-suffix-put 'magit-dispatch "e" :command 'vdiff-magit-dwim)
  (transient-suffix-put 'magit-dispatch "E" :description "vdiff")
  (transient-suffix-put 'magit-dispatch "E" :command 'vdiff-magit)
  :bind
  (:map vdiff-mode-map
   ("q" . vdiff-quit)
   ("h" . vdiff-hydra/body)
   :map magit-mode-map
   ("e" . vdiff-magit-dwim)
   ("E" . vdiff-magit)))
#+END_SRC

*** magit-todos

#+BEGIN_SRC emacs-lisp :tangle no
(use-package magit-todos
  :after magit
  :custom
  (magit-todos-branch-list nil)
  :bind
  (:map magit-mode-map
   ("," . ivy-magit-todos)
   ("." . magit-todos-list)))
#+END_SRC

*** lua-mode

Why not. It can be /awesome/.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package lua-mode
  :defer t)
#+END_SRC

*** haskell-mode

Don't use Haskell much yet.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package haskell-mode
  :defer t)
#+END_SRC

*** flyspell-correct

The built-in solutions are good enough.

#+begin_src emacs-lisp :tangle no
(use-package flyspell-correct
  :after flyspell
  :bind
  (:map flyspell-mode-map
   ("C-/" . flyspell-correct-at-point)))

(use-package flyspell-correct-ivy
  :after flyspell-correct)
#+end_src

*** nginx-mode

Make nginx configuration files look pretty.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package nginx-mode
  :defer t
  :config
  (add-to-list 'auto-mode-alist
               '("/nginx/sites-\\(?:available\\|enabled\\)/" . nginx-mode)))
#+END_SRC

*** csharp-mode

Unity.

#+BEGIN_SRC emacs-lisp :tangle no
(defun wal/csharp-mode ()
  "Hook into `csharp-mode'."
  (message "Ouch!")
  (wal/disable-tabs)
  ;; If you're using `lsp-mode' you can run `lsp-install-server'.
  (wal/lsp))

(use-package csharp-mode
  :mode "\\.cs\\'"
  :hook (csharp-mode . wal/csharp-mode))
#+END_SRC

** Other Settings

These are other settings that used to be in my config.

*** Time

Don't show the CPU load if time is shown.

#+BEGIN_SRC emacs-lisp :tangle no
(setq display-time-default-load-average nil
      display-time-format "%k:%M ")

;; Note that turning this on will persist the mode in your custom.el,
;; so delete it from there if you want it gone again.
(display-time-mode -1)
#+END_SRC

** Functions

These are functions that used to be in my config.

*** Custom Args

Check for custom args.

#+BEGIN_SRC emacs-lisp :tangle no
(defun wal/found-custom-arg (switch)
  "Check for custom SWITCH arg and delete it right away."
  (let ((found-switch (member switch command-line-args)))
    (setq command-line-args (delete switch command-line-args))
    found-switch))
#+END_SRC

*** Theme Light Switch

I rarely ever used this.

#+begin_src emacs-lisp :tangle no
;; Two themes and a switch.
(defvar wal/primary-emacs-theme 'kaolin-valley-dark
  "The quote-unquote default Emacs theme.")

(defvar wal/secondary-emacs-theme 'kaolin-valley-light
  "The non-default Emacs theme.")

(defun wal/light-switch (&optional selection)
  "Switch to SELECTION or from light to dark theme and vice-versa."
  (interactive)
  (disable-theme wal/active-theme)
  (cond ((or (equal wal/active-theme wal/primary-emacs-theme) (equal selection 'secondary))
         (load-theme wal/secondary-emacs-theme t)
         (setq wal/active-theme wal/secondary-emacs-theme))
        ((or (equal wal/active-theme wal/secondary-emacs-theme) (equal selection 'primary))
         (load-theme wal/primary-emacs-theme t)
         (setq wal/active-theme wal/primary-emacs-theme))))

(defun wal/advise-counsel-load-theme (theme)
  "Advise to also update `wal/*-emacs-theme'."
  (if (eq wal/primary-emacs-theme wal/active-theme)
      (setq wal/primary-emacs-theme (intern theme))
    (setq wal/secondary-emacs-theme (intern theme)))
  (setq wal/active-theme (intern theme)))

;; Any theme set by `counsel-load-theme' should also set
;; `wal/*-theme' so that calling `wal/light-switch' doesn't
;; undo things.
(advice-add 'counsel-load-theme :filter-return #'wal/advise-counsel-load-theme)
#+end_src
