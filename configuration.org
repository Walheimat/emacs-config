#+TITLE: Walheimat's Hybrid Emacs Config/Readme
#+AUTHOR: [[https://gitlab.com/Walheimat][@Walheimat]]
#+OPTIONS: toc:nil
* emacs config
This project is my personal Emacs (26.3) config.

Its base is an org file so it doubles as a readme[fn:1].

[fn:1] What you're reading is likely the MD that's also based on it.

#+TOC: headlines 2

** setup
If you're interested in trying out Emacs using my config, here are the necessary steps:

+ Install Emacs if you haven't
+ Clone this repository into your =user-emacs-directory=:
  
  If you're not sure where your =user-emacs-directory= might be, you can do the following:
  + run Emacs
  + hit =M-x= (that is your Alt/Option key followed by the letter =x=)
  + type =describe-variable= and hit return
  + type =user-emacs-directory= and hit return again

  A window (or is it a frame?) should pop up telling you the path
  
  Finally run =git clone git@gitlab.com:Walheimat/emacs-config.git ~/.emacs.d=
  (replace =~/.emacs.d= with your actual path if it differs)

+ Copy the config file included in this repo by running =cp ~/.emacs.d/emacs-config/.emacs.example ~/.emacs=

  Adapt the path again if necessary

+ Close and re-run Emacs which should download and install (almost) all packages

If you did not init this repo in your =user-emacs-directory= using the default name, you will need to adapt
the variable =walheimat-emacs-config-default-path= in the example config you just copied.

*Note* that this config uses the =all-the-icons= package whose icons need to be downloaded manually
by running =M-x all-the-icons-install-fonts= and selecting =yes=.

*Note* that this config uses =dash=. The config will try to install it before installing the other packages
but this has failed before. If that is the case do the following:

+ hit =M-x=, type =package-install= and hit return
+ type =dash= and hit return again
+ once the installation is complete, re-run Emacs

** config
Configure Emacs. The init script will execute everything that follows.
*** personal
Set some personal info.

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Krister Schuchardt"
      user-mail-address "krister.schuchardt@gmail.com")
#+END_SRC
*** before init
Set up emacs, package manager and packages.
**** general
No splash. Use separate file for customizations (so we don't clutter up our init file). Use python3.
#+BEGIN_SRC emacs-lisp
(package-initialize)
(setq inhibit-startup-message t)
;; (setq initial-scratch-message nil)
(setq custom-file (expand-file-name "custom.el" walheimat-emacs-config-default-path))
(setq py-python-command "python3")
(load custom-file)
#+END_SRC
**** MELPA
Initialize MELPA.
#+BEGIN_SRC emacs-lisp
(require 'package)
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                  (not (gnutls-available-p))))
     (proto (if no-ssl "http" "https")))
  (when no-ssl (warn "\
Your version of Emacs does not support SSL connections,
which is unsafe because it allows man-in-the-middle attacks.
There are two things you can do about this warning:
1. Install an Emacs version that does support SSL and be safe.
2. Remove this warning from your init file so you won't see it again."))
  (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
  ;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`
  ;; and `package-pinned-packages`. Most users will not need or want to do this.
  ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
  )
(setq package-pinned-packages '())
(package-initialize)
#+END_SRC
**** packages
Define and install packages (if they're missing).
#+BEGIN_SRC emacs-lisp
;; we need dash for the upcoming loop
(unless (package-installed-p 'dash)
  (package-install 'dash))
(require 'dash)

(defun packages-install (packages)
  (--each packages
    (when (not (package-installed-p it))
      (package-install it)))
  (delete-other-windows))

(defun init--install-packages ()
  (packages-install
   '(
     ace-window
     ack
     add-node-modules-path
     all-the-icons
     ample-theme
     angular-mode
     beacon
     company
     company-box
     company-lsp
     company-restclient
     company-web
     crux
     dap-mode
     diff-hl
     diminish
     dimmer
     docker
     dockerfile-mode
     doom-themes
     drag-stuff
     dumb-jump
     elixir-mode
     esh-autosuggest
     eshell-prompt-extras
     evil
     evil-magit
     evil-nerd-commenter
     expand-region
     find-file-in-project
     fira-code-mode
     flycheck
     git-timemachine
     highlight-numbers
     highlight-indent-guides
     hydra
     ivy
     js2-mode
     kaolin-themes
     lsp-mode
     magit
     markdown-mode
     mode-line-bell
     naysayer-theme
     nodejs-repl
     org-bullets
     org-super-agenda
     panda-theme
     perspective
     posframe
     prettier-js
     projectile
     rainbow-delimiters
     rainbow-mode
     restclient
     rjsx-mode
     s
     shell-pop
     smex
     spacemacs-theme
     treemacs
     telephone-line
     treemacs-evil
     typescript-mode
     undo-fu
     use-package
     web-mode
     which-key
     yaml-mode
     yasnippet
     yasnippet-snippets
     zoom
     )))

(condition-case nil
    (init--install-packages)
  (error
    (package-refresh-contents)
    (init--install-packages)))
#+END_SRC
**** site-lisp
Add side lisp directory and subdirs to load path. I put non-MELPA packages here.
#+BEGIN_SRC emacs-lisp
;; create the dir if it does not exist to avoid error
(unless (file-directory-p (expand-file-name "site-lisp" user-emacs-directory))
  (make-directory (expand-file-name "site-lisp" user-emacs-directory)))
(setq site-lisp-dir
  (expand-file-name "site-lisp" user-emacs-directory))
(add-to-list 'load-path site-lisp-dir)
(dolist (project (directory-files site-lisp-dir t "\\w+"))
  (when (file-directory-p project)
    (add-to-list 'load-path project)))
#+END_SRC
*** global
Configure global settings.
**** save place
Save places, and do so in a file.
#+BEGIN_SRC emacs-lisp
(setq save-place-file (expand-file-name ".places" user-emacs-directory))
#+END_SRC
**** autosave and backups
Store backups in backups folder. Store autosaves in temp folder. We don't want this to mess with git.
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist
  `(("." . ,(expand-file-name
    (concat user-emacs-directory "backups")))))
(setq auto-save-file-name-transforms
  `((".*" ,temporary-file-directory t)))
(setq create-lockfiles nil)
#+END_SRC
**** global modes
Turn on a lot of useful (and prettifying) modes.
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
(global-auto-revert-mode t)
(global-hl-line-mode)
(add-hook 'after-init-hook 'global-company-mode)
(add-hook 'prog-mode-hook 'highlight-numbers-mode)
(add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
(global-display-line-numbers-mode)
(ivy-mode 1)
(global-prettify-symbols-mode +1)
(global-diff-hl-mode)
(dimmer-mode t)
;; (global-whitespace-mode)
(save-place-mode 1)
(dumb-jump-mode)
(which-key-mode)
(tool-bar-mode -1)
(menu-bar-mode -1)
(zoom-mode 1)
(beacon-mode 1)
(global-font-lock-mode 1)
(mode-line-bell-mode)
#+END_SRC
**** reasonable
settings
Insertion of text should delete region. Bracket pairs should be highlighted.
Window (or frame ...) should start maximized. Garbage collection and memory.
#+BEGIN_SRC emacs-lisp
(setq mouse-yank-at-point t)
(setq show-paren-delay 0.0)
(setq gc-cons-threshold 100000000)
(setq read-process-output-max (* 1024 1024)) ;; 1mb
(setq sentence-end-double-space nil)
(setq echo-keystrokes 0.1)
(delete-selection-mode 1)
(add-to-list 'default-frame-alist '(fullscreen . maximized))
(defalias 'yes-or-no-p 'y-or-n-p)
(defun my-font-lock-hook ()
  "Slantend and enchanted."
  (set-face-attribute 'font-lock-comment-face nil :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil :weight 'bold)
)
(add-hook 'font-lock-mode-hook 'my-font-lock-hook)
#+END_SRC
**** tabs all the way
Tabs are 4 spaces wide. No electric indent. Pipe char to show indentation.
Commands to enable/disable sane tabs.
#+BEGIN_SRC emacs-lisp
(setq custom-tab-width 4)

(defun disable-tabs ()
  (interactive)
  (setq indent-tabs-mode nil))
(defun enable-tabs  ()
  (interactive)
  (local-set-key (kbd "TAB") 'tab-to-tab-stop)
  (setq indent-tabs-mode t)
  (setq tab-width custom-tab-width))

(setq-default python-indent-offset custom-tab-width) ;; Python
(setq-default js-indent-level custom-tab-width)      ;; Javascript

(setq-default electric-indent-inhibit t)

(setq backward-delete-char-untabify-method 'hungry)
#+END_SRC
**** key bindings
Change up the key bindings a bit.

+ =C-x g= opens magit status.
+ =M-x= opens smex.
+ =s-,= (un-)comments.
+ =s-a= runs ack. _Requires ack_!
+ =C-x r q= (really) quits.
+ =C-x C-c= opens this config org file.
+ =M-o= goes to the "other" window or the last buffer.
+ =C-x j= dumb-jumps.
+ =C-x t m= opens the timemachine.
+ =s-s= turns on flyspell prog mode.
+ =C-x p f= finds a project file.
+ =C-c k= kills all other buffers.
+ =C-c o= opens file with outside program.
+ =s-RET= will open a (indented) line above.
+ =s-k= kills the whole line.
+ =C-c d= duplicates the current line (or region).
+ =C-x 4 t= transposes windows (watch out for treemacs).
+ =C-d d= opens docker.
+ =C-+= expands region.
+ =C-z=/=C-S-z= undos/redos. 

Do we really need a line here? Yes.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x g") 'magit-status)
(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "s-,") 'evilnc-comment-or-uncomment-lines)
(global-set-key (kbd "s-a") 'ack)
(global-set-key (kbd "C-x r q") 'save-buffers-kill-terminal)
(global-set-key
  (kbd "C-x C-c")
  (lambda () (interactive)(switch-to-buffer (find-file-noselect (expand-file-name "configuration.org" walheimat-emacs-config-default-path)))))
(global-set-key (kbd "M-o") #'crux-other-window-or-switch-buffer)
(global-set-key (kbd "C-x j") 'dumb-jump-go)
(global-set-key (kbd "C-x t m") 'git-timemachine-toggle)
(global-set-key (kbd "s-s") 'flyspell-prog-mode)
(global-set-key (kbd "C-x p f") 'find-file-in-project)
(global-set-key (kbd "C-c k") #'crux-kill-other-buffers)
(global-set-key (kbd "C-c o") #'crux-open-with)
(global-set-key (kbd "s-<return>") #'crux-smart-open-line-above)
(global-set-key (kbd "s-k") #'crux-kill-whole-line)
(global-set-key (kbd "C-c d") #'crux-duplicate-current-line-or-region)
(global-set-key (kbd "C-x 4 t") #'crux-transpose-windows)
(global-set-key (kbd "C-c d") 'docker)
(global-set-key (kbd "C-+") 'er/expand-region)
(global-unset-key (kbd "C-z"))
(global-set-key (kbd "C-z") 'undo-fu-only-undo)
(global-set-key (kbd "C-S-z") 'undo-fu-only-redo)
#+END_SRC
**** theme
Be sure to check out [[https://peach-melpa.org/][Peach Melpa]] to find a theme you like.
#+BEGIN_SRC emacs-lisp
(load-theme 'spacemacs-dark t)
#+END_SRC
**** font size
Prefer FiraCode (-> mononoki -> Liberation -> DejaVu). If emacs runs with the custom arg =-bigger=, the default font size is 14 (instead of 10).

To get support for ligatures, install the symbol font from [[https://github.com/tonsky/FiraCode/files/412440/FiraCode-Regular-Symbol.zip][here]].
#+BEGIN_SRC emacs-lisp
(require 'dash)
(defun font-candidate (&rest fonts)
  "Return the first available font from a list of fonts."
  (--first (find-font (font-spec :name it)) fonts))

(set-face-attribute 'default nil :font (font-candidate '"Fira Code 12" "mononoki 12" "Liberation Mono 12" "DejaVu Sans Mono 12"))

(defun found-custom-arg (switch)
  "Check for custom arg and delete it right away so emacs doesn't complain."
  (let ((found-switch (member switch command-line-args)))
    (setq command-line-args (delete switch command-line-args))
    found-switch))

(if (found-custom-arg "-bigger")
  (set-default-font (font-candidate '"Fira Code 14" "mononoki 14" "Liberation Mono 14" "DejaVu Sans Mono 14"))
)

;; this requires you to have installed iosevka
(if (found-custom-arg "-iosevka")
  (set-default-font "Iosevka 12")
)

;; use fira mode if it's the default font and the symbol font is installed
(use-package fira-code-mode
  :if (and (x-list-fonts "Fira Code Symbol") (string= "Fira Code" (face-attribute 'default :family)))
  :custom (fira-code-mode-disabled-ligatures '("[]" "x"))  ; ligatures you don't want
  :hook prog-mode)                                         ; mode to enable fira-code-mode in
#+END_SRC
**** fun stuff
Zone out after a minute.
#+BEGIN_SRC emacs-lisp
(require 'zone)
(zone-when-idle 180)
#+END_SRC
**** func stuff
Add some functions.
#+BEGIN_SRC emacs-lisp
;; check if buffer is treemacs buffer
;; similar to minibufferp
(defun treemacsbufferp ()
  "Check if this is the treemacs buffer."
  (eq (current-buffer) (treemacs-get-local-buffer)))
#+END_SRC
*** specific
Configure specific packages/aspects.
**** company
Set up company-box
#+BEGIN_SRC emacs-lisp
(require 'company-box)
(add-hook 'company-mode-hook 'company-box-mode)
(setq company-minimum-prefix-length 3)
(setq company-idle-delay 0.5)
#+END_SRC
**** docker
Key binding.
#+BEGIN_SRC emacs-lisp
(use-package docker
  :ensure t
  :bind ("C-c d" . docker))
#+END_SRC
**** dap
Require stuff.
#+BEGIN_SRC emacs-lisp
(require 'cl)
(require 'dap-node)
(require 'dap-python)
(setq dap-python-executable "python3")
(setq dap-auto-configure-features '(sessions locals breakpoints))
(dap-auto-configure-mode 1)
(dap-register-debug-template
  "Node::Attach"
  (list :type "node"
        :request "attach"
	:remoteRoot "/usr/src/app"
	:localRoot "/home/krister/theventury"
	:port 9229
        :name "Node::Attach"))
(add-hook 'dap-stopped-hook
          (lambda (arg) (call-interactively #'dap-hydra)))
#+END_SRC
**** diff-hl
Refresh post magit.
#+BEGIN_SRC emacs-lisp
(add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
#+END_SRC
**** diminish
#+BEGIN_SRC emacs-lisp
(require 'diminish)
(diminish 'company-mode)
(diminish 'ivy-mode)
(diminish 'company-box-mode)
(diminish 'beacon-mode)
(diminish 'zoom-mode)
(diminish 'which-key-mode)
(diminish 'eldoc-mode)
(diminish 'highlight-indent-guides-mode)
#+END_SRC
**** dimmer
Make dimmed frames a bit dimmer.
#+BEGIN_SRC emacs-lisp
(require 'dimmer)
(setq dimmer-fraction 0.3)
(dimmer-configure-org)
(dimmer-configure-magit)
(dimmer-configure-hydra)
(setq dimmer-adjustmentmode :both)
#+END_SRC
**** drag stuff
Use the default key bindings.
#+BEGIN_SRC emacs-lisp
(require 'drag-stuff)
(drag-stuff-define-keys)
#+END_SRC
**** dumb-jump
Use ivy. We have ivy.
#+BEGIN_SRC emacs-lisp
(setq dumb-jump-selector 'ivy)
#+END_SRC
**** eshell
Set up eshell.
#+BEGIN_SRC emacs-lisp
(defun setup-eshell-ivy-completion ()
  (define-key eshell-mode-map [remap eshell-pcomplete] 'completion-at-point))

(defun my-eshell-mode-hook ()
  "Hooks for eshell mode."
  (esh-autosuggest-mode)
  (setup-eshell-ivy-completion))

(add-hook 'eshell-mode-hook 'my-eshell-mode-hook)
(with-eval-after-load "esh-opt"
  (autoload 'epe-theme-lambda "eshell-prompt-extras")
  (setq eshell-highlight-prompt nil
        eshell-prompt-function 'epe-theme-lambda))
#+END_SRC
**** flycheck
Only check on save. Configure threshold and (unused) idle-change delay.
#+BEGIN_SRC emacs-lisp
(defun my-flycheck-hook()
  (setq flycheck-check-syntax-automatically '(save idle-change))
  (setq flycheck-checker-error-threshold 100)
  (setq flycheck-idle-change-delay 2.5))
;; (add-hook 'flycheck-mode-hook 'my-flycheck-hook)
#+END_SRC
**** override finding eslint
Eslint configs can be found using a file, not a directory.
#+BEGIN_SRC emacs-lisp
(require 'flycheck)
(defun flycheck-eslint-config-exists-p ()
  "Whether there is a valid eslint config for the current buffer."
  (let* ((executable (flycheck-find-checker-executable 'javascript-eslint))
         (exitcode (and executable (call-process executable nil nil nil
                                                 "--print-config" ".eslintrc"))))
    (eq exitcode 0)))
#+END_SRC
**** load eslint/tslint from local node modules
Use the locally installed eslint/tslint.
#+BEGIN_SRC emacs-lisp
(defun my/use-eslint-from-node-modules ()
  (let* ((root (locate-dominating-file
                (or (buffer-file-name) default-directory)
                "node_modules"))
         (eslint
          (and root
               (expand-file-name "node_modules/.bin/eslint"
                               root))))
    (when (and eslint (file-executable-p eslint))
      (setq-local flycheck-javascript-eslint-executable eslint))))

(defun my/use-tslint-from-node-modules ()
  (let* ((root (locate-dominating-file
                (or (buffer-file-name) default-directory)
                "node_modules"))
         (tslint
          (and root
               (expand-file-name "node_modules/.bin/tslint"
                                 root))))
    (when (and tslint (file-executable-p tslint))
      (setq-local flycheck-typescript-tslint-executable tslint))))

(add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules)
(add-hook 'flycheck-mode-hook #'my/use-tslint-from-node-modules)
#+END_SRC
**** function to switch between tslint and lsp
#+BEGIN_SRC emacs-lisp
(defun switch-to-tslint ()
  (lsp-disconnect)
  (setq flycheck-checker 'typescript-tslint))

(defun switch-back-to-lsp ()
  (lsp)
  (setq flycheck-checker 'lsp))

(defun tslint ()
  (interactive)
  (if (bound-and-true-p lsp-mode)
      (switch-to-tslint)
    (switch-back-to-lsp)))
#+END_SRC
**** flyspell
There could be too many messages.
#+BEGIN_SRC emacs-lisp
(setq flyspell-issue-message-flag nil)
#+END_SRC
**** highlight-indent-guides
#+BEGIN_SRC emacs-lisp
(setq highlight-indent-guides-method 'character)
#+END_SRC
**** kaolin
Apply kaolin theme to treemacs.
#+BEGIN_SRC emacs-lisp
(require 'kaolin-themes)
(kaolin-treemacs-theme)
(setq kaolin-ocean-alt-bg t)
;; Enable distinct background for fringe and line numbers.
(setq kaolin-themes-distinct-fringe t)  

;; Enable distinct colors for company popup scrollbar.
(setq kaolin-themes-distinct-company-scrollbar t)
#+END_SRC
**** lsp
Prefer capf, bigger delay, configure for angular.
#+BEGIN_SRC emacs-lisp
;; (setq lsp-prefer-capf t)
;; (setq lsp-idle-delay 0.500)
;; (setq lsp-semantic-highlighting t)
(setq lsp-clients-angular-language-server-command
  '("node"
    "/home/krister/.config/nvm/12.16.1/lib/node_modules/@angular/language-server"
    "--ngProbeLocations"
    "/home/krister/.config/nvm/12.16.1/lib/node_modules"
    "--tsProbeLocations"
    "/home/krister/.config/nvm/12.16.1/lib/node_modules"
    "--stdio"))
#+END_SRC
**** mode mappings
Set up mode mappings.
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.vue\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
(add-to-list 'auto-mode-alist '("\\.jsx\\'" . rjsx-mode))
(add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-mode))
(add-to-list 'auto-mode-alist '("\\.http" . restclient-mode))
(add-to-list 'auto-mode-alist '("\\.component.html" . web-mode))
(add-to-list 'auto-mode-alist '("\\.component.css" . css-mode))
(add-to-list 'auto-mode-alist '("\\.json" . json-mode))
(add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))
(add-to-list 'auto-mode-alist '("\\.ejs\\'" . web-mode))
#+END_SRC
**** prettier-js
Require so it can be used outside of minor mode.
#+BEGIN_SRC emacs-lisp
(require 'prettier-js)
(setq prettier-js-args '(
  "--print-width" "91"
))
#+END_SRC
**** treemacs
Less indentation. Never other window.
#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-indentation                   1
          treemacs-width                         35
	  treemacs-move-forward-on-expand        t
	  treemacs-follow-after-init             nil
          treemacs-indentation-string            " ⁝ "
          treemacs-is-never-other-window         t
	  treemacs-no-delete-other-windows       nil
          treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-show-hidden-files             t)
    (treemacs-follow-mode nil)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
               (not (null treemacs-python-executable)))
      (`(t . t)
        (treemacs-git-mode 'deferred))
      (`(t . _)
        (treemacs-git-mode 'extended))))
  :bind
    (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

;; (use-package treemacs-evil
;;   :after treemacs evil
;;   :ensure t)

(use-package treemacs-projectile
  :after treemacs projectile
  :ensure t)

(use-package treemacs-icons-dired
  :after treemacs dired
  :ensure t
  :config (treemacs-icons-dired-mode))

(use-package treemacs-magit
  :after treemacs magit
  :ensure t)

(use-package treemacs-persp
  :after treemacs persp-mode
  :ensure t
  :config (treemacs-set-scope-type 'Perspectives))
(treemacs)
#+END_SRC
**** telephone-line
A slightly nicer modeline.
#+BEGIN_SRC emacs-lisp
(setq telephone-line-lhs
      '((evil   . (telephone-line-buffer-segment))
        (accent . (telephone-line-vc-segment))
        (nil    . (telephone-line-minor-mode-segment
                   telephone-line-erc-modified-channels-segment
                   telephone-line-process-segment))))
(setq telephone-line-rhs
      '((nil    . (telephone-line-misc-info-segment
                   telephone-line-flycheck-segment))
        (accent . (telephone-line-major-mode-segment))
        (evil   . (telephone-line-airline-position-segment))))
(setq telephone-line-primary-right-separator 'telephone-line-identity-left
      telephone-line-secondary-right-separator 'telephone-line-identity-hollow-left
      telephone-line-primary-left-separator 'telephone-line-identity-right
      telephone-line-secondary-left-separator 'telephone-line-identity-hollow-right)
(telephone-line-mode t)
#+END_SRC
**** yasnippet
Don't enable globally but prepare for per-buffer use.
#+BEGIN_SRC emacs-lisp
(yas-reload-all)
#+END_SRC
*** modes
Configure modes.
**** css mode
Just activate flycheck and tabs for now.
#+BEGIN_SRC emacs-lisp
(defun my-css-mode-hook ()
  "Hooks for css mode."
  (add-node-modules-path)
  (enable-tabs)
  (flycheck-mode))

(add-hook 'css-mode-hook 'my-css-mode-hook)
#+END_SRC
**** elixir mode
Enable flycheck.
#+BEGIN_SRC emacs-lisp
(defun my-elixir-mode-hook ()
  "Hooks for elixir mode."
  (flycheck-mode))

(add-hook 'elixir-mode-hook 'my-elixir-mode-hook)
#+END_SRC
**** js2 mode
Enable Flycheck and disable internal checker.
 #+BEGIN_SRC emacs-lisp
(setq-default js2-show-parse-errors nil)
(setq-default js2-strict-missing-semi-warning nil)

(defun my-js2-mode-hook ()
  "Hooks for js2 mode."
  (enable-tabs)
  (add-node-modules-path)
  (flycheck-mode 1)
  (rainbow-mode)
  (rainbow-delimiters-mode)
  (drag-stuff-mode)
  (add-hook 'local-write-file-hooks
    (lambda ()
      (delete-trailing-whitespace)
        nil))
)
(add-hook 'js2-mode-hook 'my-js2-mode-hook)
 #+END_SRC
**** org mode
***** org mode itself
Use bullets mode and make the ellipses bendy arrows. When a =TODO= is =DONE= log a note.
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook (lambda() (org-bullets-mode t)))
(setq org-ellipsis "↷"
      org-log-done 'note
      org-directory "~/org/"
      org-default-notes-file (concat org-directory "notes.org")
      org-startup-with-inline-images t
      org-todo-keywords
      '((sequence "TODO(t)" "IN PROGRESS(p)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))
(require 'org-install)
(setq org-modules '(org-habit org-info org-tempo))
(org-load-modules-maybe t)
(setq org-habit-graph-column 105)

(defun org-make-habit()
    (interactive)
    (org-set-property "STYLE" "habit"))
#+END_SRC
***** agendas
Everything concerning agendas (thx to mwfogleman).
#+BEGIN_SRC emacs-lisp
(use-package org-super-agenda
  :init
  (org-super-agenda-mode)
  (defun my-org-super-agenda ()
    (interactive)
    (let ((org-super-agenda-groups
           '((:name "Schedule"
                    :time-grid t)
             (:name "Development"
                    :tag "dev")
             )))
      (org-agenda nil "a")))

  (defun my-org-super-agenda-today ()
    (interactive)
    (progn
      (my-org-super-agenda)
      (org-agenda-day-view)))

  (defun my-personal-agenda ()
    (interactive)
    (let ((org-super-agenda-groups
           '((:discard (:tag ("tv"))))))
      (org-agenda nil "a")
      (org-agenda-day-view)))

  (defun my-dev-agenda ()
    (interactive)
    (let ((org-super-agenda-groups
           '((:name "Development"
                    :tag "dev")
              (:discard (:anything t)))))
      (org-agenda nil "a")
      (org-agenda-day-view)))

  (defun my-bla-agenda ()
    (interactive)
    (let ((org-super-agenda-groups
           '((:name "Meetings"
                    :tag "bla")
              (:discard (:anything t)))))
      (org-agenda nil "a")
      (org-agenda-day-view)))

  (defun my-edu-agenda ()
    (interactive)
    (let ((org-super-agenda-groups
           '((:name "Education"
                    :tag "edu")
              (:discard (:anything t)))))
      (org-agenda nil "a")
      (org-agenda-day-view)))

  (defun my-okr-agenda ()
    (interactive)
    (let ((org-super-agenda-groups
           '((:name "OKR"
                    :tag "okr")
              (:discard (:anything t)))))
      (org-agenda nil "a")
      (org-agenda-day-view)))

  (bind-keys ("C-c 0" . my-org-super-agenda-today)
             ("C-c 1" . my-dev-agenda)
	     ("C-c 2" . my-bla-agenda)
	     ("C-c 3" . my-edu-agenda)
	     ("C-c 4" . my-okr-agenda)
             ("C-c 5" . my-personal-agenda)
             ("C-c 6" . my-org-super-agenda)))

;; you will need to create these (or other) files manually for now
(setq org-agenda-files (quote ("~/org/tasks.org"))))
#+END_SRC
**** python mode
Enable flycheck.
#+BEGIN_SRC emacs-lisp
(defun my-python-mode-hook ()
  "Hooks for python mode."
  (flycheck-mode 1)
  (drag-stuff-mode)
  (add-hook 'local-write-file-hooks
    (lambda ()
      (delete-trailing-whitespace)
        nil))
)
(add-hook 'python-mode-hook 'my-python-mode-hook)
#+END_SRC
**** rjsx mode
Pretty much like js2.
#+BEGIN_SRC emacs-lisp
(defun rjsx-indent ()
  (interactive)
  (setq-local indent-line-function 'js-jsx-indent-line)
)

(defun my-rjsx-mode-hook ()
  "Hooks for rjsx mode."
  (add-node-modules-path)
  (enable-tabs)
  (flycheck-mode)
  (rjsx-indent)
  (rainbow-mode)
  (rainbow-delimiters-mode)
  (drag-stuff-mode)
  (add-hook 'local-write-file-hooks
    (lambda ()
      (delete-trailing-whitespace)
        nil))
)
(add-hook 'rjsx-mode-hook 'my-rjsx-mode-hook)
#+END_SRC
**** typescript mode
Enable lsp, flycheck and sane tabs. And some other stuff.
#+BEGIN_SRC emacs-lisp
(defun my-typescript-mode-hook ()
  "Hooks for typescript mode."
  (enable-tabs)
  (drag-stuff-mode)
  (add-node-modules-path)
  (flycheck-mode 1)
  (lsp)
  (rainbow-delimiters-mode)
  (add-hook 'local-write-file-hooks
    (lambda ()
      (delete-trailing-whitespace)
        nil)))

(add-hook 'typescript-mode-hook 'my-typescript-mode-hook)
#+END_SRC
**** web mode
Web mode uses flycheck with lsp enabled.
#+BEGIN_SRC emacs-lisp
(require 'web-mode)
(setq web-mode-comment-style 2)
(add-to-list 'web-mode-comment-formats '("vue" . "//"))
(defun my-web-mode-hook ()
  "Hooks for web mode."
  (enable-tabs)
  (web-mode-use-tabs)
  (drag-stuff-mode)
  (add-node-modules-path)
  (lsp)
  (flycheck-mode)
  (add-hook 'local-write-file-hooks
    (lambda ()
      (delete-trailing-whitespace)
        nil)))

(add-hook 'web-mode-hook 'my-web-mode-hook)
#+END_SRC
**** zoom mode
Use the golden ratio.
#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(zoom-size '(0.618 . 0.618)))
#+END
