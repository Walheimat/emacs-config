#+TITLE: Walheimat's Emacs Config
#+AUTHOR: [[https://gitlab.com/Walheimat][@Walheimat]]

[[./assets/logo.png]]

* About

** Heads-Up

This project is my personal literate Emacs[fn:1] configuration.

If you're a complete beginner, you will find [[https://github.com/emacs-tw/awesome-emacs#starter-kit][more user-friendly and
less tailor-made configs]] out there.

Feel free to consider it a jumping-off-point for your own custom
config. Just know that nothing in this config should be considered
/good practice/, it's mostly just how I (think I) like things to be.

** Try-Out

If you're interested in trying out Emacs using my config, here are the
necessary steps:

+ Install Emacs if you haven't[fn:2]
+ =git clone= this repository into your =user-emacs-directory=[fn:3]
+ load file =setup/wal-setup.el=, select =init file= and choose =link= or
  =copy=
+ close and re-run Emacs which should (download and) install all[fn:4]
  packages.

If you do not wish to =clone= this repo in your =user-emacs-directory= or
use the default name, you will need to adapt the variable
=wal/emacs-config-default-path= in the example init file you just
copied.

You can then use =customize-group= to change settings for various
aspects of the config.

** Peculiarities

*** Daemon Mode

This config is /daemon-ready/, i.e. if you start Emacs with the =--daemon=
flag, the config will make sure that any customization that requires a
frame will only be loaded once a frame was created.

A =systemd= service config can be found in the =/templates= directory to
get you started:

+ Run =mkdir -p ~/.config/systemd/user=
+ run =cp ./templates/emacs.service ~/.config/systemd/user=
+ adapt that =emacs.service= file to point to the correct path
+ run =systemctl --user enable emacs=.

Or you just execute =emacs --daemon= in a terminal or your shell's
config.

In any case, an Emacs daemon will start (on start-up). To connect, you
can use, for example, =emacsclient -c -n=[fn:5].

*** Package-Like

Custom functions and variables use the =wal/= scope and belong to their
respective section's package. Each package/section defines a group for
customization purposes.

With a few exceptions, each package has a *Header* and a *Footer* that
contains declarations for the package, as well as either a *Packages*
section or several sections grouping packages.

Enough preambling, let's configure some Emacs. The init script will
evaluate /everything/[fn:6] that follows.

* Settings
:PROPERTIES:
:header-args:emacs-lisp: :tangle (expand-file-name "wal-settings.el" wal/emacs-config-package-path)
:END:

** Header
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
;;; wal-settings.el --- Settings.

;;; Commentary:
;;
;; The global settings.

;;; Code:

(defvar wal/load-custom-file-immediately)
(defvar use-package-always-ensure)
(defvar use-package-always-defer)

(defgroup wal-settings nil
  "Change core settings."
  :group 'wal
  :tag "Settings")
#+END_SRC

** Personal

Set some personal info[fn:7].

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Krister Schuchardt"
      user-mail-address "krister.schuchardt@gmail.com")
#+END_SRC

** Start-Up

Customize start-up.

#+BEGIN_SRC emacs-lisp
;; Warn Mac/Windows users.
(unless (eq system-type 'gnu/linux)
  (warn "\
    Warning: Config only tested on Linux. While I did get in
    running on Windows 10, it was quite tricky and involved
    setting unsafe options."))

(defconst wal/experimental (> emacs-major-version 28)
  "Set to t if Emacs was built from master branch.
This variable is used to account for certain features (and
bugs).")

;; Maximize frame.
(setq frame-resize-pixelwise t)
(add-to-list 'initial-frame-alist '(fullscreen . maximized)) ; Leads to issues when using a tiling wm.

;; No splash.
(setq inhibit-startup-message t)
(setq initial-major-mode 'fundamental-mode) ; Avoids loading `prog-mode' derivatives.

;; Use a distinct file for customization and create it if it doesn't exist.
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(unless (file-exists-p custom-file)
  (write-region "" nil custom-file))

;; If the `custom-file' isn't loaded right away, customizing variables
;; like `wal/use-hyper-prefix' will have no effect but it might
;; (needlessly) increase start-up time.
(if wal/load-custom-file-immediately
    (load custom-file)
  (add-hook 'after-init-hook (lambda () (load custom-file))))

;; Accept redefinitions.
(setq ad-redefinition-action 'accept)
#+END_SRC

** Package Archives

Add MELPA to the package archives. Most (if not all) packages will be
installed from there.

#+BEGIN_SRC emacs-lisp
(require 'package)

(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/")
             t)
#+END_SRC

** Core Packages

Before =use-package= macro can be used to configure other packages it
and some other packages need to be installed the hard way.

#+BEGIN_SRC emacs-lisp
(defconst wal/core-packages
  '(diminish
    delight
    use-package-ensure-system-package
    use-package)
  "Packages to install before using `use-package'.
Such as package `use-package'.")

(defun wal/install-packages (packages)
  "Install all PACKAGES unless already installed.
Concludes by calling `delete-other-windows'."
  (mapc (lambda (it)
          (when (not (package-installed-p it))
            (package-install it)))
        packages)
  (delete-other-windows))

;; Try to install. On fail refresh and install again.
(condition-case nil
    (wal/install-packages wal/core-packages)
  (error
   (package-refresh-contents)
   (wal/install-packages wal/core-packages)))

;; Always ensure and defer.
(setq use-package-always-ensure t
      use-package-always-defer t)
#+END_SRC

** Directories

Make sure that custom directories exist. We want:

+ A cache directory to store bookmarks etc.
+ a directory for site lisp
+ a default directory for org files
+ a default directory for agenda tasks
+ a default directory for notes.

#+BEGIN_SRC emacs-lisp
(defcustom wal/cache-directory (expand-file-name ".cache" user-emacs-directory)
  "The cache directory."
  :type 'string
  :group 'wal-settings)

(defcustom wal/site-lisp-directory (expand-file-name "site-lisp" user-emacs-directory)
  "Directory of site Lisp packages."
  :type 'string
  :group 'wal-settings)

(defcustom wal/org-directory (expand-file-name "org" "~")
  "Default directory for org files."
  :type 'string
  :group 'wal-settings)

(defcustom wal/agenda-tasks-directory (expand-file-name "tasks" wal/org-directory)
  "One-size-fits-all directory for agenda tasks."
  :type 'string
  :group 'wal-settings)

(defcustom wal/org-roam-directory (expand-file-name "zettelkasten" wal/org-directory)
  "Directory for Zettelkasten note-taking."
  :type 'string
  :group 'wal-settings)

(defun wal/maybe-create-directories ()
  "Create directories if they don't exist."
  (mapc (lambda (it)
          (unless (file-directory-p it)
            (make-directory it)))
        `(,wal/cache-directory
          ,wal/site-lisp-directory
          ,wal/org-directory
          ,wal/agenda-tasks-directory
          ,wal/org-roam-directory)))

(add-hook 'emacs-startup-hook #'wal/maybe-create-directories)
#+END_SRC

** Site-Lisp

Add =site-lisp= directory and sub-directories to load path. I put
non-MELPA packages here.

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path wal/site-lisp-directory)

;; Allow us to load from site-lisp package.
(add-to-list 'custom-theme-load-path
             (expand-file-name "emacs-site-lisp" wal/site-lisp-directory))

;; Add subdirs as well so we don't need to match `:load-path'.
(dolist (project (directory-files wal/site-lisp-directory t "\\w+"))
  (when (file-directory-p project)
    (add-to-list 'load-path project)))
#+END_SRC

** Saving and Backups

Don't clutter up workspaces.

#+BEGIN_SRC emacs-lisp
;; Store backups in backups folder.
(setq backup-directory-alist
      `(("." . ,(expand-file-name (concat user-emacs-directory "backups")))))

;; Store autosaves in temp folder.
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

;; We don't want this to mess with git.
(setq create-lockfiles nil)
#+END_SRC

** Global Modes

Any mode that should be on/off no matter what.

#+BEGIN_SRC emacs-lisp
;; A bunch of useful modes.
(show-paren-mode 1)
(global-auto-revert-mode 1)
(global-prettify-symbols-mode 1)
(save-place-mode 1)
(delete-selection-mode 1)
(column-number-mode 1)

;; No need for bars.
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC

** Reasonable Sizes

Make things shorter and snappier. These settings don't belong to
packages.

#+BEGIN_SRC emacs-lisp
(defun wal/bytes-per-mb (num)
  "Return the integer value of NUM megabytes in bytes.

This function may be used to set variables that expect bytes."
  (floor (* 1024 1024 num)))

(setq read-process-output-max (wal/bytes-per-mb 5)
      echo-keystrokes 0.1
      ;; New in version 28. Otherwise you need an alias.
      use-short-answers t
      ;; Undo limits, keeping factor, defaults in side commments.
      undo-limit (wal/bytes-per-mb 1) ; 160000 bytes.
      undo-strong-limit (wal/bytes-per-mb 1.5) ; 240000 bytes.
      undo-outer-limit (wal/bytes-per-mb 150)) ; 24000000 bytes.
#+END_SRC

** Indentation

Set up an easy way to switch between tabs and spaces for indentation.

#+BEGIN_SRC emacs-lisp
(defcustom wal/indent-offset 4
  "The indent offset in spaces."
  :type 'integer
  :group 'wal-settings)

(defcustom wal/prefer-tabs nil
  "Whether tabs are preferred for indentation."
  :type 'boolean
  :group 'wal-settings)

(defun wal/reset-to-standard (sym &optional locally)
  "Reset symbol SYM to its standard value.
If LOCALLY is t, the local variable is killed while its global
value is left untouched."
  (if locally
      (if (local-variable-p sym)
          (kill-local-variable sym)
        (user-error "'%s' has no local binding" sym))
    (set-default sym (eval (car (get sym 'standard-value))))))

(defun wal/reset-indent-defaults ()
  "Reset indent defaults.
Resets all variables that were initially set by
`wal/set-indent-defaults'."
  (interactive)
  (mapc (lambda (it)
          (wal/reset-to-standard it))
        '(python-indent-offset
          js-indent-level
          css-indent-offset
          electric-indent-inhibit
          tab-width
          indent-tabs-mode)))

(defun wal/disable-tabs ()
  "Disable tabs.

Sets variable `indent-tabs-mode' to nil."
  (interactive)
  (setq indent-tabs-mode nil))

(defun wal/enable-tabs ()
  "Enable tabs.

Sets tab variable `indent-tabs-mode' to t."
  (interactive)
  (setq indent-tabs-mode t))

(cl-defun wal/maybe-enable-tabs (&key indent mode)
  "Maybe enable tabs.
Optionally set `indent-line-function' (if allowed) to INDENT and
call MODE after changes."
  (if wal/prefer-tabs
      (wal/enable-tabs)
    (wal/disable-tabs))
  (when indent
    (setq-local indent-line-function indent))
  (when mode
    (funcall mode)))

(defun wal/set-indent-defaults (&optional num)
  "Set indent defaults.
All offsets are set to `wal/indent-offset' or optionally to NUM."
  (interactive "nSet tab width to: ")
  (let ((offset (or num wal/indent-offset)))
    (setq-default python-indent-offset offset ; Python
                  js-indent-level offset ; JavaScript
                  css-indent-offset offset ; CSS and SCSS
                  tab-width offset
                  electric-indent-inhibit t
                  indent-tabs-mode wal/prefer-tabs)
    (setq backward-delete-char-untabify-method 'hungry)))

(add-hook 'emacs-startup-hook 'wal/set-indent-defaults)
#+END_SRC

*** Dir Local Indentation

Sometimes you have to play using other people's rules. You can run
=add-dir-local-variable= to do so. Check out the =.dir-locals.el= template
found in the =/templates= folder for an example using spaces.

** Persistent =*scratch*=

Let's keep the scratch contents. This was cribbed from [[https://www.john2x.com/emacs.html][john2x's
config]].

#+BEGIN_SRC emacs-lisp
;; Empty scratch message.
(setq initial-scratch-message "")

(defcustom wal/scratch-persist-file (expand-file-name "scratch-persist" wal/cache-directory)
  "The file to persist the *scratch* buffer's content in."
  :type 'string
  :group 'wal-settings)

(defun wal/persist-scratch ()
  "Persist contents of *scratch* buffer.
The contents are stored in `wal/scratch-persist-file'."
  (with-current-buffer (get-buffer-create "*scratch*")
    (write-region (point-min) (point-max) wal/scratch-persist-file)))

(defun wal/rehydrate-scratch ()
  "Re-hydrate scratch buffer (if persisted).
This overrides the scratch buffer with the content stored in
`wal/scratch-persist-file'."
  (when (file-exists-p wal/scratch-persist-file)
    (with-current-buffer (get-buffer "*scratch*")
      (delete-region (point-min) (point-max))
      (insert-file-contents wal/scratch-persist-file))))

(add-hook 'emacs-startup-hook #'wal/rehydrate-scratch)
(add-hook 'kill-emacs-hook #'wal/persist-scratch)
#+END_SRC

** Footer
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
(provide 'wal-settings)

;;; wal-settings.el ends here
#+END_SRC

* Key Bindings
:PROPERTIES:
:header-args:emacs-lisp: :tangle (expand-file-name "wal-key-bindings.el" wal/emacs-config-package-path)
:END:

I use many[fn:8] custom keybindings.

** Header
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
;;; wal-key-bindings.el --- Key bindings.

;;; Commentary:
;;
;; Key bindings package.

;;; Code:

(declare-function wal/captain-sink "wal-key-bindings.el")
(declare-function wal/colonel-sink "wal-key-bindings.el")
(declare-function wal/general "wal-key-bindings.el")
(declare-function wal/general-sink "wal-key-bindings.el")
(declare-function wal/major-sink "wal-key-bindings.el")
(declare-function wal/find-file-delete-other-windows "wal-func.el")

(defgroup wal-key-bindings nil
  "Change key bindings settings."
  :group 'wal
  :tag "Key bindings")

(defcustom wal/use-hyper-prefix t
  "Whether the hyper modifier should be used to prefix user keys.

Changing this value will only take effect after a re-load. Unless
`wal/load-custom-file-immediately' is set to t, setting this to
nil will have no effect."
  :type 'boolean
  :group 'wal-key-bindings)

;; American ranks.
(defcustom wal/general-key ","
  "The primary (or general) leader key."
  :type 'string
  :group 'wal-key-bindings)

(defcustom wal/colonel-key ";"
  "The secondary (or colonel) leader key."
  :type 'string
  :group 'wal-key-bindings)

(defcustom wal/major-key "."
  "The tertiary (or major) leader key."
  :type 'string
  :group 'wal-key-bindings)

(defcustom wal/captain-key "/"
  "The quaternary (or captain) leader key."
  :type 'string
  :group 'wal-key-bindings)

(defcustom wal/lieutenant-key "'"
  "The quinary (or lieutenant) leader key."
  :type 'string
  :group 'wal-key-bindings)

(cl-defmacro wal/create-leader-sink (name &key definer prefix)
  "Macro to create a leader sink `NAME-sink'.

NAME is the name of the macro. DEFINER is the definer to create
the sink for and PREFIX is its prefix."
  (let* ((defname (symbol-name definer))
         (suf (substring prefix -1))
         (wk (upcase (concat (substring defname 4) "!"))))
    (progn
      (general-define-key :prefix prefix suf `(:ignore t :wk ,wk))
      `(defmacro ,name (&rest args)
         `(, ',definer ,@,`(mapcar (lambda (it)
                                     (if (stringp it)
                                         (concat ,suf it)
                                       it)) args))))))

(defun wal/prefix-user-key (user-key)
  "Prefix USER-KEY.

The default prefix is the hyper key unless Emacs is not running
in GUI mode or `wal/use-hyper-prefix' is nil."
  (let ((prefix (if (and wal/use-hyper-prefix
                         (or (daemonp) (display-graphic-p)))
                    "H-"
                  "C-c w ")))
    (concat prefix user-key)))
#+END_SRC

** Prefix Keys

*** Control

There are some non-standard control sequences. Anywhere:

+ =C->=/=C-<= expands/contracts region
+ =C-.= marks next like this allowing
  + =C-,= to delete last mark and
  + =C-/= to move it downward
+ =C-o= deletes (while =M-o= moves to) other windows
+ =C-?= redoes (as =C-/= undoes).

User-reserved combinations are used for certain command maps:

+ =C-c 8= for =kubernetes=
+ =C-c b= for =bookmark= and
+ =C-c k= for =kmacro.=

It's also used for certain dispatches:

+ =C-c a= for =org-agenda=
+ =C-c d= for =docker=.

*** Meta

Anywhere:

+ =M-.= acts on the current point with =embark= (or dwims when preceded by =C-=).

*** Hyper

Most hyper[fn:9] bindings are quick-access actions:

+ =H-h= finds file using =projectile=
+ =H-]= highlights the cursor using =beacon=
+ =H-i= switches perspective (when using =perspective=)
+ =H-<mouse3>= adds another =multiple-cursor= at point
+ =H-p= switches projects using =projectile=
+ =H-<return>= completes at point using =company= (in =company-mode=)
+ =H-<SPC>= jumps to directory with =dired=
+ =H-== to do a =quick-calc= (inserted if called with =C-u=)
+ =H-[= toggles pop-ups using =popper= (or runs a =hydra= if focusing a
  pop-up)
+ =H-\= toggles =vterm=
+ =H-u= switches buffer using =consult=
+ =H-y= expands snippets (in =yas-minor-mode=).

There's three =avy= actions:

+ =H-j= jumps to word of given char anywhere
+ =H-k= jumps to word in line (=H-K= takes code action in =lsp-mode=)
+ =H-l= jumps to line (=H-L= to code lens in =lsp-mode=).

It's also used for some dispatches:

+ =H-m= dispatches =magit-status=
+ =H-n= dispatches =rg-menu=
+ =H-o= dispatches =ace-window=.

**** Caps to Hyper

I re-bound my =<CAPS>= (caps-lock) key to =Hyper_L= to use the hyper
bindings above. Therefore, all following keys should be right hand
keys.

If you use Xorg Display Server, the risky quite[fn:10] way would be to
edit your =/usr/share/X11/xkb/symbols/pc= file like so:

#+BEGIN_SRC
...
// key <CAPS> {    [ Caps_Lock     ]   };
key <CAPS> {    [ Hyper_L       ]   };
...
// modifier_map Lock   { Caps_Lock };
modifier_map Mod3   { Hyper_L, Hyper_R };
...
// modifier_map Mod4   { <HYPR> };
modifier_map Mod3   { <HYPR> };
#+END_SRC

A safer alternative might be to create an =.xsession= file in your home
folder containing the following:

#+BEGIN_SRC sh :tangle no
xmodmap -e "keysym Caps_Lock = Hyper_L" \
		-e "remove Mod4 = Hyper_L" \
		-e "add Mod3 = Hyper_L"
#+END_SRC

This assumes that =Hyper_L= was assigned to modifier =Mod4= that's already
used by =Super_L= and modifier =Mod3= is an empty group. I haven't gotten
this safer alternative to work for me.

** Leader Keys

The are five =general= leader keys, each serving its unique purpose by
prefixing (groups of) actions by common context.

*** Prefixes

Leader key =general= (=,= by default) is responsible for Emacs actions
like loading a theme, finding a library, quitting, as well as opening
built-in programs like =eshell= and =eww=.

Leader key =colonel= (=;= by default) provides a flat layer of
additional editing or editing-adjacent actions.

Leader key =major= (=.= by default) is responsible major-mode-specific
actions.

Leader key =captain= (=/= by default) is responsible
minor-mode-specific[fn:11] actions. The package prefixes are:

+ =d= for =dap-mode=
+ =f= for =flycheck=
+ =i= for =perspective=
+ =l= for =lsp-mode=
+ =m= for =smerge=
+ =p= for =projectile=
+ =s= for =flyspell=
+ =t= for =treesitter=
+ =w= for =winner=
+ =y= for =yasnippet=
+ =z= for =org-roam=.

Leader key =lieutenant= (='= by default) is responsible non- or semi-mode
package actions with an editing emphasis. The package prefixes are:

+ =.= for =multiple-cursors=
+ =l= and =r= for =avy= (line and region)
+ =m= for =magit=
+ =p= for =smartparens=
+ =u= for =consult=
+ =x= for =crux=.

All leader keys have so-called sinks. The sinks for =major= and =captain=
toggle major and minor modes, respectively. The sink for =colonel=
currently holds variations of the default actions as well as hydras.
The sink for =lieutenant= is currently unused.

** Packages

*** general
:PROPERTIES:
:UNNUMBERED: t
:END:

#+BEGIN_SRC emacs-lisp
(defun wal/configure-general ()
  "Configure package `general'.

This creates all leader keys and sinks."
  (mapc (lambda (it)
          (let* ((key-sym (intern (format "%s-key" it)))
                 (key (wal/prefix-user-key (symbol-value key-sym)))
                 (sink (intern (format "%s-sink" it)))
                 (name (substring (symbol-name it) 4)))
            (eval-after-load 'which-key `(which-key-add-key-based-replacements ,key ,name))
            (eval `(general-create-definer ,it :prefix ,key))
            (eval `(wal/create-leader-sink ,sink :definer ,it :prefix ,key))))
        '(wal/general wal/colonel wal/major wal/captain wal/lieutenant)))

(use-package general
  :config
  (wal/configure-general)
  :demand)
#+END_SRC

*** hydra
:PROPERTIES:
:UNNUMBERED: t
:END:

Provides a context for related commands that can be (re-)executed in
quick succession.

Package =smartparens= also defines a =hydra=.

These hydras are mapped to the =colonel= sink using the following
prefixes:

+ =o= to resize window
+ =t= to scale text
+ =v= to scroll other window.

#+BEGIN_SRC emacs-lisp
(defconst wal/ascii-whale #("}< ,.__)" 0 8 (face mode-line-emphasis))
  "A small, highlighted ASCII whale.")

(defun wal/ascii-whale-hydra-offset (&optional padding)
  "Get a string offset for the `wal/ascii-whale'.
Additional left PADDING can be passed."
  (let ((padd (or padding 0)))
    (make-string (+ padd (length wal/ascii-whale)) ? )))

(use-package hydra
  :demand)

(with-no-warnings
  ;; Scaling text in buffer.
  (defhydra wal/text-scale (:hint nil)
    "
%s`wal/ascii-whale Text size: _i_ncrease or _d_ecrease.
"
    ("i" text-scale-increase)
    ("d" text-scale-decrease)
    ("r" wal/text-scale-reset "reset" :color blue)
    ("q" nil "quit"))

  ;; Move window splitter or balance windows.
  (defhydra wal/resize-window (:hint nil)
    "
%s(wal/ascii-whale-hydra-offset 25)^_p_^
%s`wal/ascii-whale Move window splitter: _b_   _f_.
%s(wal/ascii-whale-hydra-offset 25)^_n_^
"
    ("b" wal/edge-left)
    ("f" wal/edge-right)
    ("n" wal/edge-down)
    ("p" wal/edge-up)
    ("o" wal/split-window-the-other-way "re-split" :color blue)
    ("l" balance-windows "balance" :color blue)
    ("g" golden-ratio "golden" :color blue)
    ("q" nil "quit"))

  (defhydra wal/scroll-other-window (:hint nil)
    "
%s`wal/ascii-whale Scroll other window: u_p_/dow_n_.
"
    ("p" scroll-other-window-down)
    ("n" scroll-other-window)
    ("q" nil "quit")))

(wal/colonel-sink
  "o" '(wal/resize-window/body :wk "resize window")
  "t" '(wal/text-scale/body :wk "text scale")
  "v" '(wal/scroll-other-window/body :wk "scroll other window"))

(define-key emacs-lisp-mode-map (kbd "C-M-x") nil) ; Removes `eval-defun'.
#+END_SRC

*** transient
:PROPERTIES:
:UNNUMBERED: t
:END:

#+BEGIN_SRC emacs-lisp
(defun wal/configure-transient()
  "Define and bind all transients."
  (with-no-warnings
    (transient-define-prefix wal/config-dispatch ()
      "Facilitate the usage of or the working on Walheimat's config."
      [["Actions"
        ("t" "tangle" wal/tangle-config)
        ("c" "checkdoc" wal/checkdoc-packages)]
       ["Go to"
        ("h" "heading" consult-org-heading)
        ("d" "packages" wal/dired-packages)]
       ["Customization"
        ("g" "group" wal/customize-group)]])
    (define-key
     wal/config-mode-map
     (kbd (wal/prefix-user-key "?"))
     #'wal/config-dispatch)))

(use-package transient
  :config
  (wal/configure-transient))
#+END_SRC

** Extend =use-package=

We'll add keyword =:wal-bind= to =use-package= in order to create bindings
prefixed by =wal/prefix-user-key=.

#+BEGIN_SRC emacs-lisp
(defun wal/insert-use-package-keyword (keyword preceding)
  "Insert KEYWORD after PRECEDING keyword into `use-package-keywords'."
  (let* ((kw use-package-keywords)
         (remainder (nthcdr (cl-position preceding kw) kw)))
    (setcdr remainder (cons keyword (cdr remainder)))))

(defun use-package-normalize/:wal-bind (name keyword args)
  "This normalizer is a copy of the normalizer for `:bind'.

There are two differences:

1. It prefixes the key strings with `wal/prefix-user-key'.
2. On recursion it calls this normalizer."
  (let ((arg args)
        args*)
    (while arg
      (let ((x (car arg)))
        (cond
         ((and (consp x)
               (or (stringp (car x))
                   (vectorp (car x)))
               (or (use-package-recognize-function (cdr x) t #'stringp)))
          ;; This is where we deviate from the `:bind' normalizer.
          (setq args* (nconc args* (list (cons (wal/prefix-user-key (car x)) (cdr x)))))
          (setq arg (cdr arg)))
         ((or (and (eq x :map) (symbolp (cadr arg)))
              (and (eq x :prefix) (stringp (cadr arg)))
              (and (eq x :prefix-map) (symbolp (cadr arg)))
              (and (eq x :prefix-docstring) (stringp (cadr arg)))
              (eq x :filter)
              (and (eq x :menu-name) (stringp (cadr arg)))
              (and (eq x :package) (symbolp (cadr arg))))
          (setq args* (nconc args* (list x (cadr arg))))
          (setq arg (cddr arg)))
         ((listp x)
          (setq args*
                (nconc args* (use-package-normalize/:wal-bind name keyword x)))
          (setq arg (cdr arg)))
         (t
          (use-package-error
           (concat (symbol-name name)
                   " wants arguments acceptable to the `bind-keys' macro,"
                   " or a list of such values"))))))
    args*))

;; We can use the same handler as `:bind'.
(defalias 'use-package-handler/:wal-bind 'use-package-handler/:bind)

;; Make sure that functions are autoloaded.
(defalias 'use-package-autoloads/:wal-bind 'use-package-autoloads-mode)

(wal/insert-use-package-keyword :wal-bind :bind-keymap*)
#+END_SRC

** Additional (Un-)Bindings

Most bindings are declared in individual packages.

#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x C-c"))

;; Additional `general' bindings.
(wal/general
  "E" '(:ignore t :wk "Emacs")
  "Eq" '(save-buffers-kill-terminal :wk "quit")
  "f" '(:ignore t :wk "find")
  "fi" '(wal/find-init :wk "init")
  "fw" '(wal/find-config :wk "wal")
  "S" '(:ignore t :wk "session"))

(wal/general-sink "l" '(add-dir-local-variable :wk "dir-locals"))

(wal/colonel-sink "h" '(wal/kill-ring-save-whole-buffer :wk "kill-ring-save buffer"))

(wal/captain-sink "." '(walled-mode :wk "walled"))

(general-define-key
 :keymaps 'ctl-x-x-map
 "f" 'wal/find-file-delete-other-windows) ; Replaces `font-lock-update'.
#+END_SRC

** Additional Mode Controls

Turning on/off certain major modes switching between =major-mode= and
=fundamental-mode=.

#+BEGIN_SRC emacs-lisp
(defvar wal/before-fundamental-mode nil
  "The major mode before fundamental was engaged.")

(defun wal/fundamental-mode ()
  "Switch from `major-mode' to `fundamental-mode' and back."
  (interactive)
  (let ((m-mode major-mode))
    (if wal/before-fundamental-mode
        (progn
          (funcall wal/before-fundamental-mode)
          (setq wal/before-fundamental-mode nil))
      (fundamental-mode)
      (make-local-variable 'wal/before-fundamental-mode)
      (setq wal/before-fundamental-mode m-mode))))

;; Little EOF joke for ya.
(wal/major-sink
  "E" '(lisp-interaction-mode :wk "Elisp")
  "O" '(org-mode :wk "Org")
  "F" '(wal/fundamental-mode :wk "Fundamental"))
#+END_SRC

** Footer
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
(provide 'wal-key-bindings)

;;; wal-key-bindings.el ends here
#+END_SRC

* Additional Functions
:PROPERTIES:
:header-args:emacs-lisp: :tangle (expand-file-name "wal-func.el" wal/emacs-config-package-path)
:END:

** Header
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
;;; wal-func.el --- Additional functions.

;;; Commentary:
;;
;; Additional functions package.

;;; Code:

(declare-function use-package-report "use-package-core.el")
(declare-function wal/bytes-per-mb "wal-settings.el")
(declare-function wal/directory-files "init.el")
(declare-function wal/tangle-config "init.el")

(defvar use-package-compute-statistics)
(defvar wal/emacs-config-default-path)
(defvar wal/emacs-config-package-path)

(defgroup wal-func nil
  "Change values used in additional functions."
  :group 'wal
  :tag "Functions")
#+END_SRC

** Directories

Finding files should =mkdir -p= its parents.

#+BEGIN_SRC emacs-lisp
;; Creating parent dirs.
(defun wal/create-non-existent-directory ()
  "Ask whether to create non-existent directory.
If a file is found in a not (yet) existing directory, ask if it
should get created."
  (let ((parent-directory (file-name-directory buffer-file-name)))
    (when (and (not (file-exists-p parent-directory))
               (y-or-n-p (format "Create non-existing directory `%s'? " parent-directory)))
               (make-directory parent-directory t))))

(add-to-list 'find-file-not-found-functions #'wal/create-non-existent-directory)
#+END_SRC

** Buffers

*** Buffer Display

Utility functions to configure displaying buffers of a certain type.

#+BEGIN_SRC emacs-lisp
(defun wal/display-buffer-condition (buffer-or-mode)
  "Get a display buffer condition for BUFFER-OR-MODE."
  (pcase buffer-or-mode
    ((pred stringp) buffer-or-mode)
    ((pred symbolp) `(lambda (bufname _)
                       (with-current-buffer bufname
                         (equal major-mode ',buffer-or-mode))))
    (_ nil)))

(defun wal/display-buffer-in-pop-up (buffer &optional in-frame)
  "Display BUFFER in a pop-up.
The pop-up is a window unless IN-FRAME is t."
  (let ((condition (wal/display-buffer-condition buffer))
        (dispfun (if in-frame
                     'display-buffer-pop-up-frame
                   'display-buffer-pop-up-window)))
    (add-to-list 'display-buffer-alist
                 `(,condition
                   (,dispfun)))))

;; The next two functions make sense for `popper' buffers.

(cl-defun wal/display-buffer-in-side-window (buffer &key side loose no-other height)
  "Display BUFFER in SIDE window.

This window will be on SIDE (on the bottom by default), dedicated
to the buffer (unless LOOSE), available to `other-window' (unless
NO-OTHER) 20 (or HEIGHT) lines high and visible frames are
considered reusable."
  (let ((condition (wal/display-buffer-condition buffer)))
    (add-to-list 'display-buffer-alist
                 `(,condition
                   (display-buffer-reuse-window display-buffer-in-side-window)
                   (side . ,(or side 'bottom))
                   (dedicated . ,(not loose))
                   (reusable-frames . visible)
                   (window-height . ,(or height 10))
                   (window-parameters . ((no-other-window . ,no-other)))))))

(defun wal/display-buffer-in-direction (buffer &optional direction)
  "Display BUFFER in direction.
The direction is right-most or DIRECTION."
  (let ((condition (wal/display-buffer-condition buffer)))
    (add-to-list 'display-buffer-alist
                 `(,condition
                   (display-buffer-reuse-mode-window display-buffer-in-direction)
                   (direction . ,(or direction 'rightmost))))))

(defun wal/display-buffer-ethereally (buffer)
  "Display BUFFER ethereally.

This means there is no display function is used and the mode line
is removed."
  (let ((condition (wal/display-buffer-condition buffer)))
    (add-to-list 'display-buffer-alist
                 `(,condition
                   nil
                   (window-parameters (mode-line-format . none))))))
#+END_SRC

*** Editing

#+BEGIN_SRC emacs-lisp
(defun wal/kill-ring-save-whole-buffer ()
  "Call `kill-ring-save' on the entire buffer."
  (interactive)
  (kill-ring-save (point-min) (point-max)))
#+END_SRC

** Windows

I keep messing up, splitting vertically when I meant horizontally.
This is inspired by [[https://github.com/purcell/emacs.d/blob/master][purcell's config]].

#+BEGIN_SRC emacs-lisp
(defun wal/split-window-the-other-way ()
  "Split window the other way.
This means if horizontally split, split vertically; if vertically
split, split horizontally."
  (interactive)
  (let* ((other-buffer (and (next-window) (window-buffer (next-window))))
         (win (selected-window))
         (split-direction (cond ((or (windows-sharing-edge win 'above)
                                     (windows-sharing-edge win 'below))
                                 'vert)
                                ((or (windows-sharing-edge win 'right)
                                     (windows-sharing-edge win 'left))
                                 'hori)
                                (t nil))))
    (delete-other-windows)
    (pcase split-direction
      ('vert (split-window-horizontally))
      ('hori (split-window-vertically))
      (_ nil))
    (when other-buffer
      (set-window-buffer (next-window) other-buffer))))

(defun wal/edge (scale-above scale-below)
  "Move the window splitter using SCALE-ABOVE and SCALE-BELOW."
  (interactive)
  (let* ((win (selected-window))
         (direction (cond ((windows-sharing-edge win 'above) scale-above)
                          ((windows-sharing-edge win 'below) scale-below)
                          (t nil))))
    (pcase direction
      ('enlarge (wal/enlarge-window))
      ('shrink (wal/shrink-window))
      (_ (message "Selected window does not share a vertical edge with another window")))))

(defun wal/edge-horizontally (scale-left scale-right)
  "Move the window splitter using SCALE-LEFT and SCALE-RIGHT."
  (interactive)
  (let* ((win (selected-window))
         (direction (cond ((windows-sharing-edge win 'left) scale-left)
                          ((windows-sharing-edge win 'right) scale-right)
                          (t nil))))
    (pcase direction
      ('enlarge (wal/enlarge-window-horizontally))
      ('shrink (wal/shrink-window-horizontally))
      (_ (message "Selected window does not share a horizontal edge with another window")))))

(defun wal/edge-left ()
  "Move the splitter of the selected window left.
This shrinks or enlarges the window depending on its position."
  (interactive)
  (wal/edge-horizontally 'enlarge 'shrink))

(defun wal/edge-right ()
  "Move the splitter of the selected window right.
This shrinks or enlarges the window depending on its position."
  (interactive)
  (wal/edge-horizontally 'shrink 'enlarge))

(defun wal/edge-up ()
  "Move the splitter of the selected window up.
This shrinks or enlarges the window depending on its position."
  (interactive)
  (wal/edge 'enlarge 'shrink))

(defun wal/edge-down ()
  "Move the splitter of the selected window down.
This shrinks or enlarges the window depending on its position."
  (interactive)
  (wal/edge 'shrink 'enlarge))

(defun wal/shrink-window (&optional horizontally)
  "Shrink the selected window (HORIZONTALLY)."
  (interactive)
  (let* ((available (window-min-delta (selected-window) horizontally))
         (chunk (floor (* available 0.2))))
    (if horizontally
        (shrink-window-horizontally chunk)
      (shrink-window chunk))))

(defun wal/shrink-window-horizontally ()
  "Shrink the selected window horizontally."
  (interactive)
  (wal/shrink-window t))

(defun wal/enlarge-window (&optional horizontally)
  "Enlarge the selected window (HORIZONTALLY)."
  (interactive)
  (let* ((available (window-max-delta (selected-window) horizontally))
         (chunk (floor (* available 0.2))))
    (if horizontally
        (enlarge-window-horizontally chunk)
      (enlarge-window chunk))))

(defun wal/enlarge-window-horizontally ()
  "Enlarge the selected window horizontally."
  (interactive)
  (wal/enlarge-window t))
#+END_SRC

*** walled-mode
:PROPERTIES:
:UNNUMBERED: t
:END:

Minor mode to dedicate buffers to windows.

#+BEGIN_SRC emacs-lisp
(define-minor-mode walled-mode
  "Dedicate the window."
  :init-value nil
  :lighter " wld"
  (cond
   (noninteractive
    (setq walled-mode nil))
   (walled-mode
    (walled-mode--enable))
   (t
    (walled-mode--disable))))

(defun walled-mode--enable ()
  "Dedicate the window to the current buffer."
  (let ((window (selected-window))
        (bufname (current-buffer)))
    (set-window-dedicated-p window bufname)
    (message "Dedicating window to %s" bufname)))

(defun walled-mode--disable ()
  "Make window no longer dedicated to its buffer."
  (let* ((window (selected-window))
         (bufname (window-dedicated-p window)))
    (set-window-dedicated-p window nil)
    (message "Window no longer dedicated to %s" bufname)))
#+END_SRC

** Garbage Collection

Better(?) garbage collection.

#+BEGIN_SRC emacs-lisp
(defcustom wal/gc-cons-threshold-in-mb 100
  "The default `gc-cons-threshold' epxressed in MB."
  :type 'integer
  :group 'wal-func)

(defun wal/minibuffer-setup-hook ()
  "Increase `gc-cons-threshold' to maximum on minibuffer setup."
  (setq gc-cons-threshold most-positive-fixnum))

(defun wal/minibuffer-exit-hook ()
  "Decrease `gc-cons-threshold' on minibuffer exit."
  (setq gc-cons-threshold (wal/bytes-per-mb wal/gc-cons-threshold-in-mb)))

(add-hook 'minibuffer-setup-hook #'wal/minibuffer-setup-hook)
(add-hook 'minibuffer-exit-hook #'wal/minibuffer-exit-hook)
(add-hook 'emacs-startup-hook #'wal/minibuffer-exit-hook)
#+END_SRC

** Files

Handling of files.

#+BEGIN_SRC emacs-lisp
(defcustom wal/delete-trailing-whitespace t
  "Whether to delete trailing whitespace."
  :type 'boolean
  :group 'wal-func)

(defun wal/advise-hack-local-variables (&rest _r)
  "Advise to conditionally add before save hook.

When `wal/delete-trailing-whitespace' is t, trailing whitespace
is deleted."
  (when wal/delete-trailing-whitespace
    (add-hook 'before-save-hook #'delete-trailing-whitespace nil t)))

(advice-add
 'hack-local-variables
 :after #'wal/advise-hack-local-variables)

(defun wal/find-file-delete-other-windows (filename &optional wildcards)
  "Find FILENAME and make its window the only window.

If WILDCARDS is non-nil, FILENAME can include wildcards. All
matching files are visited but only the last-visited displayed."
  (interactive
   (find-file-read-args "Find file (deleting other windows): "
                        (confirm-nonexistent-file-or-buffer)))
  (let ((value (find-file-noselect filename nil nil nil)))
    (if (listp value)
        (progn
          (setq value (nreverse value))
          (switch-to-buffer (car value))
          (mapc 'switch-to-buffer (cdr value))
          value)
      (switch-to-buffer value)
      (delete-other-windows))))
#+END_SRC

** Command Line

Capture custom command line flags.

#+BEGIN_SRC emacs-lisp
(defconst wal/custom-flags
  '((compute-statistics . "--doctor"))
  "Alist of custom flags that can be passed to Emacs.")

(defun wal/capture-flag (flag)
  "Check for custom FLAG and delete it from the command line arguments."
  (when-let* ((flag (cdr (assoc flag wal/custom-flags)))
              (found (member flag command-line-args)))
    (setq command-line-args (delete flag command-line-args))
    t))

;; Compute `use-package' statistics if flag was set.
(when (wal/capture-flag 'compute-statistics)
  (setq use-package-compute-statistics t)
  (add-hook 'after-init-hook #'use-package-report))
#+END_SRC

** Text Scaling

Allow resetting =text-scale=.

#+BEGIN_SRC emacs-lisp
(defun wal/text-scale-reset ()
  "Reset `text-scale' level to 0."
  (interactive)
  (text-scale-set 0))
#+END_SRC

** Editing the Config

Minor mode for editing this config.

#+BEGIN_SRC emacs-lisp
(defvar wal/tangle-do-prompt t
  "Whether to prompt user to tangle config.")

(defvar wal/config-mode-map (make-sparse-keymap)
  "Map for `wal/config-mode'.")

(defconst wal/readme-config (expand-file-name "README.org" wal/emacs-config-default-path)
  "The path to Walheimat's config.")

(defun wal/describe-config-version ()
  "Describe the config's version.

This returns the tag and its annotation as propertized strings."
  (interactive)
  (let* ((default-directory wal/emacs-config-default-path)
         (vers (propertize
                (string-trim
                 (shell-command-to-string "git describe --abbrev=0"))
                'face 'bold))
         (cat (propertize
               (string-trim
                (shell-command-to-string (format "git cat-file tag %s" vers)))
               'face 'italic))
         (out (concat vers ": " (car (last (string-lines cat))))))
    (cond
     (noninteractive out)
     (t (message out)))))

(defun wal/tangle-config-prompt ()
  "Prompt the user to tangle the config.
If the answer is no, there will be no additional prompt."
  (interactive)
  (let ((help-form (message "This will update your packages. Restart Emacs afterwards.")))
    (if (and wal/tangle-do-prompt (y-or-n-p "Config changed, want to tangle? "))
        (wal/tangle-config)
      (if wal/tangle-do-prompt
          (progn
            (setq-local wal/tangle-do-prompt nil)
            (message "To tangle, call `wal/tangle-config'"))
        (message "Config changed. To tangle, call `wal/tangle-config'")))))

(defun wal/find-config ()
  "Find Walheimat's config.

This will activate minor mode `wal/config-mode'."
  (interactive)
  (let ((buf (find-file-noselect wal/readme-config)))
    (with-current-buffer buf
      (wal/config-mode +1))
    (switch-to-buffer buf)))

(defun wal/find-init ()
  "Find and switch to the `user-init-file'."
  (interactive)
  (switch-to-buffer (find-file-noselect user-init-file)))

(defun wal/customize-group ()
  "Customize `wal' group."
  (interactive)
  (customize-group 'wal t))

(defun wal/dired-packages ()
  "Open the packages with Dired."
  (interactive)
  (pop-to-buffer-same-window
    (dired-noselect wal/emacs-config-package-path)))

(defun wal/checkdoc-packages ()
  "Run `checkdoc-file' on all package files."
  (interactive)
  (let ((projectile-enable-caching nil))
    (dolist (it (wal/directory-files wal/emacs-config-package-path))
      (checkdoc-file it))))

(define-minor-mode wal/config-mode
  "Mode for editing Walheimat's config."
  :init-value nil
  :global nil
  :lighter " wal"
  :keymap wal/config-mode-map
  (require 'transient nil t)
  (require 'checkdoc nil t)
  (add-hook 'after-revert-hook #'wal/tangle-config-prompt nil t)
  (auto-fill-mode))
#+END_SRC

** Utility

Some more utility functions.

#+BEGIN_SRC emacs-lisp
(defun wal/biased-random (limit &optional bias-low throws)
  "Return a biased random number using LIMIT.

The bias is the high end unless BIAS-LOW is passed. The number of
throws are 3 or THROWS."
  (let ((results (list))
        (throws (or throws 3)))
    (dotimes (i throws)
      (add-to-list 'results (random limit)))
    (if bias-low
        (seq-min results)
      (seq-max results))))
#+END_SRC

** Footer
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
(provide 'wal-func)

;;; wal-func.el ends here
#+END_SRC

* Look
:PROPERTIES:
:header-args:emacs-lisp: :tangle (expand-file-name "wal-look.el" wal/emacs-config-package-path)
:END:

Make frame transparent and set themes. [[https://peach-melpa.org/][PeachMelpa]] has more themes.

#+BEGIN_SRC emacs-lisp
;;; wal-look.el --- Look.

;;; Commentary:
;;
;; Provide packages for the look of the config.

;;; Code:

(defvar wal/experimental)

(defgroup wal-look nil
  "Change the look."
  :group 'wal
  :tag "Look")

(defcustom wal/transparency 90
  "The default frame transparency."
  :type 'integer
  :group 'wal-look)

(defcustom wal/theme nil
  "The theme."
  :type '(choice symbol (const nil))
  :group 'wal-look)

(defun wal/transparency (&optional value)
  "Set the transparency of the frame to VALUE.
1 being (almost) completely transparent, 100 being opaque."
  (interactive "nSet transparency (1-100): ")
  (let ((transparency (min (max (or value wal/transparency) 1) 100))
        (alpha-default (assoc 'alpha default-frame-alist))
        (alpha-background-default (assoc 'alpha-background default-frame-alist)))
    (if wal/experimental
        (progn
          (set-frame-parameter (selected-frame) 'alpha-background transparency)
          (when alpha-background-default
            (setcdr alpha-background-default transparency)))
      (set-frame-parameter (selected-frame) 'alpha transparency)
      (when alpha-default
        (setcdr alpha-default transparency)))))

;; Some themes require configuration, so we only load after initialization.
(defun wal/setup-visuals ()
  "Setup visual frills like theme and transparency."
  (interactive)
  (when wal/theme
    (load-theme wal/theme t))
  (wal/transparency)
  ;; Add the transparency to the `default-frame-alist' as well.
  (if wal/experimental
      (add-to-list 'default-frame-alist `(alpha-background . ,wal/transparency))
    (add-to-list 'default-frame-alist `(alpha . ,wal/transparency))))

(if (daemonp)
    (add-hook 'server-after-make-frame-hook 'wal/setup-visuals)
  (add-hook 'emacs-startup-hook 'wal/setup-visuals))

;; Mix of old and new.
(setq frame-title-format '(multiple-frames "%b"
                                           ("%b@" system-name)))

(provide 'wal-look)

;;; wal-look.el ends here
#+END_SRC

* Fonts
:PROPERTIES:
:header-args:emacs-lisp: :tangle (expand-file-name "wal-fonts.el" wal/emacs-config-package-path)
:END:

Set fonts (with preference). To get support for ligatures, install the
symbol font from [[https://github.com/tonsky/FiraCode/files/412440/FiraCode-Regular-Symbol.zip][here]].

#+BEGIN_SRC emacs-lisp
;;; wal-fonts.el --- Fonts.

;;; Commentary:
;;
;; Provide font setup and configuration.

;;; Code:

(declare-function doom-modeline-refresh-font-width-cache "doom-modeline.el")
(declare-function wal/general "wal-key-bindings.el")

(defgroup wal-fonts nil
  "Change fonts and font sizes."
  :group 'wal
  :tag "Fonts")

(defcustom wal/fixed-fonts
  '("JetBrains Mono"
    "Iosevka"
    "Fira Code"
    "Hasklig"
    "Input Mono"
    "mononoki"
    "Source Code Pro"
    "DejaVu Sans Mono"
    "Monoid" ; The calt version doesn't work properly.
    "Liberation Mono")
  "Fixed fonts ordered by preference."
  :type '(repeat string)
  :group 'wal-fonts)

(defcustom wal/variable-fonts
  '("Roboto"
    "Ubuntu"
    "Liberation Serif"
    "DeJa Vu Sans"
    "Lato"
    "Quicksand"
    "San Francisco"
    "Arial")
  "Variable fonts ordered by preference."
  :type '(repeat string)
  :group 'wal-fonts)

(defcustom wal/preferred-fonts nil
  "List of (fixed and variable width) font names that should be preferred."
  :type '(choice (repeat string) (const nil))
  :group 'wal-fonts)

(defcustom wal/fixed-font-height 120
  "The font height for fixed fonts.
The default value is 98."
  :type 'integer
  :group 'wal-fonts)

(defcustom wal/variable-font-height 140
  "The font height for variable fonts.
This has no default value."
  :type 'integer
  :group 'wal-fonts)

(defun wal/select-fixed-font (font)
  "Select fixed (available) FONT.

This sets both the `default' and `fixed-pitch' fonts. If variable
`doom-modeline-mode' is t, refresh font width cache."
  (interactive
   (list (completing-read "Select font: " (wal/available-fonts wal/fixed-fonts))))
  (set-face-attribute 'default nil :font font)
  (set-face-attribute 'fixed-pitch nil :font font)
  (when (and (boundp 'doom-modeline-mode) doom-modeline-mode)
    (run-with-idle-timer 0.2 nil #'doom-modeline-refresh-font-width-cache)))

(defun wal/select-variable-font (font)
  "Select variable (available) FONT."
  (interactive
   (list (completing-read "Select font: " (wal/available-fonts wal/variable-fonts))))
  (set-face-attribute 'variable-pitch nil :font font))

(defun wal/available-fonts (fonts)
  "Filter FONTS down to available fonts."
  (seq-filter (lambda (it) (find-font (font-spec :name it))) fonts))

(defun wal/preferred-fonts (fonts)
  "Filter FONTS down to preferred fonts."
  (seq-filter (lambda (it) (member it wal/preferred-fonts)) fonts))

(defun wal/fonts-candidate (fonts &optional prefer)
  "Return the first available font from a list of FONTS.
If PREFER is true, variable `wal/preferred-fonts' is not nil and
preferred fonts are available, return the first of those
instead."
  (let* ((available-fonts (wal/available-fonts fonts))
         (preferred (and prefer (wal/preferred-fonts available-fonts))))
    (if preferred
        (car preferred)
      (car available-fonts))))

(defun wal/setup-fonts ()
  "Setup fonts for GUI Emacs.

This sets `default' and `fixed-pitch' fonts to the first
available candidate from `wal/fixed-fonts'. Does the same for
`variable-pitch' using `wal/variable-fonts'."
  (when (or (daemonp) (display-graphic-p))
    (mapc (lambda (it)
            (when (internal-lisp-face-p it)
              (set-face-attribute it nil
                                  :font (wal/fonts-candidate wal/fixed-fonts t)
                                  :height wal/fixed-font-height)))
          '(default fixed-pitch))
    (mapc (lambda (it)
            (when (internal-lisp-face-p it)
              (set-face-attribute it nil :inherit 'mode-line)))
          '(mode-line-active mode-line-inactive))
    ;; Variable pitch face.
    (set-face-attribute 'variable-pitch nil
                        :font (wal/fonts-candidate wal/variable-fonts t)
                        :height wal/variable-font-height)))

;; I want my comments slanted and my keywords bold.
(defun wal/font-lock ()
  "Set comment face to italic and keyword face to bold."
  ;; Slanted and enchanted.
  (set-face-attribute 'font-lock-comment-face nil :slant 'italic :weight 'normal)
  (set-face-attribute 'font-lock-keyword-face nil :weight 'bold))

(wal/general
 "Sf" '(:ignore t :wk "fonts")
 "Sff" '(wal/select-fixed-font :wk "fixed")
 "Sfv" '(wal/select-variable-font :wk "variable"))

(if (daemonp)
    (add-hook 'server-after-make-frame-hook 'wal/setup-fonts)
  (add-hook 'emacs-startup-hook 'wal/setup-fonts))

(add-hook 'font-lock-mode-hook 'wal/font-lock)

(provide 'wal-fonts)

;;; wal-fonts.el ends here
#+END_SRC

* Emacs
:PROPERTIES:
:header-args:emacs-lisp: :tangle (expand-file-name "wal-emacs.el" wal/emacs-config-package-path)
:END:

Everything that has to do with Emacs-y stuff.

This is a combination of configurations for built-in packages[fn:12]
and some external ones.

** Header
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
;;; wal-emacs.el --- Emacs.

;;; Commentary:
;;
;; Provide Emacs settings/configurations.

;;; Code:

(declare-function wal/display-buffer-in-side-window "wal-func.el")
(declare-function wal/display-buffer-in-direction "wal-func.el")

(defvar wal/experimental)
#+END_SRC

** Improved Editing

*** simple
:PROPERTIES:
:UNNUMBERED: t
:END:

Up the kill count.

#+BEGIN_SRC emacs-lisp
(use-package simple
  :custom
  (save-interprogram-paste-before-kill t)
  (mark-ring-max 32)
  (global-mark-ring-max 32)
  :bind
  ("C-?" . undo-redo)
  :general
  (wal/general "fp" '(list-processes :wk "processes"))
  (wal/colonel-sink :keymaps '(prog-mode-map yaml-mode-map)
    "w" '(delete-trailing-whitespace :wk "delete trailing whitespace"))
  (wal/captain-sink "a" '(auto-fill-mode :wk "auto-fill"))
  :ensure nil)
#+END_SRC

*** paren
:PROPERTIES:
:UNNUMBERED: t
:END:

Show 'em early!

#+BEGIN_SRC emacs-lisp
(use-package paren
  :custom
  (show-paren-delay 0.1)
  (show-paren-context-when-offscreen t) ; New in Emacs 29!
  :ensure nil)
#+END_SRC

Sometimes I need to see whitespace chars.

*** whitespace
:PROPERTIES:
:UNNUMBERED: t
:END:

#+BEGIN_SRC emacs-lisp
(defun wal/whitespace-mode ()
  "Hook into command `whitespace-mode'."
  (highlight-indent-guides-mode -1))

(use-package whitespace
  :general
  (wal/captain-sink "w" '(whitespace-mode :wk "whitespace"))
  :hook (whitespace-mode . wal/whitespace-mode)
  :ensure nil)
#+END_SRC

*** kmacro
:PROPERTIES:
:UNNUMBERED: t
:END:

Use better commands for macros.

#+BEGIN_SRC emacs-lisp
(use-package kmacro
  :bind-keymap
  ("C-c k" . kmacro-keymap)
  :bind
  (:map kmacro-keymap
   ("k" . kmacro-start-macro-or-insert-counter)
   ("j" . kmacro-end-or-call-macro))
  :ensure nil)
#+END_SRC

*** so-long
:PROPERTIES:
:UNNUMBERED: t
:END:

Some files are so long and Emacs will want to throw up.

#+BEGIN_SRC emacs-lisp
(use-package so-long
  :config
  (global-so-long-mode t)
  :custom
  (so-long-action 'so-long-minor-mode)
  :defer 4
  :ensure nil)
#+END_SRC

*** mouse
:PROPERTIES:
:UNNUMBERED: t
:END:

Mouse yanks at point.

#+BEGIN_SRC emacs-lisp
(use-package mouse
  :custom
  (mouse-yank-at-point t)
  :ensure nil)
#+END_SRC

*** text-mode
:PROPERTIES:
:UNNUMBERED: t
:END:

No double spaces in sentences.

#+BEGIN_SRC emacs-lisp
(defun wal/text-mode ()
  "Hook into `text-mode'."
  ;; Activate `flyspell-mode' when editing commit messages.
  (when (string-match "COMMIT_EDITMSG" (buffer-name))
    (flyspell-mode)))

(use-package text-mode
  :custom
  (sentence-end-double-space nil)
  :hook (text-mode . wal/text-mode)
  :ensure nil)
#+END_SRC

*** server
:PROPERTIES:
:UNNUMBERED: t
:END:

Editing server files.

#+BEGIN_SRC emacs-lisp
(use-package server
  :bind
  (:map ctl-x-x-map
   ("#" . server-edit-abort))
  :ensure nil)
#+END_SRC

*** abbrev
:PROPERTIES:
:UNNUMBERED: t
:END:

Automatic quick expansion.

#+BEGIN_SRC emacs-lisp
(use-package abbrev
  :config
  (setq save-abbrevs nil)
  (define-abbrev-table 'elixir-mode-abbrev-table '(
    ("p" "|>")))
  :hook ((elixir-mode) . abbrev-mode)
  :ensure nil
  :delight " abb")
#+END_SRC

*** follow-mode
:PROPERTIES:
:UNNUMBERED: t
:END:

Follow me around.

#+begin_src emacs-lisp
(use-package follow-mode
  :custom
  (follow-mode-line-test " flw")
  :general
  (wal/captain-sink
    "o" '(follow-mode :wk "follow"))
  :ensure nil)
#+end_src

** Dealing With Packages

*** package
:PROPERTIES:
:UNNUMBERED: t
:END:

Bind some functions to refresh, install and delete packages.

#+BEGIN_SRC emacs-lisp
(use-package package
  :custom
  (package-native-compile t)
  :general
  (wal/general
    "P" '(:ignore t :wk "package")
    "Pf" '(package-refresh-contents :wk "refresh")
    "Pi" '(package-install :wk "install")
    "Pl" '(list-packages :wk "list")
    "Pr" '(package-reinstall :wk "re-install")
    "Pd" '(package-delete :wk "delete"))
  :ensure nil)
#+END_SRC

*** comp
:PROPERTIES:
:UNNUMBERED: t
:END:

Silent native compilation.

#+BEGIN_SRC emacs-lisp
(use-package comp
  :custom
  (native-comp-async-report-warnings-errors 'silent)
  :ensure nil)
#+END_SRC

** Dealing With Emacs

Allow restoring window configurations when Emacs decided they should
be gone.

*** winner
:PROPERTIES:
:UNNUMBERED: t
:END:

#+BEGIN_SRC emacs-lisp
(use-package winner
  :config
  (defhydra wal/winner (:hint nil)
    "
%s`wal/ascii-whale Window layout: _u_ndo or _r_edo.
"
    ("u" winner-undo)
    ("r" winner-redo)
    ("q" nil "quit"))
  (winner-mode +1)
  :custom
  (winner-dont-bind-my-keys t)
  :general
  (wal/captain
    "w" '(wal/winner/body :wk "winner"))
  :defer 3
  :ensure nil)
#+END_SRC

*** async
:PROPERTIES:
:UNNUMBERED: t
:END:

Execute IO actions asynchronously.

#+BEGIN_SRC emacs-lisp
(use-package async
  :config
  (dired-async-mode 1)
  :defer 4
  :after dired
  :diminish 'dired-async-mode)
#+END_SRC

** Help

*** help-mode
:PROPERTIES:
:UNNUMBERED: t
:END:

Emacs is mostly about looking up its documentation.

#+BEGIN_SRC emacs-lisp
(use-package help-mode
  :config
  (wal/display-buffer-in-direction 'help-mode)
  :ensure nil)
#+END_SRC

*** short-doc
:PROPERTIES:
:UNNUMBERED: t
:END:

There's also =short-doc= now.

#+BEGIN_SRC emacs-lisp
(use-package shortdoc
  :config
  (wal/display-buffer-in-direction 'shortdoc-mode)
  :ensure nil)
#+END_SRC

*** debug
:PROPERTIES:
:UNNUMBERED: t
:END:

For internal debugging.

#+BEGIN_SRC emacs-lisp
(use-package debug
  :config
  (wal/display-buffer-in-side-window 'debug-mode)
  :custom
  (debugger-bury-or-kill 'kill)
  :ensure nil)
#+END_SRC

*** novice
:PROPERTIES:
:UNNUMBERED: t
:END:

Don't disable commands.

#+BEGIN_SRC emacs-lisp
(use-package novice
  :init
  (setq disabled-command-function nil)
  :ensure nil)
#+END_SRC

*** find-func
:PROPERTIES:
:UNNUMBERED: t
:END:

Find libraries.

#+BEGIN_SRC emacs-lisp
(use-package find-func
  :general
  (wal/general "fl" '(find-library :wk "library"))
  :ensure nil)
#+END_SRC

*** helpful
:PROPERTIES:
:UNNUMBERED: t
:END:

Let's try to be even more =helpful=.

#+BEGIN_SRC emacs-lisp
(defun wal/advise-helpful--autoloaded-p (sym buf)
  "Advise function to call `help-fns--autloaded-p' with SYM only.

BUF is only used to display the file name."
  (with-no-warnings
   (-when-let (file-name (buffer-file-name buf))
     (setq file-name (s-chop-suffix ".gz" file-name))
     (help-fns--autoloaded-p sym))))

(defun wal/configure-helpful ()
  "Configure package `helpful'."
  (wal/display-buffer-in-direction 'helpful-mode)
  (when wal/experimental
    (defvar read-symbol-positions-list nil)
    (advice-add
      'helpful--autoloaded-p
      :override #' wal/advise-helpful--autoloaded-p)))

(use-package helpful
  :config
  (wal/configure-helpful)
  :bind
  (([remap describe-command] . helpful-command)
   ([remap describe-function] . helpful-function)
   ([remap describe-key] . helpful-key)
   ([remap describe-variable] . helpful-variable)
   ([remap describe-symbol] . helpful-symbol)
   :map help-map
   ("M" . helpful-macro))
  :general
  (wal/major
    :keymaps '(emacs-lisp-mode-map lisp-interaction-mode-map)
    :major-modes t
    "H" '(:ignore t :wk "help")
    "H."  '(helpful-at-point :wk "helpful at point")))
#+END_SRC

** Look-Up

*** bookmark
:PROPERTIES:
:UNNUMBERED: t
:END:

Leave a bookmark why don't you.

#+BEGIN_SRC emacs-lisp
(use-package bookmark
  :config
  (wal/display-buffer-in-side-window "\\*Bookmark Annotation\\*" :side 'left)
  :custom
  (bookmark-use-annotations t)
  (bookmark-menu-confirm-deletion t)
  :bind-keymap ("C-c b" . bookmark-map)
  :bind
  (:map bookmark-map
   ("l" . bookmark-bmenu-list)
   ("L" . bookmark-load))
  :ensure nil)
#+END_SRC

*** calc
:PROPERTIES:
:UNNUMBERED: t
:END:

Quick calculations.

#+BEGIN_SRC emacs-lisp
(use-package calc
  :wal-bind
  ("=" . quick-calc)
  :ensure nil)
#+END_SRC

*** eww
:PROPERTIES:
:UNNUMBERED: t
:END:

Browse web in Emacs. This requires Emacs to have been compiled with
=--with-xml2= flag.

#+BEGIN_SRC emacs-lisp
(use-package eww
  :general
  (wal/general-sink "b" '(eww :wk "eww"))
  :ensure nil)
#+END_SRC

*** dictionary
:PROPERTIES:
:UNNUMBERED: t
:END:

Look up words in a word book.

#+BEGIN_SRC emacs-lisp
(use-package dictionary
  :config
  (wal/display-buffer-in-direction "^\\*Dictionary")
  :custom
  (dictionary-server "dict.org")
  :general
  (wal/general-sink
    "d" '(dictionary-lookup-definition :wk "lookup definition"))
  :ensure nil)
#+END_SRC

** Additional Info Display

*** eldoc
:PROPERTIES:
:UNNUMBERED: t
:END:

Contextual information. Package =lsp-mode= use =eldoc= extensively.

#+BEGIN_SRC emacs-lisp
(use-package eldoc
  :custom
  (eldoc-idle-delay 2.0)
  (eldoc-echo-area-use-multiline-p nil)
  (eldoc-echo-area-prefer-doc-buffer t)
  (eldoc-echo-area-display-truncation-message nil)
  :ensure nil
  :delight " eld")
#+END_SRC

*** linum
:PROPERTIES:
:UNNUMBERED: t
:END:

Sometimes you do want to see the line numbers.

#+BEGIN_SRC emacs-lisp
(use-package linum
  :general
  (wal/captain-sink "n" '(linum-mode :wk "linum"))
  :ensure nil)
#+END_SRC

*** hl-line
:PROPERTIES:
:UNNUMBERED: t
:END:

Highlighting the current line.

#+BEGIN_SRC emacs-lisp
(use-package hl-line
  :hook
  ((tablist-minor-mode
    tabulated-list-mode
    dired-mode
    dashboard-mode) . hl-line-mode)
  :ensure nil)
#+END_SRC

*** time
:PROPERTIES:
:UNNUMBERED: t
:END:

What time is it?

#+BEGIN_SRC emacs-lisp
(use-package time
  :custom
  (display-time-format " %H:%M")
  (display-time-default-load-average nil)
  :ensure nil)
#+END_SRC

** Other

*** restart-emacs
:PROPERTIES:
:UNNUMBERED: t
:END:

Sometimes I restart for fun.

#+BEGIN_SRC emacs-lisp
(use-package restart-emacs
  :if (not (daemonp))
  :custom
  (restart-emacs-restore-frames nil)
  :general
  (wal/general "Er" '(restart-emacs :wk "restart")))
#+END_SRC

** Footer
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
(provide 'wal-emacs)

;;; wal-emacs.el ends here
#+END_SRC

* Editing
:PROPERTIES:
:header-args:emacs-lisp: :tangle (expand-file-name "wal-edit.el" wal/emacs-config-package-path)
:END:

It's fun to edit things /quickly/.

** Header
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
;;; wal-edit.el --- Editing.

;;; Commentary:
;;
;; Provide editing packages.

;;; Code:

(declare-function crux-get-positions-of-line-or-region "crux.el")
(declare-function sp-backward-sexp "smartparens.el")
(declare-function sp-backward-up-sexp "smartparens.el")
(declare-function sp-down-sexp "smartparens.el")
(declare-function sp-forward-sexp "smartparens.el")
(declare-function sp-local-pair "smartparens.el")
(declare-function sp-splice-sexp "smartparens.el")
(declare-function sp-with-modes "smartparens.el")
(declare-function sp--maybe-init "smartparens.el")
(declare-function yas-expand "yasnippet.el")

(defvar sp-lisp-modes)
#+END_SRC

** Packages

*** multiple-cursors
:PROPERTIES:
:UNNUMBERED: t
:END:

Don't you want to edit your buffer in multiple places at once?

#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :init
  ;; Since the map is `nil', using `:bind' would fail.
  (setq mc/keymap (make-sparse-keymap))
  :custom
  (mc/always-run-for-all t)
  :bind
  (("C-." . mc/mark-next-like-this)
   :map mc/keymap
   ;; We keep the first two bindings from the default map.
   ("C-g" . mc/keyboard-quit)
   ("C-'" . mc-hide-unmatched-lines-mode)
   ("C-," . mc/unmark-next-like-this)
   ("C-/" . mc/skip-to-next-like-this))
  :wal-bind
  ("<mouse-3>" . mc/add-cursor-on-click)
  :general
  (wal/lieutenant
    "." '(:ignore t :wk "mc")
    ".a" '(mc/mark-all-like-this :wk "all like this")
    ".b" '(mc/edit-beginnings-of-lines :wk "beginnings (region)")
    ".e" '(mc/edit-ends-of-lines :wk "ends (region)")))
#+END_SRC

*** expand-region
:PROPERTIES:
:UNNUMBERED: t
:END:

One thing that can be a bit tricky is selecting regions, not anymore.

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :bind
  (("C->" . er/expand-region)
   ("C-<" . er/contract-region)))
#+END_SRC

*** yasnippet
:PROPERTIES:
:UNNUMBERED: t
:END:

Use snippets in =prog= mode buffers.

#+BEGIN_SRC emacs-lisp
(defun wal/yas-expand ()
  "Call `yas-expand' in a `org-mode'-safe way.

Makes sure that indentation variables don't produce unexpected
results."
  (interactive)
  (let ((org-src-tab-acts-natively nil)
        (org-adapt-indentation nil))
    (yas-expand)))

(use-package yasnippet
  :config
  (define-key yas-minor-mode-map (kbd "<tab>") nil)
  (define-key yas-minor-mode-map (kbd "TAB") nil)
  (yas-reload-all)
  :wal-bind
  (:map yas-minor-mode-map
   ("y" . #'wal/yas-expand))
  :general
  (wal/captain :keymaps 'yas-minor-mode-map
    "y" '(:ignore t :wk "yasnippet")
    "yv" '(yas-visit-snippet-file :wk "visit snippet file")
    "yn" '(yas-new-snippet :wk "create new snippet"))
  (wal/captain-sink "y" '(yas-minor-mode :wk "yasnippet"))
  :hook ((prog-mode org-mode) . yas-minor-mode)
  :delight " yas")

(use-package yasnippet-snippets
  :demand
  :after yasnippet)
#+END_SRC

*** drag-stuff
:PROPERTIES:
:UNNUMBERED: t
:END:

Drag lines and regions around.

#+BEGIN_SRC emacs-lisp
(use-package drag-stuff
  :config
  (when wal/use-hyper-prefix
    (setq drag-stuff-modifier 'hyper))
  (drag-stuff-define-keys)
  :general
  (wal/captain-sink "k" '(drag-stuff-mode :wk "drag-stuff"))
  :hook (prog-mode . drag-stuff-mode)
  :delight " drg")
#+END_SRC

*** smartparens
:PROPERTIES:
:UNNUMBERED: t
:END:

I didn't have smart parens growing up so I need help.

#+BEGIN_SRC emacs-lisp
(defun wal/configure-smartparens ()
  "Configure `smartparens'."
  (add-to-list 'sp-lisp-modes 'lisp-data-mode)
  (sp-with-modes
   sp-lisp-modes
   (sp-local-pair "'" nil :actions nil))
  ;; Create a `hydra' for pair navigation/editing.
  (defhydra wal/smartparens (:hint nil)
    "
%s(wal/ascii-whale-hydra-offset 7)^_p_^
%s`wal/ascii-whale Use _b_   _f_ to navigate pairs.
%s(wal/ascii-whale-hydra-offset 7)^_n_^
"
    ("b" sp-backward-sexp)
    ("f" sp-forward-sexp)
    ("p" sp-backward-up-sexp)
    ("n" sp-down-sexp)
    ("q" nil "quit")))

(defun wal/sp-rewrap-sexp ()
  "Call `sp--maybe-init' before `sp-rewrap-sexp'.

Advising the function does not work."
  (interactive)
  (unless (boundp 'smartparens)
    (require 'smartparens nil t))
  (with-current-buffer (current-buffer)
    (sp--maybe-init))
  (call-interactively 'sp-rewrap-sexp))

(use-package smartparens
  :config
  (wal/configure-smartparens)
  :general
  (wal/lieutenant :keymaps 'prog-mode-map
    "p" '(:ignore t :wk "smartparens")
    "ph" '(wal/smartparens/body :wk "hydra")
    "pw" '(wal/sp-rewrap-sexp :wk "rewrap")
    "ps" '(sp-splice-sexp :wk "splice")))
#+END_SRC

*** crux
:PROPERTIES:
:UNNUMBERED: t
:END:

Let's use =crux= for some editing magic.

#+BEGIN_SRC emacs-lisp
;; FIXME: Adding these as recent commit broke these.

(defun wal/crux-duplicate-current-line-or-region (arg)
  "Duplicates the current line or region ARG times.
If there's no region, the current line will be duplicated.  However, if
there's a region, all lines that region covers will be duplicated."
  (interactive "p")
  (pcase-let* ((origin (point))
               (`(,beg . ,end) (crux-get-positions-of-line-or-region))
               (region (buffer-substring-no-properties beg end)))
    (dotimes (_i arg)
      (goto-char end)
      (newline)
      (insert region)
      (setq end (point)))
    (goto-char (+ origin (* (length region) arg) arg))))

(defun wal/crux-duplicate-and-comment-current-line-or-region (arg)
  "Duplicates and comments the current line or region ARG times.
If there's no region, the current line will be duplicated.  However, if
there's a region, all lines that region covers will be duplicated."
  (interactive "p")
  (pcase-let* ((origin (point))
               (`(,beg . ,end) (crux-get-positions-of-line-or-region))
               (region (buffer-substring-no-properties beg end)))
    (comment-or-uncomment-region beg end)
    (setq end (line-end-position))
    (dotimes (_ arg)
      (goto-char end)
      (newline)
      (insert region)
      (setq end (point)))
    (goto-char (+ origin (* (length region) arg) arg))))

(use-package crux
  :config
  (advice-add
   'crux-duplicate-current-line-or-region
   :override #'wal/crux-duplicate-current-line-or-region)
  (advice-add
   'crux-duplicate-and-comment-current-line-or-region
   :override #'wal/crux-duplicate-and-comment-current-line-or-region)
  :bind
  (("C-k" . crux-smart-kill-line)
   ("M-k" . crux-kill-line-backwards) ; Overrides `kill-sentence'.
   ("C-o" . delete-other-windows) ; Overrides `open-line'.
   ("M-o" . crux-other-window-or-switch-buffer))
  :general
  (wal/general
    "fs" '(crux-find-shell-init-file :wk "shell init")
    "fc" '(crux-find-user-custom-file :wk "custom file"))
  (wal/colonel
    "d" '(crux-duplicate-current-line-or-region :wk "duplicate"))
  (wal/colonel :keymaps '(prog-mode-map yaml-mode-map)
    "l" '(crux-smart-open-line :wk "open line"))
  (wal/colonel-sink :keymaps '(prog-mode-map yaml-mode-map)
    "d" '(crux-duplicate-and-comment-current-line-or-region :wk "duplicate and comment")
    "l" '(crux-smart-open-line-above :wk "open line above"))
  (wal/lieutenant
    "x" '(:ignore t :wk "crux")
    "xk" '(crux-kill-other-buffers :wk "kill other buffers")
    "xd" '(crux-delete-buffer-and-file :wk "delete buffer and file")
    "xr" '(crux-rename-file-and-buffer :wk "rename file and buffer")
    "xs" '(crux-sudo-edit :wk "sudo edit"))
  :commands (crux-get-positions-of-line-or-region))
#+END_SRC

*** undo-tree
:PROPERTIES:
:UNNUMBERED: t
:END:

Undo and redo with branching.

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :custom
  (undo-tree-mode-lighter " udt")
  :general
  (wal/captain-sink
    "u" '(undo-tree-mode :wk "undo tree"))
  (wal/captain :keymaps 'undo-tree-map
    "u" '(undo-tree-visualize :wk "undo tree"))
  :hook ((org-mode prog-mode) . undo-tree-mode)
  :delight
  (undo-tree-visualizer-selection-mode " uds"))
#+END_SRC

*** elec-pair
:PROPERTIES:
:UNNUMBERED: t
:END:

Less intrusive pairing mode than =smartparens=.

#+BEGIN_SRC emacs-lisp
(defun wal/advise-electric-pair-default-inhibit (&rest _r)
  "Advise to inhibit if `multiple-cursors-mode' is t."
  (when (boundp 'multiple-cursors-mode)
    multiple-cursors-mode))

(use-package elec-pair
  :init
  (advice-add
   'electric-pair-default-inhibit
   :before-until #'wal/advise-electric-pair-default-inhibit)
  :hook (prog-mode . electric-pair-local-mode)
  :ensure nil)
#+END_SRC

*** newcomment
:PROPERTIES:
:UNNUMBERED: t
:END:

Make commenting less of a dance.

#+BEGIN_SRC emacs-lisp
(use-package newcomment
  :bind
  ("C-;" . comment-line)
  :ensure nil)
#+END_SRC

** Footer
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
(provide 'wal-edit)

;;; wal-edit.el ends here
#+END_SRC

* Visuals
:PROPERTIES:
:header-args:emacs-lisp: :tangle (expand-file-name "wal-visuals.el" wal/emacs-config-package-path)
:END:

I like nice-looking things.

** Header
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
;;; wal-visuals.el --- Visuals.

;;; Commentary:
;;
;; Provide visual packages.

;;; Code:

(declare-function ligature-set-ligatures "ligature.el")
(declare-function wal/biased-random "wal-func.el")
(declare-function wal/captain-sink "wal-key-bindings.el")

(defvar beacon-dont-blink-commands)
(defvar beacon-dont-blink-major-modes)
(defvar dashboard-buffer-name)
(defvar dashboard-footer-messages)
(defvar dimmer-prevent-dimming-predicates)
(defvar doom-modeline-buffer-file-name-style)
(defvar doom-modeline--vcs-text)

(defgroup wal-visuals nil
  "Change settings used for visual packages."
  :group 'wal
  :tag "Visuals")
#+END_SRC

** Dashboard

*** dashboard
:PROPERTIES:
:UNNUMBERED: t
:END:

Let's have a dash of board.

#+BEGIN_SRC emacs-lisp
(defcustom wal/dashboard-footer-messages
  '("breaching your favorite stupid framework"
    "I propel myself forward on nothing but flukes"
    "devout and up the spout"
    "krill, filter feeders and hit sulphur bottom"
    "the founder of retiring gentlemen"
    "the loud keyboard shall vanquish the muscular mouse"
    "answering all C-calls in sweeping, overflowing song"
    "infinite whale loop"
    "from echo location to perimeter expansion"
    "a mystic of profounder divings"
    "superior, clear and fine code; but there's little of it")
  "The dashboard footer messages.

A collection of status messages."
  :type '(repeat string)
  :group 'wal-visuals)

(defcustom wal/recentf-exclude '("bookmarks\\'")
  "Files the dashboard should not consider recent files."
  :type '(repeat regexp)
  :group 'wal-visuals)

(defcustom wal/startup-banner
  (let ((ext (if (display-graphic-p)
                 ".png"
               ".txt")))
    (expand-file-name
     (concat "assets/logo" ext)
     wal/emacs-config-default-path))
  "The start-up banner (transformed Emacs logo)."
  :type 'file
  :group 'wal-visuals)

(defcustom wal/footer-icon
  (if (display-graphic-p)
      ":whale:"
    wal/ascii-whale)
  "The path to the footer icon."
  :type 'string
  :group 'wal-visuals)

(defun wal/advise-dashboard-insert-startupify-lists (fun &rest r)
  "Advise FUN to ignore certain directories, applying R."
  (let ((recentf-exclude wal/recentf-exclude))
    (apply fun r)))

(defun wal/advise-dashboard-random-footer (&rest _r)
  "Advise to use biased random footer message."
  (nth (wal/biased-random (length dashboard-footer-messages)) dashboard-footer-messages))

(defun wal/show-dashboard ()
  "Show the dashboard."
  (interactive)
  (switch-to-buffer dashboard-buffer-name)
  (delete-other-windows))

(use-package dashboard
  :if (not (daemonp))
  :init
  (advice-add
   'dashboard-insert-startupify-lists
   :around #'wal/advise-dashboard-insert-startupify-lists)
  (advice-add
   'dashboard-random-footer
   :override #'wal/advise-dashboard-random-footer)
  :config
  (setq dashboard-banner-logo-title (wal/describe-config-version))
  :custom
  (dashboard-startup-banner wal/startup-banner)
  (dashboard-projects-backend 'projectile)
  (dashboard-items '((recents . 5)
                     (projects . 3)
                     (bookmarks . 3)))
  (dashboard-center-content t)
  (dashboard-set-file-icons t)
  (dashboard-set-navigator t)
  (dashboard-footer-icon wal/footer-icon)
  (dashboard-footer-messages wal/dashboard-footer-messages)
  (dashboard-week-agenda nil)
  (dashboard-agenda-time-string-format "%d/%m/%y")
  :general
  (wal/general-sink "s"
    '(wal/show-dashboard :wk "dashboard"))
  :hook (after-init . dashboard-setup-startup-hook))
#+END_SRC

** Themes

The nicest theme packages out there. It supports many, many packages'
=face= variants.

*** doom-themes
:PROPERTIES:
:UNNUMBERED: t
:END:

#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :config
  (doom-themes-org-config))
#+END_SRC

*** kaolin-themes
:PROPERTIES:
:UNNUMBERED: t
:END:

Another collection of beautiful themes, but it doesn't color every
=face=.

#+BEGIN_SRC emacs-lisp
(use-package kaolin-themes
  :config
  ;; Some packages use `treemacs'.
  (kaolin-treemacs-theme)
  :custom
  (kaolin-themes-italic-comments t)
  (kaolin-themes-git-gutter-solid t)
  ;; Remove that `modeline' border.
  (kaolin-themes-modeline-border nil)
  ;; Distinct background for fringe and line numbers.
  (kaolin-themes-distinct-fringe t)
  ;; Distinct colors for company popup scrollbar.
  (kaolin-themes-distinct-company-scrollbar t))
#+END_SRC

*** modus-themes
:PROPERTIES:
:UNNUMBERED: t
:END:

Another themes collection with super configurable themes.

#+BEGIN_SRC emacs-lisp
(use-package modus-themes
  :custom
  (modus-themes-slanted-constructs t)
  (modus-themes-bold-constructs t)
  (modus-themes-mode-line 'borderless)
  :ensure nil)
#+END_SRC

** Highlighting

*** diff-hl
:PROPERTIES:
:UNNUMBERED:
:END:

Show diffs in the fringe (also in =dired= buffers).

#+BEGIN_SRC emacs-lisp
(use-package diff-hl
  :config
  (global-diff-hl-mode)
  :hook
  ((magit-post-refresh . diff-hl-magit-post-refresh)
   (dired-mode . diff-hl-dired-mode))
  :defer 2)
#+END_SRC

*** highlight-indent-guides
:PROPERTIES:
:UNNUMBERED: t
:END:

Show indentation.

#+BEGIN_SRC emacs-lisp
(use-package highlight-indent-guides
  :custom
  (highlight-indent-guides-method 'character)
  (highlight-indent-guides-responsive 'top)
  :general
  (wal/captain-sink :keymaps '(prog-mode-map yaml-mode-map)
    "i" '(highlight-indent-guides-mode :wk "h-indent"))
  :hook ((prog-mode yaml-mode) . highlight-indent-guides-mode)
  :delight " hig")
#+END_SRC

*** highlight-numbers
:PROPERTIES:
:UNNUMBERED: t
:END:

Make numbers stand out.

#+BEGIN_SRC emacs-lisp
(use-package highlight-numbers
  :hook (prog-mode . highlight-numbers-mode))
#+END_SRC

*** hl-todo
:PROPERTIES:
:UNNUMBERED: t
:END:

Highlight =TODO=, =FIXME= etc. in =prog= modes.

#+BEGIN_SRC emacs-lisp
(use-package hl-todo
  :custom
  (hl-todo-highlight-punctuation ":")
  (hl-todo-require-punctuation t)
  :hook ((prog-mode yaml-mode) . hl-todo-mode))
#+END_SRC

*** rainbow-delimiters
:PROPERTIES:
:UNNUMBERED: t
:END:

Show colors in source code and make delimiters stand out.

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

*** rainbow-mode
:PROPERTIES:
:UNNUMBERED: t
:END:

Show colors colorfully.

#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :delight " rbm")
#+END_SRC

*** tree-sitter
:PROPERTIES:
:UNNUMBERED: t
:END:

Provide alternative syntax highlighting.

#+begin_src emacs-lisp
(defcustom wal/tree-sitter-mode-maps
  '(js2-mode-map
    python-mode-map
    c++-mode-map)
  "Mode maps that get `tree-sitter-hl-mode' bound."
  :type '(repeat symbol)
  :group 'wal-visuals)

(defun wal/tree-sitter-mode ()
  "(De-)Activate mode and highlighting."
  (interactive)
  (if (and (boundp 'tree-sitter-mode) tree-sitter-mode)
      (tree-sitter-mode -1)
    (tree-sitter-hl-mode)))

(use-package tree-sitter
  :general
  (wal/captain :keymaps wal/tree-sitter-mode-maps :major-modes t
    "t" '(wal/tree-sitter-mode :wk "treesitter"))
  :delight " trs")

(use-package tree-sitter-langs
  :demand
  :after tree-sitter)
#+end_src

** Where Am I?

*** which-key
:PROPERTIES:
:UNNUMBERED: t
:END:

Show the next possible key presses towards a command.

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :config
  (which-key-mode)
  :custom
  (which-key-lighter " wk?")
  (which-key-idle-delay 0.4)
  (which-key-sort-uppercase-first nil)
  (which-key-preserve-window-configuration t)
  (which-key-show-docstrings t)
  :defer 1)
#+END_SRC

*** beacon
:PROPERTIES:
:UNNUMBERED: t
:END:

Help me find my cursor!

#+BEGIN_SRC emacs-lisp
(defcustom wal/beacon-dont-blink-commands
  '(tab-to-tab-stop
    mouse-drag-region
    mouse-set-region
    mouse-set-point)
  "List of additional commands that should not trigger a blink."
  :type '(repeat symbol)
  :group 'wal-visuals)

(defun wal/configure-beacon ()
  "Configure `beacon' package."
  (mapc (lambda (it)
          (add-to-list 'beacon-dont-blink-commands it))
        wal/beacon-dont-blink-commands)
  (add-to-list 'beacon-dont-blink-major-modes 'vterm-mode))

(use-package beacon
  :config
  (wal/configure-beacon)
  (beacon-mode +1)
  :custom
  (beacon-blink-when-focused t)
  (beacon-blink-when-window-scrolls nil)
  :wal-bind
  ("]" . beacon-blink)
  :defer 3)
#+END_SRC

*** dimmer
:PROPERTIES:
:UNNUMBERED: t
:END:

Dim inactive frames.

#+BEGIN_SRC emacs-lisp
;; Solution from buzztaiki https://github.com/gonewest818/dimmer.el/issues/49
(defun wal/lsp-ui-doc-frame-p ()
  "Check if buffer is a lsp-ui-doc frame buffer."
  (string-match-p "\\` \\*lsp-ui-doc" (buffer-name)))

(defun wal/advise-dimmer-config-change-handler ()
  "Advise to only force process if no predicate is truthy."
  (let ((ignore (cl-some (lambda (f) (and (fboundp f) (funcall f)))
                         dimmer-prevent-dimming-predicates)))
    (unless ignore
      (when (fboundp 'dimmer-process-all)
        (dimmer-process-all t)))))

(defun wal/dimmer-configure-lsp-doc ()
  "Convenience settings for lsp-doc users."
  (add-to-list
   'dimmer-prevent-dimming-predicates
   #'wal/lsp-ui-doc-frame-p))

(use-package dimmer
  :config
  (advice-add
   'dimmer-config-change-handler
   :override 'wal/advise-dimmer-config-change-handler)
  (dimmer-configure-company-box)
  (dimmer-configure-hydra)
  (dimmer-configure-magit)
  (dimmer-configure-org)
  (dimmer-configure-which-key)
  (wal/dimmer-configure-lsp-doc)
  (dimmer-mode t)
  :custom
  (dimmer-fraction 0.3)
  :defer 3
  :delight " dmm")
#+END_SRC

** Modeline

Minor modes are white-listed, hidden, delighted and diminished.
Meaning that, if not white-listed, they are not shown, if they are
shown, they are delighted unless they were diminished.

*** doom-modeline
:PROPERTIES:
:UNNUMBERED: t
:END:

Busier and prettier[fn:13] =modeline=.

#+BEGIN_SRC emacs-lisp
(defun wal/advise-doom-modeline-update-vcs-text (&rest _r)
  "Advise function to remove branch prefixes."
  (when doom-modeline--vcs-text
    (setq doom-modeline--vcs-text
          (replace-regexp-in-string
           "\\(feature\\|\\(\\w+\\)?fix\\|improvement\\)\\/"
           ""
           doom-modeline--vcs-text))))

(defun wal/doom-modeline-buffer-file-name-styles ()
  "Complete `doom-modeline' buffer file name styles."
  (completing-read
   "Select style: "
   '(truncate-upto-project
     truncate-upto-project
     truncate-from-project
     truncate-with-project
     truncate-except-project
     truncate-upto-root
     truncate-all
     truncate-nil
     relative-from-project
     relative-to-project
     file-name
     buffer-name)))

(defun wal/doom-modeline-switch-buffer-file-name-style (style)
  "Switch to `doom-modeline' buffer file name STYLE."
  (interactive (list (wal/doom-modeline-buffer-file-name-styles)))
  (let ((style-symbol (if (symbolp style)
                          style
                        (intern style))))
    (setq doom-modeline-buffer-file-name-style style-symbol)))

(use-package doom-modeline
  :config
  (doom-modeline-mode 1)
  (advice-add
   'doom-modeline-update-vcs-text
   :after #'wal/advise-doom-modeline-update-vcs-text)
  (when (fboundp 'doom-modeline-update-vcs-text)
    (add-hook 'magit-post-refresh-hook #'doom-modeline-update-vcs-text))
  :custom
  (doom-modeline-project-detection 'projectile)
  (doom-modeline-minor-modes t)
  (doom-modeline-buffer-encoding nil)
  (doom-modeline-icon t)
  (doom-modeline-vcs-max-length 25)
  (doom-modeline-buffer-file-name-style 'truncate-with-project)
  :custom-face
  (doom-modeline-debug-visual ((t (:inherit 'mode-line))))
  :defer 1)
#+END_SRC

*** delight
:PROPERTIES:
:UNNUMBERED: t
:END:

Refine a couple of major and minor mode names.

#+BEGIN_SRC emacs-lisp
(defcustom wal/major-delight t
  "Whether some major modes are delighted beyond reason."
  :type 'boolean
  :group 'wal-visuals)

(use-package delight
  :config
  (delight 'dired-mode "Dired" :major)
  (delight 'emacs-lisp-mode "Elisp" :major)
  (delight 'lisp-interaction-mode "Elisp?" :major)
  (delight 'wdired-mode "DirEd" :major)
  (delight 'c++-mode "CPP" :major)
  (delight 'compilation-shell-minor-mode " csh" "compile")
  (delight 'auto-fill-function " aff" t)
  (delight 'with-editor-mode " w/e" "with-editor")
  ;; Only confuse/delight if allowed.
  (when wal/major-delight
    (delight 'elixir-mode "Homebrew" :major)
    (delight 'c++-mode "*&" :major)
    (delight 'python-mode "Snake" :major)
    (delight 'js2-mode "NaNsense" :major)
    (delight 'inferior-python-mode "Bite" :major)))

(use-package diminish)
#+END_SRC

*** minions
:PROPERTIES:
:UNNUMBERED: t
:END:

Sometimes the list of minor modes overcrowds the modeline.

#+BEGIN_SRC emacs-lisp
(use-package minions
  :config
  (minions-mode +1)
  :custom
  (minions-direct '(tree-sitter-mode
                    smerge-mode
                    git-timemachine-mode
                    vterm-copy-mode
                    typo-mode
                    auto-fill-function
                    flyspell-mode
                    org-tree-slide-mode
                    wal/config-mode))
  :general
  (wal/captain-sink "m" '(minions-mode :wk "minions"))
  :defer 3)
#+END_SRC

*** mode-line-bell
:PROPERTIES:
:UNNUMBERED: t
:END:

Make the bell visual.

#+BEGIN_SRC emacs-lisp
(use-package mode-line-bell
  :config
  (mode-line-bell-mode)
  :custom
  (mode-line-bell-flash-time 0.1)
  :defer 3)
#+END_SRC

** Ligatures

Package =ligature= is not yet on MELPA so you'll have to put it in the
load path.

*** ligature
:PROPERTIES:
:UNNUMBERED: t
:END:

#+BEGIN_SRC emacs-lisp
(defcustom wal/common-ligatures
  '(
    "==" "!=" ">=" "<=" ; Comparison.
    "+=" "-=" "/=" "%=" "*=" ; Assignment.
    "||" "&&"  ; Logical.
    "/*" "*/" "//" "/**" "**/" ; Comments.
    "++" "--" ;; Increment/decrement.
    ">>=" "<<=" "&=" "|=" "^=" ; Bitwise assignments.
    "<<" ">>" ; Bitwise shifts.
    "..." ; Spread.
    )
  "A list of ligatures available in all programming modes."
  :type '(repeat string)
  :group 'wal-visuals)

(defun wal/advise-ligature-set-ligatures (fun &rest args)
  "Advise FUN to append common ligatures.
ARGS is a list containing modes and additional ligatures."
  (let ((modes (nth 0 args))
        (ligatures (append (nth 1 args) wal/common-ligatures)))
    (apply fun `(,modes ,ligatures))))

(use-package ligature
  :config
  (advice-add
   'ligature-set-ligatures
   :around #'wal/advise-ligature-set-ligatures)
  (ligature-set-ligatures 'lisp-data-mode '(";;"))
  (ligature-set-ligatures 'c++-mode '("::" "->"))
  (ligature-set-ligatures 'python-mode '("->" "__"))
  (ligature-set-ligatures 'js2-mode '("=>" "!==" "===" "!!"))
  (ligature-set-ligatures 'elixir-mode '("|>" "->" "<-" "=>"
                                        "::" "<>" "#{" "\\\\"
                                         "===" "!==" ".."))
  (ligature-set-ligatures 'prolog-mode '(":-"))
  (ligature-set-ligatures 'html-mode '("<!--" "-->"))
  (ligature-set-ligatures 'dart-mode '("=>" "///" ".?" "??"
                                       "??=" ".."))
  (ligature-set-ligatures 'rust-mode '("///" "->" "=>" "::"
                                       ".." "#["))
  :hook (prog-mode . ligature-mode)
  :load-path "site-lisp")
#+END_SRC

*** fira-code-mode
:PROPERTIES:
:UNNUMBERED: t
:END:

Alternatively, enable FiraCode ligatures for /all/ fonts.

#+BEGIN_SRC emacs-lisp
(defun wal/use-fira-code-mode ()
  "Determine whether `fira-code-mode' can/should be used.

This is the case when:

1. We can't use `ligature'
2. The symbol font is installed
3. We're not using Monoid font"
  (and (not (require 'ligature nil t))
       (x-list-fonts "Fira Code Symbol")
       (not (string-match "Monoid" (face-font 'default)))))

(defun wal/fira-code ()
  "Wraps macro to only maybe enable."
  (use-package fira-code-mode
    :if (wal/use-fira-code-mode)
    :custom
    (fira-code-mode-disabled-ligatures '("[]" "x"))
    :hook prog-mode
    :diminish))

;; We guard against font-related actions.
(if (daemonp)
    (add-hook 'server-after-make-frame-hook 'wal/fira-code t)
  (add-hook 'emacs-startup-hook 'wal/fira-code t))
#+END_SRC

** Icons

*** all-the-icons
:PROPERTIES:
:UNNUMBERED: t
:END:

You need to install the icons yourself[fn:13].

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :commands (all-the-icons-octicon))

(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode)
  :after all-the-icons
  :diminish)
#+END_SRC

*** emojify
:PROPERTIES:
:UNNUMBERED: t
:END:

Display emojis[fn:14].

#+BEGIN_SRC emacs-lisp
(use-package emojify
  :general
  (wal/captain-sink "e" '(emojify-mode :wk "emojify"))
  :hook (dashboard-mode . emojify-mode))
#+END_SRC

** Screen-Saver

*** zone
:PROPERTIES:
:UNNUMBERED: t
:END:

Since this eats up a lot of CPU, the timer is disabled by default but
zoning can always be triggered using =C-z=.

#+BEGIN_SRC emacs-lisp
(defcustom wal/zone-when-idle nil
  "Determine whether to zone out when idling."
  :type 'boolean
  :group 'wal-visuals)

(defcustom wal/zone-timer (* 5 60)
  "The time in seconds when we will zone out."
  :type 'integer
  :group 'wal-visuals)

(use-package zone
  :config
  (setq zone-programs [
                       zone-pgm-drip
                       zone-pgm-jitter
                       zone-pgm-dissolve
                       zone-pgm-rat-race
                       zone-pgm-whack-chars
                       ])
  (when (and (fboundp 'zone-when-idle) wal/zone-when-idle)
    (zone-when-idle wal/zone-timer))
  :bind
  ("C-z" . zone) ; Replaces `suspend-frame'.
  :ensure nil)
#+END_SRC

** Other

*** mixed-pitch
:PROPERTIES:
:UNNUMBERED: t
:END:

Allow using variable and fixed fonts in the same buffer.

#+BEGIN_SRC emacs-lisp
(use-package mixed-pitch
  :custom
  (mixed-pitch-variable-pitch-cursor nil)
  (mixed-pitch-fixed-pitch-faces '(org-code
                                   org-block
                                   org-verbatim
                                   org-table))
  :delight " mpm")
#+END_SRC

Allow padding and centering text.

#+BEGIN_SRC emacs-lisp
(use-package visual-fill-column)
#+END_SRC

** Footer
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
(provide 'wal-visuals)

;;; wal-visuals.el ends here
#+END_SRC

* Windows
:PROPERTIES:
:header-args:emacs-lisp: :tangle (expand-file-name "wal-windows.el" wal/emacs-config-package-path)
:END:

Everything that has to do with windows.

** Header
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
;;; wal-windows.el --- Windows.

;;; Commentary:
;;
;; Provide window packages.

;;; Code:

(declare-function aw-delete-window "ace-window.el")
(declare-function comint-check-proc "comint.el")
(declare-function popper-cycle "popper.el")
(declare-function popper-popup-p "popper.el")
(declare-function popper--bury-all "popper.el")
(declare-function popper--open-all "popper.el")

(defvar aw-dispatch-alist)
(defvar popper-group-function)
(defvar wal/use-perspectives)

(defgroup wal-windows nil
 "Change window settings."
 :group 'wal
 :tag "Windows")
#+END_SRC

** Packages

*** ace-window
:PROPERTIES:
:UNNUMBERED: t
:END:

Ace interacting with (multiple) windows.

#+BEGIN_SRC emacs-lisp
(defun wal/aw-delete-window-kill-buffer (window)
  "Call `aw-delete-window' on WINDOW requesting buffer kill."
  (aw-delete-window window t))

(defun wal/advise-aw--switch-buffer-consult (&rest _r)
  "Advise `aw--switch-buffer' to use `consult-buffer'."
  (call-interactively 'consult-buffer))

(defun wal/configure-ace-window ()
  "Configure package `ace-window'."
  (setq aw-dispatch-alist '((?h aw-split-window-horz "horizontal split")
                            (?v aw-split-window-vert "vertical split")
                            (?d aw-delete-window "delete")
                            (?x wal/aw-delete-window-kill-buffer "kill")
                            (?o delete-other-windows "delete other")
                            (?m aw-move-window "move")
                            (?c aw-copy-window "copy")
                            (?s aw-swap-window "swap")
                            (?b aw-switch-buffer-in-window "buffer")
                            ;; If this has a description, it doesn't work.
                            (?? aw-show-dispatch-help)))
  (advice-add
   'aw--switch-buffer
   :override #'wal/advise-aw--switch-buffer-consult))

(use-package ace-window
  :config
  (wal/configure-ace-window)
  :custom
  (aw-dispatch-always t)
  (aw-keys '(?j ?k ?l ?\; ?u ?i ?o ?p))
  :wal-bind
  ("o" . ace-window)
  :delight " ace")
#+END_SRC

*** golden-ratio
:PROPERTIES:
:UNNUMBERED: t
:END:

Use the golden ratio.

#+BEGIN_SRC emacs-lisp
(defun wal/aw-switch-maybe-golden-ratio (_window)
  "Invoke `golden-ratio' if mode is active.
Used to advise `aw-switch-to-window'."
  (when (eq golden-ratio-mode t)
    (golden-ratio)))

(use-package golden-ratio
  :config
  ;; Make sure to run golden ratio after `aw-switch-to-window'.
  (advice-add
   'aw-switch-to-window
   :after #'wal/aw-switch-maybe-golden-ratio)
  :general
  (wal/captain-sink "g" '(golden-ratio-mode :wk "golden-ratio"))
  :delight " gol")
#+END_SRC

*** popper
:PROPERTIES:
:UNNUMBERED: t
:END:

Treat certain buffers and their windows as pop-ups.

#+BEGIN_SRC emacs-lisp
(defcustom wal/popper-reference-buffers
  '(docker-container-mode
    debugger-mode
    "\\*Bookmark Annotation\\*"
    "\\*org-roam\\*"
    ;; Shell(-like).
    "*eshell*"
    "\\*poetry-shell\\*"
    "^\\*docker-compose"
    "^\\* docker"
    dap-ui-repl-mode
    inferior-python-mode
    ;; Help(-like).
    helpful-mode
    help-mode
    dictionary-mode
    shortdoc-mode
    ;; Response(-like).
    "\\*HTTP Response")
  "Replaces `popper-reference-buffers'."
  :type '(restricted-sexp
          :match-alternatives
          (stringp symbolp functionp consp))
  :group 'wal-windows)

(defcustom wal/popper-mode-line
  '(:eval (concat
           " "
           (doom-modeline-icon 'faicon "fort-awesome" nil nil
                               :face 'all-the-icons-dsilver
                               :height 0.9
                               :v-adjust 0.0)
           " "))
  "Replaces `popper-mode-line'."
  :type 'sexp
  :group 'wal-windows)

(defun wal/popper-dead-shell-p ()
  "Check if the current buffer is a shell or comint pop-up with no process."
  (interactive)
  (let ((buf (current-buffer)))
    (with-current-buffer buf
      (and (popper-popup-p buf)
           (or (derived-mode-p 'shell-mode) (derived-mode-p 'comint-mode))
           (not (comint-check-proc buf))))))

(defun wal/popper-open-all ()
  "Same as `popper--open-all' but interactive."
  (interactive)
  (popper--open-all))

(defun wal/popper-bury-all ()
  "Same as `popper--bury-all' but interactive."
  (interactive)
  (popper--bury-all))

(defun wal/configure-popper ()
  "Configure package `popper'."
  (when wal/use-perspectives
    (setq popper-group-function 'popper-group-by-perspective))
  (defhydra wal/popper (:hint nil)
    "
%s`wal/ascii-whale Pop-ups: _c_ycle, _b_ury or _o_pen all.
"
    ("c" popper-cycle)
    ("o" wal/popper-open-all :color blue)
    ("b" wal/popper-bury-all :color blue)
    ("q" nil "quit")))

(use-package popper
  :config
  (wal/configure-popper)
  (popper-mode +1)
  :custom
  (popper-reference-buffers wal/popper-reference-buffers)
  (popper-display-control 'user)
  (popper-mode-line wal/popper-mode-line)
  :wal-bind
  ("[" . popper-toggle-latest)
  :general
  (wal/captain "[" :keymaps '(popper-mode-map)
    '(wal/popper/body :wk "popper"))
  (general-define-key
   :keymaps 'popper-mode-map
   :predicate '(wal/popper-dead-shell-p)
   "q" 'kill-buffer-and-window)
  :after winner
  :demand)
#+END_SRC

** Footer
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
(provide 'wal-windows)

;;; wal-windows.el ends here
#+END_SRC

* Movement
:PROPERTIES:
:header-args:emacs-lisp: :tangle (expand-file-name "wal-movement.el" wal/emacs-config-package-path)
:END:

Moving around should be fun.

** Header
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
;;; wal-movement.el --- Movement.

;;; Commentary:
;;
;; Provide movement packages.

;;; Code:

(declare-function avy-with "avy.el")
(declare-function avy-jump "avy.el")
(declare-function org-at-heading-p "org.el")

(defvar avy-goto-word-0)
(defvar avy-goto-word-0-regexp)
#+END_SRC

** Packages

*** avy
:PROPERTIES:
:UNNUMBERED: t
:END:

Jump to (visible) lines and chars is fun if you are too lazy to use
your mouse.

#+BEGIN_SRC emacs-lisp
(defun wal/avy-goto-word-in-line ()
  "Jump to currently visible word in the current line."
  (interactive)
  (avy-with avy-goto-word-0
    (avy-jump avy-goto-word-0-regexp
              :beg (line-beginning-position)
              :end (line-end-position))))

(defun wal/avy-action-zip-to-char (pt)
  "Zip (just mark) from current point up to PT."
  (set-mark (point))
  (goto-char pt))

(defun wal/advise-avy-goto-end-of-line (&rest _r)
  "Advise `avy-goto-end-of-line' to go to beginning for `org' headings.

When called with `universal-argument', this also goes to the
beginning."
  (when (or (equal current-prefix-arg '(4))
            (and (eq major-mode 'org-mode) (org-at-heading-p)))
    (goto-char (line-beginning-position))))

(use-package avy
  :config
  (add-to-list 'avy-dispatch-alist '(?q . wal/avy-action-zip-to-char))
  (advice-add
   'avy-goto-end-of-line
   :after #'wal/advise-avy-goto-end-of-line)
  :custom
  (avy-background t)
  :wal-bind
  (("j" . avy-goto-word-1)
   ("l" . avy-goto-end-of-line)
   ("k" . wal/avy-goto-word-in-line))
  :general
  (wal/lieutenant
    ;; Lines.
    "l" '(:ignore t :wk "avy (line)")
    "lc" '(avy-copy-line :wk "copy")
    "ld" '(avy-kill-whole-line :wk "delete")
    "lm" '(avy-move-line :wk "move")
    "lw" '(avy-kill-ring-save-whole-line :wk "kill")
    ;; Region.
    "r" '(:ignore t :wk "avy (region)")
    "rc" '(avy-copy-region :wk "copy")
    "rd" '(avy-kill-region :wk "delete")
    "rm" '(avy-move-region :wk "move")
    "rw" '(avy-kill-ring-save-region :wk "kill"))
  :commands (avy-with))
#+END_SRC

*** mwim
:PROPERTIES:
:UNNUMBERED: t
:END:

Move where I want. Useful for comments.

#+BEGIN_SRC emacs-lisp
(use-package mwim
  :bind
  (("C-a" . mwim-beginning)
   ("C-e" . mwim-end)))
#+END_SRC

** Footer
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
(provide 'wal-movement)

;;; wal-movement.el ends here
#+END_SRC

* Finding Things
:PROPERTIES:
:header-args:emacs-lisp: :tangle (expand-file-name "wal-find.el" wal/emacs-config-package-path)
:END:

I mostly search.

Searches are done using either =ripgrep= or the *Silver Searcher*.
Both require installation of their respective binary.

** Header
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
;;; wal-find.el --- Finding things.

;;; Commentary:
;;
;; Provide packages to find things.

;;; Code:

(declare-function wal/display-buffer-in-pop-up "wal-func.el")

(defgroup wal-find nil
  "Change settings of search packages."
  :group 'wal
  :tag "Finding things")
#+END_SRC

** Packages

*** rg
:PROPERTIES:
:UNNUMBERED: t
:END:

You can get the =ripgrep= binary from [[https://github.com/BurntSushi/ripgrep][here]].

#+BEGIN_SRC emacs-lisp
(use-package rg
  :config
  (wal/display-buffer-in-pop-up "\\`\\*rg\\*\\'")
  :wal-bind
  ("n" . rg-menu)
  :ensure-system-package rg)
#+END_SRC

*** ctrlf
:PROPERTIES:
:UNNUMBERED: t
:END:

Replace =isearch=. Important command is =C-o s= to change search style.

#+BEGIN_SRC emacs-lisp
(defcustom wal/ctrlf-cancel-commands
  '(ace-window
    other-window
    crux-other-window-or-switch-buffer)
  "Commands that are remapped to `ctrlf-cancel'.

Commands that unfocus the ctrlf minibuffer should quit it."
  :type '(repeat symbol)
  :group 'wal-find)

(defun wal/configure-ctrlf ()
  "Configure package `ctrlf'.

This adds additional bindings."
  (eval
   `(bind-keys :map ctrlf-minibuffer-mode-map
      ,@(mapcar (lambda (it) (cons `[remap ,it] 'ctrlf-cancel)) wal/ctrlf-cancel-commands))))

(use-package ctrlf
  :config
  (wal/configure-ctrlf)
  (when (fboundp 'ctrlf-mode)
    (ctrlf-mode +1))
  :custom
  (ctrlf-auto-recenter t)
  (ctrlf-show-match-count-at-eol nil)
  (ctrlf-default-search-style 'fuzzy)
  (ctrlf-alternate-search-style 'regexp)
  :defer 2)
#+END_SRC

*** dumb-jump
:PROPERTIES:
:UNNUMBERED: t
:END:

Look up definitions when no LSP is already doing it. Jumping is done
using =xref-find-definitions= (=M-.=).

#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
  :init
  (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
  :config
  (setq dumb-jump-selector 'completing-read)
  :custom
  (dumb-jump-force-searcher 'ag))
#+END_SRC

** Footer
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
(provide 'wal-find)

;;; wal-find.el ends here
#+END_SRC

* Completion
:PROPERTIES:
:header-args:emacs-lisp: :tangle (expand-file-name "wal-complete.el" wal/emacs-config-package-path)
:END:

Complete commands and code.

** Header
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
;;; wal-complete.el --- Completion.

;;; Commentary:
;;
;; Provide Emacs completion packages.

;;; Code:

(declare-function projectile-project-p "projectile.el")
(declare-function wal/display-buffer-ethereally "wal-func.el")
(declare-function wal/maybe-use-projectile "wal-workspace.el")

(defvar xref-show-xrefs-function)

(defgroup wal-complete nil
  "Change settings used for completion packages."
  :group 'wal
  :tag "Completion")
#+END_SRC

** Inline Completion

*** company
:PROPERTIES:
:UNNUMBERED: t
:END:

In-line completion.

#+BEGIN_SRC emacs-lisp
(use-package company
  :wal-bind
  (:map company-mode-map
   ("<return>" . company-complete))
  :general
  (wal/captain-sink :keymaps '(prog-mode-map dap-ui-repl-mode-map)
    "c" '(company-mode :wk "company"))
  :hook (prog-mode . company-mode)
  :delight " cmp")

(use-package company-box
  :hook (company-mode . company-box-mode)
  :diminish)
#+END_SRC

** Minibuffer Completion

*** vertico
:PROPERTIES:
:UNNUMBERED: t
:END:

Provide global option narrowing using the =vertico= family of products.

#+BEGIN_SRC emacs-lisp
(use-package vertico
  :config
  (setq enable-recursive-minibuffers t
        read-extended-command-predicate #'command-completion-default-include-p)
  (savehist-mode)
  (vertico-mode)
  :custom
  (vertico-count 5)
  (vertico-cycle t)
  (vertico-sort-function #'vertico-sort-history-alpha)
  :defer 1)
#+END_SRC

*** vertico-directory
:PROPERTIES:
:UNNUMBERED: t
:END:

#+BEGIN_SRC emacs-lisp
(defvar-local wal/command nil
  "Command that started completion session.")

(defun wal/record-this-command ()
  "Record the commnd which opened the minibuffer."
  (setq-local wal/command this-command))

(defun wal/advise-vertico-directory--completing-file-p (fun &rest r)
  "Advise FUN using R to exit if we came from `dired-goto-file'."
  (if (eq wal/command 'dired-goto-file)
      nil
    (apply fun r)))

(defun wal/configure-vertico-directory ()
  "Configure package `vertico-directory'."
  (advice-add
   'vertico-directory--completing-file-p
   :around #'wal/advise-vertico-directory--completing-file-p))

(use-package vertico-directory
  :config
  (wal/configure-vertico-directory)
  :bind
  (:map vertico-map
   ("RET" . vertico-directory-enter)
   ("DEL" . vertico-directory-delete-char)
   ("M-DEL" . vertico-directory-delete-word))
  :hook
  ((rfn-eshadow-update-overlay . vertico-directory-tidy)
   (minibuffer-setup . wal/record-this-command))
  :demand t
  :after vertico
  :load-path "site-lisp")
#+END_SRC

*** vertico-quick
:PROPERTIES:
:UNNUMBERED: t
:END:

#+BEGIN_SRC emacs-lisp
(use-package vertico-quick
  :wal-bind
  (:map vertico-map
   ("l" . vertico-quick-insert))
  :demand t
  :after vertico
  :load-path "site-lisp")
#+END_SRC

*** orderless
:PROPERTIES:
:UNNUMBERED: t
:END:

Fuzzy matches.

#+BEGIN_SRC emacs-lisp
(use-package orderless
  :config
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion))))
  :after vertico
  :demand)
#+END_SRC

*** marginalia
:PROPERTIES:
:UNNUMBERED: t
:END:

Contextual information during completion, partial completion and
completion actions.

#+BEGIN_SRC emacs-lisp
(use-package marginalia
  :config
  (marginalia-mode)
  :custom
  (marginalia-command-categories
    '((imenu . imenu)
      (projectile-switch-to-buffer . buffer)
      (projectile-find-file . project-file)
      (projectile-find-file-other-window . project-file)
      (persp-switch-to-buffer . buffer)
      (persp-kill-buffer* . buffer)))
  :bind
  (:map minibuffer-local-map
   ("M-a" . marginalia-cycle))
  :demand t
  :after vertico)
#+END_SRC

*** embark
:PROPERTIES:
:UNNUMBERED: t
:END:

Do something else with minibuffer candidate.

#+BEGIN_SRC emacs-lisp
(defun wal/configure-embark ()
  "Configure package `embark'."
  (wal/display-buffer-ethereally "\\`\\*Embark Collect \\(Live\\|Completions\\)\\*")
  (with-no-warnings
    (define-key embark-file-map
                (kbd "f")
                (wal/maybe-use-projectile find-file))
    (define-key embark-file-map
                (kbd "o")
                (wal/maybe-use-projectile find-file-other-window))))

(use-package embark
  :config
  (wal/configure-embark)
  :custom
  (embark-mixed-indicator-delay 2.0)
  :bind
  (("M-." . embark-act) ; Overrides `xref-find-definition'.
   ("C-M-." . embark-dwim)) ; Overrides `xref-find-apropos'.
  :after vertico)

(use-package embark-consult
  :hook (embark-collect-mode . consult-preview-at-point-mode)
  :demand t
  :after (embark consult))
#+END_SRC

*** consult
:PROPERTIES:
:UNNUMBERED: t
:END:

Heavy lifting with =consult=.

#+BEGIN_SRC emacs-lisp
(defcustom wal/consult-buffer-filter
  '("^magit" "\\*dashboard\\*" "\\*Messages\\*" "\\*scratch")
  "Additional buffers to filter."
  :type '(repeat string)
  :group 'wal-complete)

(defun wal/consult-ripgrep-ignored ()
  "Search using `consult-ripgrep' without ignoring files."
  (interactive)
  (let ((consult-ripgrep-args
         "rg --null --line-buffered --color=never --max-columns=1000 --path-separator /\
   --smart-case --no-heading --line-number --no-ignore ."))
    (call-interactively 'consult-ripgrep)))

(defun wal/configure-consult ()
  "Configure package `consult'."
  (setq xref-show-xrefs-function #'consult-xref)
  (mapc (lambda (it) (add-to-list 'consult-buffer-filter it))
        wal/consult-buffer-filter)
  (declare-function consult--customize-set "consult.el")
  (consult-customize
   consult--source-recent-file
   consult--source-project-recent-file
   :preview-key (kbd "M-,")))

(use-package consult
  :config
  (wal/configure-consult)
  :custom
  (consult-project-root-function #'projectile-project-root)
  :bind
  (("M-g g" . consult-goto-line)
   ("M-g m" . consult-mark)
   ("M-g M-m" . consult-global-mark)
   :map bookmark-map
   ("u" . consult-bookmark)
   :map kmacro-keymap
   ("u" . consult-kmacro)
   :map ctl-x-r-map
   ("u" . consult-register))
  :wal-bind
  ("u" . consult-buffer)
  :general
  (wal/general
    "St" '(consult-theme :wk "consult theme")
    "fr" '(consult-recent-file :wk "recent"))
  (wal/colonel
    "n" '(consult-ripgrep :wk "rg"))
  (wal/major :keymaps 'org-mode-map :major-modes t
    "g" '(consult-org-heading :wk "go to heading"))
  (wal/major-sink "c" '(consult-mode-command :wk "invoke mode command"))
  (wal/lieutenant
    "u" '(:ignore t :wk "consult")
    "ui" '(wal/consult-ripgrep-ignored :wk "ignored rg")
    "ul" '(consult-focus-lines :wk "lines"))
  :after vertico)

(use-package consult-flycheck
  :demand t
  :after (consult flycheck))
#+END_SRC

** Footer
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
(provide 'wal-complete)

;;; wal-complete.el ends here
#+END_SRC

* Workspace
:PROPERTIES:
:header-args:emacs-lisp: :tangle (expand-file-name "wal-workspace.el" wal/emacs-config-package-path)
:END:

Keep order.

** Header
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
;;; wal-workspace.el --- Workspace.

;;; Commentary:
;;
;; Provide workspace packages.

;;; Code:

(declare-function consult-customize "consult.el")
(declare-function consult--regexp-filter "consult.el")
(declare-function persp-current-buffer-names "perspective.el")
(declare-function persp-current-name "perspective.el")
(declare-function persp-names "perspective.el")
(declare-function persp-scratch-buffer "perspective.el")
(declare-function persp-switch-to-buffer "perspective.el")
(declare-function wal/captain "wal-key-bindings.el")

(defvar consult-buffer-filter)
(defvar consult--source-buffer)
(defvar projectile-globally-ignored-directories)
(defvar projectile-globally-ignored-files)
(defvar projectile-globally-ignored-file-suffixes)

(defgroup wal-workspace nil
  "Change settings used for workspace packages."
  :group 'wal
  :tag "Workspace")
#+END_SRC

** Packages

*** perspective
:PROPERTIES:
:UNNUMBERED: t
:END:

Group buffers in workspaces.

#+BEGIN_SRC emacs-lisp
(defcustom wal/use-perspectives t
  "Whether to use perspectives.

This requires `wal/load-custom-file-immediately' to be true."
  :type 'boolean
  :group 'wal-workspace)

(defcustom wal/default-perspective "walheimat"
  "The name of my default perspective."
  :type 'string
  :group 'wal-workspace)

(defcustom wal/perspective-max-modeline-length 20
  "Truncation threshold for perspective names.
If the combined names succeed the threshold, inactive ones will
get truncated."
  :type 'integer
  :group 'wal-workspace)

(defun wal/advise-persp-kill (fun &rest r)
  "Advises FUN to kill processes without querying, applying R.

This only removes `process-kill-buffer-query-function'."
  (let ((kill-buffer-query-functions (delq 'process-kill-buffer-query-function
                                           kill-buffer-query-functions)))
    (apply fun r)))

(defun wal/advise-persp-format-name (&rest args)
  "Truncate non-active perspective name (in ARGS)."
  (let* ((name (car args))
         (curr-name (persp-current-name))
         (names (persp-names))
         (names-len (length names))
         (divider-len (if (> 1 names-len)
                          (+ 1 names-len)
                        2))
         (combined-length (+ divider-len
                             (seq-reduce
                              (lambda (acc item)
                                (+ acc (length item)))
                              names
                              0))))
    (if (and (> combined-length wal/perspective-max-modeline-length)
             (not (string-match-p name curr-name)))
        (substring name 0 1)
      name)))

(defun wal/switch-to-scratch-buffer ()
  "Switch to a perspective's scratch buffer."
  (interactive)
  (switch-to-buffer (get-buffer-create (persp-scratch-buffer))))

(defun wal/consult-persp-current-buffer-names ()
  "Get current perspective's buffer names.

The result is filtered using `consult-buffer-filter'. The current
buffer is also filtered."
  (let ((filters (consult--regexp-filter consult-buffer-filter))
        (current (buffer-name (current-buffer))))
    (seq-filter
     (lambda (it) (and (not (string-match-p filters it))
                  (not (eq it current))))
     (persp-current-buffer-names))))

(defun wal/configure-perspective ()
  "Configure package `perspective'.

This mainly makes sure that switching buffers also switches
perspectives."
  (advice-add 'persp-kill :around #'wal/advise-persp-kill)
  (advice-add 'persp-format-name :filter-return #'wal/advise-persp-format-name)
  (with-eval-after-load 'consult
    (consult-customize
     consult--source-buffer
     :name "Perspective Buffer"
     :action #'persp-switch-to-buffer
     :items #'wal/consult-persp-current-buffer-names))
  (wal/captain
    "i" '(:keymap perspective-map :wk "perspective")))

(use-package perspective
  :if wal/use-perspectives
  :config
  (wal/configure-perspective)
  (persp-mode +1)
  (define-key persp-mode-map (kbd "C-x x") ctl-x-x-map) ; Override the override to `perspective-map'.
  :custom
  (persp-modestring-dividers '(" (" ")" "/")) ; Add space for `doom-modeline'.
  (persp-initial-frame-name wal/default-perspective)
  (persp-state-default-file (expand-file-name "persp-persist" wal/cache-directory))
  :bind
  (:map persp-mode-map
   ("C-x b" . persp-switch-to-buffer)
   ("C-x C-b" . persp-buffer-menu)
   :map perspective-map
   ("x" . wal/switch-to-scratch-buffer)
   ("C-k" . persp-kill-buffer*))
  :wal-bind
  (:map persp-mode-map
   ("i" . persp-switch))
  :hook (kill-emacs . persp-state-save)
  :demand)
#+END_SRC

*** projectile
:PROPERTIES:
:UNNUMBERED: t
:END:

More robust project management.

#+BEGIN_SRC emacs-lisp
(defcustom wal/projectile-globally-ignored-directories
  '("node_modules" "build" "_build")
  "Additional directories to ignore."
  :type '(repeat string)
  :group 'wal-workspace)

(defcustom wal/projectile-globally-ignored-files
  '("yarn.lock" "package.lock" "bundle.js")
  "Additional files to ignore."
  :type '(repeat string)
  :group 'wal-workspace)

(defcustom wal/projectile-globally-ignored-file-suffixes
  '(".min.js" ".js.map")
  "Additional file suffixes to ignore."
  :type '(repeat string)
  :group 'wal-workspace)

(defmacro wal/maybe-use-projectile (func)
  "Maybe use the `projectile' variant for FUNC."
  (let* ((func-name (symbol-name func))
         (projectile-func-name (concat "projectile-" func-name)))
  `(defun ,(intern (concat "wal/maybe-use-projectile-" func-name)) ()
     ,(format "Use `%s' instead of `%s' if in a project." projectile-func-name func-name)
     (interactive)
     (with-demoted-errors "%s"
       (require 'projectile)
       (if (projectile-project-p)
           (call-interactively (symbol-function ',(intern projectile-func-name)))
         (call-interactively (symbol-function ',func)))))))

(defun wal/configure-projectile ()
  "Configure package `projectile'.

This extends all ignore lists' default values."
  (mapc (lambda (it)
          (add-to-list 'projectile-globally-ignored-directories it))
        wal/projectile-globally-ignored-directories)
  (mapc (lambda (it)
          (add-to-list 'projectile-globally-ignored-files it))
        wal/projectile-globally-ignored-files)
  (mapc (lambda (it)
          (add-to-list 'projectile-globally-ignored-file-suffixes it))
        wal/projectile-globally-ignored-file-suffixes)
  (wal/captain
    "p" '(:keymap projectile-command-map :wk "projectile")))

(use-package projectile
  :config
  (wal/configure-projectile)
  (projectile-mode +1)
  :custom
  (projectile-switch-project-action #'projectile-dired)
  (projectile-sort-order 'recentf)
  ;; Allow finding files that are ignored by `.gitignore'.
  (projectile-indexing-method 'hybrid)
  (projectile-enable-caching t)
  :wal-bind
  (:map projectile-mode-map
   ("p" . projectile-switch-project)
   ("h" . projectile-find-file))
  :defer 1
  :delight " pjt")
#+END_SRC

** Footer
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
(provide 'wal-workspace)

;;; wal-workspace.el ends here
#+END_SRC

* Org Mode
:PROPERTIES:
:header-args:emacs-lisp: :tangle (expand-file-name "wal-org.el" wal/emacs-config-package-path)
:END:

The best thing about Emacs. Check out the [[https://orgmode.org/manual/][manual]].

** Header
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
;;; wal-org.el --- Org.

;;; Commentary:
;;
;; Provide org packages/configurations.

;;; Code:

(declare-function wal/disable-tabs "wal-settings.el")
(declare-function projectile-project-root "projectile.el")

(defvar org-global-properties)
(defvar org-mode-map)
(defvar text-scale-mode-step)
(defvar visual-fill-column-width)
(defvar visual-fill-column-center-text)

(defgroup wal-org nil
  "Change settings used for org packages."
  :group 'wal
  :tag "Org")
#+END_SRC

** The Mode Itself

*** org
:PROPERTIES:
:UNNUMBERED: t
:END:

#+BEGIN_SRC emacs-lisp
(defun wal/org-mode ()
  "Hook into `org-mode'."
  (message "Organize! Seize the means of production!")
  ;; Since `9.4' org tries to please `electric-indent'.
  ;; (electric-indent-local-mode -1)
  (wal/disable-tabs)
  (hack-local-variables))

(defun wal/advise-org-export-dispatch (&rest _r)
  "Advise to require `ox-md' before export dispatch."
  (unless (featurep 'ox-md)
    (require 'ox-md nil t)))

(defun wal/org-content (level)
  "Show up to given LEVEL.
This calls `org-content' interactively."
  (interactive "nShow content up to level: ")
  (when (fboundp 'org-content)
    (org-content level)))

(defun wal/configure-org ()
  "Configure `org'."
  (define-key org-mode-map (kbd "C-,") nil) ; Remove `org-cycle-agenda-files'.
  (advice-add
   'org-export-dispatch
   :before #'wal/advise-org-export-dispatch)
  (add-to-list 'org-global-properties
	           '("Effort_ALL". "15min 30min 1h 1.5h 2h 2.5h 4h 6h 1d 1.5d 2d")))

(use-package org
  :config
  (wal/configure-org)
  :custom
  (org-adapt-indentation nil) ; Defaults to `t' nowadays ...
  (org-ellipsis "↷")
  (org-hide-emphasis-markers t)
  (org-log-done 'time)
  (org-log-note-clock-out t)
  (org-startup-folded 'overview)
  (org-directory wal/org-directory)
  (org-default-notes-file (concat org-directory "/notes.org"))
  (org-agenda-files `(,wal/agenda-tasks-directory))
  (org-deadline-warning-days 2)
  (org-startup-with-inline-images t)
  ;; Be sure to add archive tag with `org-toggle-archive-tag'.
  (org-archive-location "::* Archived")
  ;; Too many clock entries clutter up a heading.
  (org-log-into-drawer t)
  (org-todo-keywords
   '((sequence "TODO(t)" "IN PROGRESS(p)" "WAITING(w)" "BLOCKED(b)" "|" "DONE(d)" "CANCELED(c)")))
  (org-tag-alist
   '(;; Depth.
     ("@immersive" . ?i)
     ("@process" . ?p)
     ;; Context.
     ("@work" . ?w)
     ("@home" . ?h)
     ("@away" . ?a)
     ("@repeated" . ?r)
     ("@unbillable" . ?u)
     ("@intermittent" . ?m)
     ;; Energy.
     ("@easy" . ?1)
     ("@average" . ?2)
     ("@challenge" . ?3)
     ;; Category.
     ("@dev" . ?d)
     ("@bla" . ?b)
     ("@edu" . ?e)))
  :general
  (wal/captain-sink :keymaps 'org-mode-map :major-modes t
    "i" '(org-indent-mode :wk "org-indent"))
  (wal/major :keymaps 'org-mode-map :major-modes t
    "s" '(:ignore t :wk "subtree")
    "sw" '(org-cut-subtree :wk "cut subtree")
    "sy" '(org-paste-subtree :wk "paste subtree")
    "S" '(:ignore t :wk "show")
    "Sa" '(org-show-all :wk "all")
    "Sl" '(wal/org-content :wk "level")
    "n" '(org-add-note :wk "add note"))
  :hook (org-mode . wal/org-mode)
  :ensure nil)
#+END_SRC

** Agendas

*** org-agenda
:PROPERTIES:
:UNNUMBERED: t
:END:

#+BEGIN_SRC emacs-lisp
(use-package org-agenda
  :custom
  (org-agenda-hide-tags-regexp "^@")
  (org-agenda-span 'day)
  (org-agenda-restore-windows-after-quit t)
  (org-agenda-time-leading-zero t)
  (org-agenda-log-mode-items '(clock))
  (org-agenda-clockreport-parameter-plist
   '(:link t
     :maxlevel 3
     :fileskip0 t
     :emphasize t
     :match "-@unbillable"))
  :bind
  ("C-c a" . org-agenda)
  :ensure nil)
#+END_SRC

*** org-super-agenda
:PROPERTIES:
:UNNUMBERED: t
:END:

Allow for better grouping.

#+BEGIN_SRC emacs-lisp
(defcustom wal/org-super-agenda-groups
  '((:name "Schedule"
     :time-grid t)
    (:name "Unscheduled"
     :and (:scheduled nil
           :not (:tag "@intermittent" :todo "BLOCKED")))
    (:name "Leftovers"
     :and (:todo ("IN PROGRESS" "WAITING")
           :scheduled past
           :not (:tag "@repeated" :tag "@edu")))
    (:name "Blocked"
     :todo "BLOCKED")
    (:discard (:anything t)))
  "The super agenda groups."
  :type '(repeat plist)
  :group 'wal-org)

(use-package org-super-agenda
  :config
  (org-super-agenda-mode)
  :custom
  (org-super-agenda-groups wal/org-super-agenda-groups)
  :demand
  :after org-agenda)
#+END_SRC

** Zettelkasten

Trying to organize my thoughts using Zettelkästen.

/Note/ that you will need to install =sqlite3= and =graphviz= manually.

*** org-roam
:PROPERTIES:
:UNNUMBERED: t
:END:

#+BEGIN_SRC emacs-lisp
(defcustom wal/org-roam-dailies-directory "tagebuch/"
  "The directory for dailies."
  :type 'string
  :group 'wal-org)

(use-package org-roam
  :if (executable-find "sqlite3")
  :init
  (setq org-roam-v2-ack t)
  :config
  (org-roam-db-autosync-enable)
  (wal/captain
    "zd" '(org-roam-dailies-goto-date :wk "dailies"))
  :custom
  (org-roam-directory wal/org-roam-directory)
  (org-roam-dailies-directory wal/org-roam-dailies-directory)
  :general
  (wal/captain
    "z" '(:ignore t :wk "roam")
    "za" '(:ignore t :wk "actions")
    "zaf" '(org-roam-node-find :wk "find")
    "zac" '(org-roam-capture :wk "capture")
    "zr" '(org-roam-buffer-display-dedicated :wk "roam buffer"))
  (wal/captain :keymaps 'org-mode-map :major-modes t
    "zai" '(org-roam-node-insert :wk "insert node"))
  (wal/captain :keymaps 'org-roam-mode-map
    "zV" '(:ignore t :wk "visualize")
    "zVg" '(org-roam-graph :wk "write graph"))
  :commands
  (org-roam-buffer-display-dedicated
   org-roam-capture
   org-roam-node-create
   org-roam-node-find
   org-roam-node-read))
#+END_SRC

*** org-roam-ui
:PROPERTIES:
:UNNUMBERED: t
:END:

Fancy UI.

#+BEGIN_SRC emacs-lisp
(use-package websocket)
(use-package simple-httpd)

(use-package org-roam-ui
  :general
  (wal/captain :keymaps 'org-roam-mode-map
    "zVu" '(org-roam-ui-mode :wk "ui mode"))
  :after org-roam
  :demand
  :load-path "site-lisp")
#+END_SRC

** Presentations

*** org-tree-slide
:PROPERTIES:
:UNNUMBERED: t
:END:

Turn any =org-mode= buffer into a presentation.

#+BEGIN_SRC emacs-lisp
(defcustom wal/org-tree-slide-visual-fill-column-width 160
  "The base `visual-fill-column-width' for `org-tree-slide' presentations."
  :type 'integer
  :group 'wal-org)

(defun wal/relative-column-width (&optional target-width)
  "Get the relative column width of TARGET-WIDTH."
  (let ((width (or target-width 160))
        (scale (if (and (boundp 'text-scale-mode-amount)
                        (numberp text-scale-mode-amount))
                   (expt text-scale-mode-step text-scale-mode-amount)
                 1)))
    (ceiling (/ width scale))))

(defun wal/org-tree-slide-toggle-visibility ()
  "Toggle visibility of cursor."
  (interactive)
  (if cursor-type
      (setq cursor-type nil)
    (setq cursor-type t)))

(defun wal/org-tree-slide-play ()
  "Hook into `org-tree-slide-play'."
  (setq visual-fill-column-width (wal/relative-column-width
                                  wal/org-tree-slide-visual-fill-column-width)
        visual-fill-column-center-text t
        cursor-type nil)
  (beacon-mode -1)
  (visual-fill-column-mode 1)
  (mixed-pitch-mode +1))

(defun wal/org-tree-slide-stop ()
  "Hook into `org-tree-slide-stop'."
  (setq visual-fill-column-width nil
        visual-fill-column-center-text nil
        cursor-type t)
  (beacon-mode 1)
  (visual-fill-column-mode -1)
  (when (fboundp 'outline-show-all)
    (outline-show-all))
  (mixed-pitch-mode -1))

(defun wal/org-tree-slide-text-scale ()
  "Hook into `text-scale-mode-hook' for `org-tree-slide'."
  (when (and (boundp 'org-tree-slide-mode) org-tree-slide-mode)
    (wal/org-tree-slide-play)))

(use-package org-tree-slide
  :custom
  (org-tree-slide-never-touch-face t)
  (org-tree-slide-cursor-init nil)
  (org-tree-slide-activate-message "We're on a road to nowhere")
  (org-tree-slide-deactivate-message "Take you here, take you there")
  (org-tree-slide-indicator '(:next "   >>>" :previous "<<<" :content "< Here is where time is on our side >"))
  :bind
  (:map org-tree-slide-mode-map
   ("q" . org-tree-slide-mode) ; To close it again.
   ("n" . org-tree-slide-move-next-tree)
   ("p" . org-tree-slide-move-previous-tree)
   ("i" . text-scale-increase)
   ("d" . text-scale-decrease)
   ("v" . wal/org-tree-slide-toggle-visibility))
  :general
  (wal/major :keymaps 'org-mode-map :major-modes t
    "P" '(org-tree-slide-mode :wk "present"))
  :hook
  ((org-tree-slide-play . wal/org-tree-slide-play)
   (org-tree-slide-stop . wal/org-tree-slide-stop)
   (text-scale-mode . wal/org-tree-slide-text-scale))
  :diminish buffer-face-mode)
#+END_SRC

** Editing

*** org-src
:PROPERTIES:
:UNNUMBERED: t
:END:

Editing source blocks.

#+BEGIN_SRC emacs-lisp
(defcustom wal/org-src-lang-modes
  '(("dockerfile" . dockerfile)
    ("conf" . conf)
    ("markdown" . markdown))
  "Additional mappings to add to `org-src-lang-modes'."
  :type '(repeat
	      (cons
	       (string "Language name")
	       (symbol "Major mode")))
  :group 'wal-org)

(defun wal/org-src-mode ()
  "Hook into function `org-src-mode'."
  (setq-local flycheck-disabled-checkers '(emacs-lisp-checkdoc)))


(defun wal/configure-org-src ()
  "Configure package `org-src'.

This sets additional modes."
  (mapc (lambda (it)
          (add-to-list 'org-src-lang-modes it))
        wal/org-src-lang-modes))

(use-package org-src
  :config
  (wal/configure-org-src)
  :custom
  (org-src-tab-acts-natively nil) ; Defaults to t nowadays.
  (org-edit-src-content-indentation 0) ; Defaults to 2 nowadays.
  :bind
  (:map org-src-mode-map
   ("C-c C-c" . org-edit-src-exit))
  :general
  (wal/major :keymaps 'org-mode-map :major-modes t
    "c" '(org-edit-src-code :wk "edit source code"))
  :hook (org-src-mode . wal/org-src-mode)
  :after org
  :ensure nil
  :delight " osc")
#+END_SRC

*** org-capture
:PROPERTIES:
:UNNUMBERED: t
:END:

Capture templates.

#+BEGIN_SRC emacs-lisp
(defun wal/org-capture-find-project-tasks ()
  "Find a project's tasks file.

If the project root cannot be determined, use
`wal/org-directory'. as destination."
  (expand-file-name "tasks.org" (or (projectile-project-root) org-directory)))

(use-package org-capture
  :custom
  (org-capture-templates
   `(("c" "current task" plain
      (clock)
      "\n%?\n"
      :empty-lines-before 1)
     ("d" "daily" plain
      (file+olp+datetree ,(concat org-directory "/dailies.org"))
      "%i\n%?")
     ("p" "project task" entry
      (file+headline wal/org-capture-find-project-tasks "Tasks")
      "* TODO %?\n\n%F\n\n%i"
      :empty-lines-before 1)))
  ;; This leads to endless edit buffers opening since we annotate bookmarks
  (org-capture-bookmark nil)
  :general
  (wal/colonel
    "c" '(org-capture :wk "capture"))
  :ensure nil
  :delight " cap")
#+END_SRC

*** org-footnote
:PROPERTIES:
:UNNUMBERED: t
:END:

Quick adding and normalizing.

#+BEGIN_SRC emacs-lisp
(use-package org-footnote
  :general
  (wal/major :keymaps 'org-mode-map :major-modes t
    "F" '(:ignore t :wk "footnotes")
    "Fn" '(org-footnote-new :wk "new")
    "Fo" '(org-footnote-normalize :wk "normalize"))
  :after org
  :ensure nil)
#+END_SRC

** Other

*** org-babel
:PROPERTIES:
:UNNUMBERED: t
:END:

Convenient (and less safe) source block interaction.

#+BEGIN_SRC emacs-lisp
(use-package ob
  :custom
  (org-babel-load-languages '((emacs-lisp . t)
                              (shell . t)
                              (python .t)
                              (latex . t)
                              (js . t)))
  (org-confirm-babel-evalute nil)
  :general
  (wal/major :keymaps 'org-mode-map
    "B" '(:keymap org-babel-map :wk "babel"))
  :ensure nil)
#+end_src

*** org-clock
:PROPERTIES:
:UNNUMBERED: t
:END:

You know the drill. Clock in, clock out.

#+BEGIN_SRC emacs-lisp
(defun wal/org-clock-in-switch-to-state (todo-state)
  "Only switch state to IN PROGRESS if TODO-STATE was given."
  (when todo-state
    "IN PROGRESS"))

(use-package org-clock
  :custom
  (org-clock-idle-time 60)
  (org-clock-continuously t)
  (org-clock-persist t)
  (org-clock-in-switch-to-state 'wal/org-clock-in-switch-to-state)
  (org-clock-in-resume t)
  (org-clock-report-include-clocking-task t)
  (org-clock-out-remove-zero-time-clocks t)
  (org-clock-into-drawer t)
  :after org
  :ensure nil)
#+END_SRC

*** org-duration
:PROPERTIES:
:UNNUMBERED: t
:END:

Set up durations for a 40-hour week.

#+BEGIN_SRC emacs-lisp
(use-package org-duration
  :custom
  (org-duration-units `(("min" . 1)
                        ("h" . 60)
                        ("d" . ,(* 60 8))
                        ("w" . ,(* 60 8 5))
                        ("m" . ,(* 60 8 5 4))
                        ("y" . ,(* 60 8 5 4 11))))
  :after org
  :ensure nil)
#+END_SRC

*** org-keys
:PROPERTIES:
:UNNUMBERED: t
:END:

Add some user speed commands.

#+BEGIN_SRC emacs-lisp
(defcustom wal/org-speed-commands '(("a" . org-archive-subtree)
                                    ("j" . consult-org-heading))
  "Changes to `org-speed-commands'."
  :type '(repeat
          (cons "Key")
          (symbol "Command"))
  :group 'wal-org)

(use-package org-keys
  :config
  (mapc (lambda (it)
          (let ((key (car it))
                (val (cdr it)))
            (setcdr (assoc key org-speed-commands) val)))
        wal/org-speed-commands)
  :custom
  (org-use-speed-commands t)
  (org-return-follows-link t)
  :after org
  :ensure nil)
#+END_SRC

*** org-bullets
:PROPERTIES:
:UNNUMBERED: t
:END:

Prettier headlines.

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :custom
  (org-bullets-bullet-list '("◆" "◈" "►" "▻" "▸" "▹" "•"))
  :hook (org-mode . org-bullets-mode))
#+END_SRC

** Footer
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
(provide 'wal-org)

;;; wal-org.el ends here
#+END_SRC

* Dired
:PROPERTIES:
:header-args:emacs-lisp: :tangle (expand-file-name "wal-dired.el" wal/emacs-config-package-path)
:END:

Run =dired= with =C-x d=.

** Header
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
;;; wal-dired.el --- Dired.

;;; Commentary:
;;
;; Provide Dired packages.

;;; Code:

(declare-function dired-read-dir-and-switches "dired.el")

(defun wal/dired-from-home (dirname &optional switches)
  "Find DIRNAME local to HOME directory.
Uses the same optional SWITCHES."
  (interactive (let ((default-directory (expand-file-name "~/")))
                 (dired-read-dir-and-switches "")))
  (pop-to-buffer-same-window (dired-noselect dirname switches)))

(defun wal/image-dired ()
  "Run `image-dired' in the `default-directory'."
  (interactive)
  (image-dired (expand-file-name default-directory)))
#+END_SRC

** Packages

*** dired
:PROPERTIES:
:UNNUMBERED: t
:END:

The mother of all buffers. You don't need no tree views.

#+BEGIN_SRC emacs-lisp
(use-package dired
  :config
  (put 'dired-find-alternate-file 'disabled nil)
  (define-key dired-mode-map (kbd "C-o") nil) ; Removes `dired-display-file'.
  :custom
  (dired-listing-switches "-lah --group-directories-first")
  (dired-auto-revert-buffer t)
  (dired-kill-when-opening-new-dired-buffer t) ;; New in Emacs 28.1.
  :wal-bind
  ("<SPC>" . dired-jump)
  :bind
  (:map ctl-x-map
   ("j" . dired-jump)
   :map ctl-x-x-map
   ("d" . wal/dired-from-home)
   ("j" . dired-jump-other-window)
   :map dired-mode-map
   ("." . dired-up-directory) ; Overrides `dired-clean-directory'.
   ("," . dired-display-file))
  :general
  (wal/major :keymaps 'dired-mode-map :major-modes t
    "t" '(dired-create-empty-file :wk "create empty file")
    "V" '(:ignore t :wk "visualization")
    "Vi" '(wal/image-dired :wk "show images"))
  :ensure nil)
#+END_SRC

*** dired-filter
:PROPERTIES:
:UNNUMBERED: t
:END:

Hit =/= to filter in dired buffers.

#+BEGIN_SRC emacs-lisp
(use-package dired-filter
  :delight " drf"
  :demand
  :after dired)
#+END_SRC

*** diredfl
:PROPERTIES:
:UNNUMBERED: t
:END:

Highlighting in dired buffers.

#+BEGIN_SRC emacs-lisp
(use-package diredfl
  :config
  (diredfl-global-mode)
  :demand
  :after dired)
#+END_SRC

*** wdired
:PROPERTIES:
:UNNUMBERED: t
:END:

Did you know you can edit =dired= buffers using =C-x C-q=?

#+BEGIN_SRC emacs-lisp
(use-package wdired
  :custom
  (wdired-allow-to-change-permissions t)
  :bind
  (:map wdired-mode-map
   ("C-c C-k" . wdired-abort-changes))
  :ensure nil)
#+END_SRC

** Footer
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
(provide 'wal-dired)

;;; wal-dired.el ends here
#+END_SRC

* Terminal
:PROPERTIES:
:header-args:emacs-lisp: :tangle (expand-file-name "wal-terminal.el" wal/emacs-config-package-path)
:END:

#+BEGIN_QUOTE
I am convinced that we are in a terminal process.
— E. P. Thompson
#+END_QUOTE

** Header
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
;;; wal-terminal.el --- Terminal.

;;; Commentary:
;;
;; Provide terminal packages.

;;; Code:

(declare-function wal/display-buffer-in-side-window "wal-func.el")

(defvar eshell-highlight-prompt)
(defvar eshell-prompt-function)
#+END_SRC

** Packages

*** vterm
:PROPERTIES:
:UNNUMBERED: t
:END:

=vterm= is better[fn:16] than included shells.

Some common shell commands require an additional =C-c=:

+ =C-c C-c= to send =C-c=.
+ =C-c C-g= to send =C-g=.
+ =C-c C-u= to send =C-u=.
+ =C-c C-t= to enter/exit =copy-mode=.

#+BEGIN_SRC emacs-lisp
(defun wal/vterm-mode ()
  "Hook into `vterm-mode'.

This disables `ctrlf-mode' locally and sets the query on exit
flag to nil for the vterm process."
  (ctrlf-local-mode -1)
  (when-let* ((buf (current-buffer))
              (proc (get-buffer-process buf)))
    (set-process-query-on-exit-flag proc nil)))

(use-package vterm
  :config
  (wal/display-buffer-in-side-window (concat "\\" vterm-buffer-name) :height 15)
  :custom
  (vterm-kill-buffer-on-exit t)
  :hook
  ((vterm-mode . wal/vterm-mode)
   (vterm-mode . with-editor-export-editor)
   (vterm-mode . with-editor-export-git-editor))
  :delight
  (vterm-copy-mode " vcp"))

(use-package vterm-toggle
  :custom
  (vterm-toggle-fullscreen-p nil)
  (vterm-toggle-scope 'project)
  :wal-bind
  ("\\" . vterm-toggle))
#+END_SRC

*** eshell
:PROPERTIES:
:UNNUMBERED: t
:END:

Set up =eshell=. I like the idea of it but I don't really use it.

#+BEGIN_SRC emacs-lisp
(defun wal/advise-eshell/clear (&rest _r)
  "Advise to truncate buffer."
  (let ((eshell-buffer-maximum-lines 0))
    (when (fboundp 'eshell-truncate-buffer)
      (eshell-truncate-buffer))))

(use-package esh-autosuggest
  :hook (eshell-mode . esh-autosuggest-mode))

(use-package eshell-prompt-extras
  :config
  (setq eshell-highlight-prompt nil
        eshell-prompt-function 'epe-theme-lambda)
  :demand
  :after eshell)

(use-package eshell-syntax-highlighting
  :hook (eshell-mode . eshell-syntax-highlighting-mode))

(use-package eshell
  :config
  (advice-add 'eshell/clear :override #'wal/advise-eshell/clear)
  (wal/display-buffer-in-side-window "*eshell*" :height 15 :loose t)
  :bind
  (:map eshell-mode-map
   ([remap eshell-pcomplete] . completion-at-point))
  :general
  (wal/general-sink "e" '(eshell :wk "eshell"))
  :hook
  ((eshell-mode . with-editor-export-editor)
   (eshell-mode . with-editor-export-git-editor))
  :ensure nil)
#+END_SRC

** Footer
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
(provide 'wal-terminal)

;;; wal-terminal.el ends here
#+END_SRC

* Version Control
:PROPERTIES:
:header-args:emacs-lisp: :tangle (expand-file-name "wal-vc.el" wal/emacs-config-package-path)
:END:

I'm becoming an old git.

** Header
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
;;; wal-vc.el --- Version control.

;;; Commentary:
;;
;; Provide version control packages.

;;; Code:

(declare-function wal/captain "wal-key-bindings.el")
#+END_SRC

** Packages

*** magit
:PROPERTIES:
:UNNUMBERED: t
:END:

Forget remembering =git= commands, use =transient=.

#+BEGIN_SRC emacs-lisp
(use-package magit
  :custom
  (magit-display-buffer-function 'magit-display-buffer-fullframe-status-v1)
  (magit-blame-mode-lighter " mbl")
  (magit-bury-buffer-function 'magit-restore-window-configuration)
  :wal-bind
  ("m" . magit-status)
  :general
  (wal/lieutenant
    "m" '(:ignore t :wk "magit")
    "mf" '(magit-find-file :wk "find file")
    "mo" '(magit-find-file-other-window :wk "find file other window")
    "md" '(magit-diff-range :wk "diff range")))
#+END_SRC

*** forge
:PROPERTIES:
:UNNUMBERED: t
:END:

#+BEGIN_SRC emacs-lisp
(use-package forge)
#+END_SRC

*** code-review
:PROPERTIES:
:UNNUMBERED: t
:END:

#+BEGIN_SRC emacs-lisp
(use-package code-review
  :general
  (wal/major :keymaps 'forge-topic-mode-map
    "r" '(code-review-forge-pr-at-point :wk "code review")))
#+END_SRC


*** git-timemachine
:PROPERTIES:
:UNNUMBERED: t
:END:

If you want to go back in time and point fingers at the progenitors of doom.

#+BEGIN_SRC emacs-lisp
(use-package git-timemachine
  :general
  (wal/captain-sink :keymaps '(prog-mode-map yaml-mode-map)
    "t" '(git-timemachine-toggle :wk "git-timemachine"))
  :delight " gtm")
#+END_SRC

*** git-modes
:PROPERTIES:
:UNNUMBERED: t
:END:

Syntax highlighting.

#+BEGIN_SRC emacs-lisp
(defun wal/gitignore-mode ()
  "Hook into `gitignore-mode'."
  (message "I don't think I know you"))

(use-package git-modes
  :mode (("/\\.npmignore\\'" . gitignore-mode)
         (".projectile" . gitignore-mode)
         ("/\\.dockerignore" . gitignore-mode))
  :hook (gitignore-mode . wal/gitignore-mode))
#+END_SRC

*** smerge-mode
:PROPERTIES:
:UNNUMBERED: t
:END:

When resolving conflicts, using =ours= and =theirs= should be easy.

#+BEGIN_SRC emacs-lisp
(use-package smerge-mode
  :config
  (wal/captain :keymaps 'smerge-mode-map
    "m" '(:keymap smerge-basic-map :wk "smerge"))
  :ensure nil
  :delight " smg")
#+END_SRC

*** ediff
:PROPERTIES:
:UNNUMBERED: t
:END:

Use a single frame and split horizontally when diffing.

#+BEGIN_SRC emacs-lisp
(use-package ediff
  :custom
  (ediff-window-setup-function #'ediff-setup-windows-plain) ; Single frame.
  (ediff-split-window-function #'split-window-horizontally)
  :ensure nil)
#+END_SRC

*** blamer
:PROPERTIES:
:UNNUMBERED: t
:END:

Per-line blaming.

#+BEGIN_SRC emacs-lisp
(use-package blamer
  :general
  (wal/captain-sink "b" '(blamer-mode :wk "blamer"))
  :load-path "site-lisp")
#+END_SRC

** Footer
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
(provide 'wal-vc)

;;; wal-vc.el ends here
#+END_SRC

* Languages
:PROPERTIES:
:header-args:emacs-lisp: :tangle (expand-file-name "wal-lang.el" wal/emacs-config-package-path)
:END:

Let's greet the world.

** Header
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
;;; wal-lang.el --- Languages.

;;; Commentary:
;;
;; Provide Emacs settings/configurations.

;;; Code:

(declare-function poetry-ensure-in-project "poetry.el")
(declare-function poetry-get-virtualenv "poetry.el")
(declare-function poetry-venv-exist-p "poetry.el")
(declare-function wal/biased-random "wal-func.el")
(declare-function wal/disable-tabs "wal-settings.el")
(declare-function wal/lsp "wal-lsp.el")
(declare-function wal/maybe-enable-tabs "wal-settings.el")

(defun wal/message-in-a-bottle (bottle)
  "Randomly display a message from the given BOTTLE.

That bottle is just an array of strings."
  (let* ((rand (wal/biased-random (length bottle)))
         (mess (nth rand bottle)))
    (message mess)))
#+END_SRC

** Elixir

*** elixir-mode
:PROPERTIES:
:UNNUMBERED: t
:END:

#+BEGIN_SRC emacs-lisp
(defun wal/elixir-mode ()
  "Hook into `elixir-mode'."
  (wal/message-in-a-bottle '("Mixin' potions"
                             "A hex on you"))
  (wal/disable-tabs)
  (hack-local-variables)
  (wal/lsp))

(use-package elixir-mode
  :hook (elixir-mode . wal/elixir-mode))
#+END_SRC

** C

I want to be ready for =jai=.

*** cc-mode
:PROPERTIES:
:UNNUMBERED: t
:END:

#+BEGIN_SRC emacs-lisp
(defun wal/c++-mode ()
  "Hook into `c++-mode'."
  (wal/message-in-a-bottle '("Make tidy! Make clean!"
                             "Serenity now!"))
  (wal/disable-tabs)
  (hack-local-variables)
  (wal/lsp))

(use-package cc-mode
  :config
  ;; Eliminates conflicts with `delight'.
  (advice-add 'c-update-modeline :override #'ignore)
  :general
  (wal/major :keymaps 'c++-mode-map :major-modes t
    "S" '(:ignore t :wk "style")
    "Ss" '(c-set-style :wk "set")
    "Sg" '(c-guess-install :wk "guess"))
  :hook (c++-mode . wal/c++-mode)
  :ensure nil)
#+END_SRC

** Rust

Consider the lobster.

*** rust-mode
:PROPERTIES:
:UNNUMBERED: t
:END:

Follow [[https://rust-analyzer.github.io/manual.html#rust-analyzer-language-server-binary][these instructions]] to download the =rust-analyzer= binary.

#+BEGIN_SRC emacs-lisp
(defun wal/rust-mode ()
  "Hook into `rust-mode'."
  (wal/message-in-a-bottle '("Consider the lobster"))
  (wal/disable-tabs)
  (hack-local-variables)
  (wal/lsp))

(use-package rust-mode
  :if (executable-find "cargo")
  :general
  (wal/major :keymaps 'rust-mode-map :major-modes t
    "c" '(rust-compile :wk "compile")
    "r" '(rust-run :wk "run")
    "t" '(:ignore t :wk "test")
    "tt" '(rust-test :wk "all"))
  :hook (rust-mode . wal/rust-mode))
#+END_SRC

*** cargo
:PROPERTIES:
:UNNUMBERED: t
:END:

#+BEGIN_SRC emacs-lisp
(use-package cargo
  :general
  (wal/major :keymaps 'rust-mode-map :major-modes t
    "tc" '(cargo-process-current-test :wk "current")
    "tf" '(cargo-process-current-file-tests :wk "file"))
  :demand
  :after rust-mode)
#+END_SRC

** Python

*** python-mode
:PROPERTIES:
:UNNUMBERED: t
:END:

Use snake when you can't =make=.

#+BEGIN_SRC emacs-lisp
(defun wal/python-mode ()
  "Hook into `python-mode'."
  (wal/message-in-a-bottle '("Watch out for snakes!"
                             "Vegetation, aggravation"))
  (wal/disable-tabs)
  (setq-local comment-inline-offset 2)
  (hack-local-variables)
  (wal/activate-venv)
  (wal/lsp))

(use-package python
  :config
  ;; Treat inferior shell as a pop-up.
  (wal/display-buffer-in-side-window 'inferior-python-mode)
  (with-eval-after-load 'dap-mode
    (require 'dap-python))
  :general
  (wal/major :keymaps 'python-mode-map :major-modes t
    "i" '(:ignore t :wk "inferior shell")
    "iR" '(run-python :wk "run")
    "ir" '(python-shell-send-region :wk "send region")
    "ib" '(python-shell-send-buffer :wk "send buffer")
    "if" '(python-shell-send-file :wk "send file"))
  :hook (python-mode . wal/python-mode)
  :ensure nil)
#+END_SRC

*** Virtual Envs

It takes more than one environment to make sense of Python code.

#+BEGIN_SRC emacs-lisp
(defun wal/configure-lsp-server (venv)
  "Configure poetry-managed server using VENV."
  (let ((pylsp (file-exists-p (expand-file-name "bin/pylsp" venv)))
        (jedi-env (expand-file-name (poetry-get-virtualenv))))
    (when pylsp
      (setq-local lsp-pylsp-server-command '("poetry" "run" "pylsp"))
      (setq-local lsp-pylsp-plugins-jedi-environment jedi-env))))

(defun wal/activate-venv ()
  "Activate venv using poetry.

This also works if the project isn't a poetry project."
  (ignore-errors
    (let* ((venv (poetry-venv-exist-p))
           (is-poetry (poetry-find-project-root)))
      (when venv
        (if is-poetry
            (progn
              (wal/configure-lsp-server venv)
              (poetry-venv-workon))
          (pyvenv-activate venv))))))
#+END_SRC

**** pyvenv
:PROPERTIES:
:UNNUMBERED: t
:END:

Activating =virtualenv= inside of Emacs.

#+BEGIN_SRC emacs-lisp
(use-package pyvenv
  :general
  (wal/major :keymaps 'python-mode-map :major-modes t
    "v" '(pyvenv-activate :wk "activate venv")))
#+END_SRC

**** poetry
:PROPERTIES:
:UNNUMBERED: t
:END:

=poetry= is like =npm= for Python, it's why it rhymes.

#+BEGIN_SRC emacs-lisp
(use-package poetry
  :config
  (wal/display-buffer-in-side-window "\\*poetry-shell\\*")
  :general
  (wal/major :keymaps 'python-mode-map :major-modes t
    "p" '(poetry :wk "poetry"))
  :commands (poetry-venv-exist-p))
#+END_SRC

** Lisp

*** elisp-mode
:PROPERTIES:
:UNNUMBERED: t
:END:

The philosopher's choice.

#+BEGIN_SRC emacs-lisp
(defun wal/elisp-mode ()
  "Hook into `emacs-lisp-mode'."
  (wal/message-in-a-bottle '("So it's just a bunch of lists?"
                             "List your lambdas"))
  (wal/disable-tabs)
  (hack-local-variables)
  (flycheck-mode 1))

(use-package elisp-mode
  :general
  (wal/major
    :keymaps '(emacs-lisp-mode-map lisp-interaction-mode-map)
    :major-modes t
    "Hp" '(check-parens :wk "check parens"))
  :hook (emacs-lisp-mode . wal/elisp-mode)
  :ensure nil)
#+END_SRC

*** edebug
:PROPERTIES:
:UNNUMBERED: t
:END:

Evaluate from the right, edebug from the left.

#+BEGIN_SRC emacs-lisp
(use-package edebug
  :general
  (wal/major
    :keymaps '(emacs-lisp-mode-map lisp-interaction-mode-map)
    :major-modes t
    "d" '(edebug-defun :wk "debug function"))
  :ensure nil)
#+END_SRC

*** highlight-quoted
:PROPERTIES:
:UNNUMBERED: t
:END:

#+BEGIN_SRC emacs-lisp
(use-package highlight-quoted
  :hook (emacs-lisp-mode . highlight-quoted-mode))
#+END_SRC

*** slime
:PROPERTIES:
:UNNUMBERED: t
:END:

Check out the [[https://lispcookbook.github.io/cl-cookbook/getting-started.html][lisp cookbook]] for =slime=.

#+BEGIN_SRC emacs-lisp
(use-package slime
  :config
  (setq inferior-lisp-program "sbcl")
  (slime-setup '(slime-fancy slime-quicklisp slime-asdf slime-company))
  :general
  (wal/captain-sink :keymaps 'lisp-mode-map :major-modes t
    "u" '(slime-mode :wk "slime"))
  (wal/major :keymaps 'slime-mode-map :major-modes t
    "r" '(slime :wk "open REPL"))
  :ensure-system-package sbcl
  :delight " slm")

(use-package slime-company)
#+END_SRC

** JavaScript

Can we have =deno= instead of =node=?

*** js2-mode
:PROPERTIES:
:UNNUMBERED: t
:END:

#+BEGIN_SRC emacs-lisp
(defun wal/js2-mode ()
  "Hook into `js2-mode'."
  (wal/message-in-a-bottle '("NaN !== NaN"
                             "Null falsy values or undefined"))
  (add-node-modules-path)
  (hack-local-variables)
  (wal/maybe-enable-tabs)
  (wal/lsp))

(use-package js2-mode
  :config
  ;; Don't override `xref-find-definitions'.
  (define-key js2-mode-map (kbd "M-.") nil)
  (with-eval-after-load 'dap-mode
    (require 'dap-node))
  :custom
  (js2-show-parse-errors nil)
  (js2-highlight-level 3)
  (js2-mode-show-strict-warnings nil)
  (js2-include-node-externs t)
  :bind
  (:map js2-mode-map
   ("<backtab>" . js2-indent-bounce)) ; `js2-bounce-indent-p' also binds <TAB>
  :mode "\\.js\\'"
  :hook (js2-mode . wal/js2-mode))
#+END_SRC

*** rjsx-mode
:PROPERTIES:
:UNNUMBERED: t
:END:

Improved editing for JSX files. Extends =js2=.

#+BEGIN_SRC emacs-lisp
(defun wal/rjsx-mode ()
  "Hook into `rjsx-mode'."
  (message "Extend those ugly JavaScripts of yours!")
  (wal/maybe-enable-tabs :indent 'js-jsx-indent-line))

(use-package rjsx-mode
  :mode "\\.jsx\\'"
  :hook (rjsx-mode . wal/rjsx-mode))
#+END_SRC

*** typescript-mode
:PROPERTIES:
:UNNUMBERED: t
:END:

Please use TypeScript.

#+BEGIN_SRC emacs-lisp
(defun wal/typescript-mode ()
  "Hook into `typescript-mode'."
  (message "This is any, that is any, everything is any!")
  (add-node-modules-path)
  (hack-local-variables)
  (wal/maybe-enable-tabs)
  (wal/lsp))

(use-package typescript-mode
  :mode "\\.ts\\'"
  :hook (typescript-mode . wal/typescript-mode))
#+END_SRC

*** json-mode
:PROPERTIES:
:UNNUMBERED: t
:END:

The only way to store strings, JSON.

#+BEGIN_SRC emacs-lisp
(defun wal/json-mode ()
  "Hook into `json-mode'."
  (message "JSON ...? JSON?! JSON!!")
  (rainbow-delimiters-mode)
  (hack-local-variables)
  (wal/maybe-enable-tabs)
  (flycheck-mode 1))

(use-package json-mode
  :mode "\\.arb\\'"
  :hook (json-mode . wal/json-mode))
#+END_SRC

*** add-node-modules-path
:PROPERTIES:
:UNNUMBERED: t
:END:

Allow accessing a project's =node_modules=.

#+BEGIN_SRC emacs-lisp
(use-package add-node-modules-path
  :defer t)
#+END_SRC

*** prettier
:PROPERTIES:
:UNNUMBERED: t
:END:

Prettify your ugly JavaScript.

#+BEGIN_SRC emacs-lisp
(use-package prettier
  :general
  (wal/major :keymaps '(js2-mode-map typescript-mode-map) :major-modes t
    "p" '(prettier-prettify :wk "run prettier")))
#+END_SRC

** Go

*** go-mode
:PROPERTIES:
:UNNUMBERED: t
:END:

Setup for LSP.

#+BEGIN_SRC emacs-lisp
(defun wal/go-mode ()
  "Hook into `go-mode'."
  (wal/message-in-a-bottle '("What does Sonic say?"
                             "Put a golang under your tongue"))
  (wal/disable-tabs)
  (hack-local-variables)
  (wal/lsp))

(use-package go-mode
  :hook (go-mode . wal/go-mode))
#+END_SRC

** Scripting

*** sh-script
:PROPERTIES:
:UNNUMBERED: t
:END:

Bash your head in!

#+BEGIN_SRC emacs-lisp
(defun wal/sh-mode ()
  "Hook into `sh-mode'."
  (wal/message-in-a-bottle '("Sh..sh..h.."
                             "Bash your head in"))
  (wal/disable-tabs)
  (hack-local-variables))

(use-package sh-script
  :custom
  (sh-basic-offset 2)
  (sh-indent-after-continuation nil)
  :hook (sh-mode . wal/sh-mode)
  :ensure nil)
#+END_SRC

*** crontab-mode
:PROPERTIES:
:UNNUMBERED: t
:END:

Sometimes you have to deal with things at their time.

#+BEGIN_SRC emacs-lisp
(use-package crontab-mode)
#+END_SRC

*** fish-mode
:PROPERTIES:
:UNNUMBERED: t
:END:

Support =fish= functions.

#+BEGIN_SRC emacs-lisp
(use-package fish-mode)
#+END_SRC

** Markup

Sometimes things that don't do things need to look nice.

*** markdown-mode
:PROPERTIES:
:UNNUMBERED: t
:END:

#+BEGIN_SRC emacs-lisp
(defun wal/markdown-view ()
  "Toggle between different markdown views."
  (interactive)
  (cond
   ((eq major-mode 'markdown-mode)
    (markdown-view-mode))
   ((eq major-mode 'markdown-view-mode)
    (markdown-mode))
   (t
    (error "Can't change view outside of markdown modes"))))

(use-package markdown-mode
  :general
  (wal/major :keymaps 'markdown-mode-map :major-modes t
    "v" '(wal/markdown-view :wk "view")))
#+END_SRC

*** yaml-mode
:PROPERTIES:
:UNNUMBERED: t
:END:

Sometimes things that do as well.

#+BEGIN_SRC emacs-lisp
(defun wal/yaml-mode ()
  "Hook into command `yaml-mode'."
  (message "JSON?! ... Ah, thank God it's you, YAML!")
  (drag-stuff-mode +1)
  (wal/disable-tabs)
  (hack-local-variables)
  (flycheck-mode +1))

(use-package yaml-mode
  :mode "\\.tpl\\'" ; Helm templates.
  :hook (yaml-mode . wal/yaml-mode))
#+END_SRC

** Flutter

Yes, you need to install *Android Studio* for some reason.

*** dart-mode
:PROPERTIES:
:UNNUMBERED: t
:END:

#+BEGIN_SRC emacs-lisp
(defun wal/dart-mode ()
  "Hook into `dart-mode'."
  (message "Bull's eye!")
  (wal/disable-tabs)
  (hack-local-variables)
  (wal/lsp))

(use-package dart-mode
  :hook (dart-mode . wal/dart-mode))
#+END_SRC

** Web

Does anyone actually like web development?

*** css-mode
:PROPERTIES:
:UNNUMBERED: t
:END:

We want quicker =company= suggestions when in CSS modes.

#+BEGIN_SRC emacs-lisp
(defun wal/css-mode ()
  "Hook into `css-mode'."
  (message "Centering? It's simple. Here's 15 ways to do it.")
  ;; Faster `company'.
  (setq-local company-idle-delay 0.1)
  (hack-local-variables)
  (wal/maybe-enable-tabs)
  (flycheck-mode +1))

(use-package css-mode
  :hook (css-mode . wal/css-mode)
  :ensure nil)
#+END_SRC

*** pug-mode
:PROPERTIES:
:UNNUMBERED: t
:END:

Support for =pug= templates.

#+BEGIN_SRC emacs-lisp
(use-package pug-mode)
#+END_SRC

** Footer
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
(provide 'wal-lang)

;;; wal-lang.el ends here
#+END_SRC

* Fixing Things
:PROPERTIES:
:header-args:emacs-lisp: :tangle (expand-file-name "wal-fix.el" wal/emacs-config-package-path)
:END:

Please let me know when I screwed up. I promise I will learn.

** Header
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
;;; wal-fix.el --- Fixing things.

;;; Commentary:
;;
;; Provide fixing packages.

;;; Code:
#+END_SRC

** Packages

*** flycheck
:PROPERTIES:
:UNNUMBERED: t
:END:

=flycheck= is for all of our linting/code quality needs.

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :config
  (wal/captain :keymaps 'flycheck-mode-map
    "f" '(:keymap flycheck-command-map :wk "flycheck"))
  (general-define-key
    :keymaps 'flycheck-command-map
    "u" '(consult-flycheck :wk "consult flycheck"))
  :general
  (wal/captain-sink "f" '(flycheck-mode :wk "flycheck"))
  :hook (sh-set-shell . flycheck-mode)
  :delight " fly")
#+END_SRC

*** flyspell
:PROPERTIES:
:UNNUMBERED: t
:END:

My spelling is bad. Uses American English for =flyspell=.

#+BEGIN_SRC emacs-lisp
(defun wal/flyspell ()
  "(De-)Activate the appropriate `flyspell' mode."
  (interactive)
  (if flyspell-mode
      (flyspell-mode -1)
    (if (derived-mode-p 'prog-mode)
        (flyspell-prog-mode)
      (flyspell-mode))))

(use-package flyspell
  :custom
  (flyspell-issue-message-flag nil)
  (flyspell-mode-line-string " fsp")
  (flyspell-default-dictionary "american")
  :bind
  (:map flyspell-mode-map
   ("C-." . ispell-word)) ;; Replaces `flyspell-auto-correct-word'.
                          ;; But still available via `C-M-i'.
  :general
  (wal/captain :keymaps 'flyspell-mode-map
    "s" '(:ignore t :wk "flyspell")
    "sb" '(flyspell-buffer :wk "buffer")
    "sr" '(flyspell-region :wk "region"))
  (wal/captain-sink "s" '(wal/flyspell :wk "flyspell"))
  :ensure nil)
#+END_SRC

** Footer
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
(provide 'wal-fix)

;;; wal-fix.el ends here
#+END_SRC

* LSP
:PROPERTIES:
:header-args:emacs-lisp: :tangle (expand-file-name "wal-lsp.el" wal/emacs-config-package-path)
:END:

Language servers are awesome. Thanks, Microsoft.

** Header
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
;;; wal-lsp.el --- LSP.

;;; Commentary:
;;
;; Provide LSP packages.

;;; Code:

(declare-function lsp-enable-which-key-integration "lsp-mode.el")
(declare-function wal/captain "wal-key-bindings.el")
(declare-function wal/captain-sink "wal-key-bindings.el")
(declare-function wal/display-buffer-in-side-window "wal-func.el")

(defvar lsp-file-watch-ignored-directories)

(defgroup wal-lsp nil
  "Change settings for LSP packages."
  :group 'wal
  :tag "LSP")

(defcustom wal/lsp-slow-modes '(dart-mode)
  "Modes that have slow langauge servers.

For these modes, `company-idle-delay' will not set to nil instead
of 0.0."
  :type '(repeat symbol)
  :group 'wal-lsp)

(defun wal/lsp ()
  "Activate LSP client."
  (if (memq major-mode wal/lsp-slow-modes)
      (setq-local company-idle-delay nil)
    (setq-local company-idle-delay 0.0
                company-minimum-prefix-length 1))
  (setq-local company-backends '(company-capf company-yasnippet))
  (lsp-deferred))

(wal/captain-sink :keymaps 'prog-mode-map
    "l" '(wal/lsp :wk "lsp"))
#+END_SRC

** Packages

*** lsp-mode
:PROPERTIES:
:UNNUMBERED: t
:END:

=lsp-mode= is the fancy version. You'll have to install some language
servers yourself[fn:17].

#+BEGIN_SRC emacs-lisp
(defcustom wal/lsp-file-watch-ignored-directories
  '("[/\\\\]build\\'")
  "Additional directories to not monitor."
  :type '(repeat regexp)
  :group 'wal-lsp)

(defun wal/advise-lsp-to-prevent-multi-root (&rest _r)
  "Prevent adding workspace roots from other projects."
  (eval '(setf (lsp-session-server-id->folders (lsp-session)) (ht))))

(defun wal/configure-lsp-mode ()
  "Configure package `lsp-mode'.
This adds additional ignored directories."
  (require 'avy nil t) ; For code lenses to work immediately.
  (mapc (lambda (it)
          (add-to-list 'lsp-file-watch-ignored-directories it))
        wal/lsp-file-watch-ignored-directories)
  (advice-add 'lsp :before 'wal/advise-lsp-to-prevent-multi-root)
  (lsp-enable-which-key-integration t)
  (wal/captain :keymaps 'lsp-mode-map
    "l" '(:keymap lsp-command-map :wk "lsp")))

(use-package lsp-mode
  :config
  (wal/configure-lsp-mode)
  :custom
  (lsp-headerline-breadcrumb-enable nil)
  (lsp-keymap-prefix (wal/prefix-user-key (concat wal/captain-key " " "l")))
  ;; Use pyenv environment for jedi.
  (lsp-pylsp-plugins-jedi-use-pyenv-environment t)
  ;; TypeScript/JavaScript
  (lsp-clients-typescript-log-verbosity "off")
  (lsp-signature-render-documentation nil)
  (lsp-signature-function 'lsp-signature-posframe)
  (lsp-signature-auto-activate '(:on-server-request))
  :wal-bind
  (:map lsp-mode-map
   ("L" . lsp-avy-lens)
   ("K" . lsp-execute-code-action))
  :general
  (wal/major
    :keymaps 'lsp-mode-map
    "f" '(lsp-format-buffer :wk "format"))
  :delight
  (lsp-mode " lsp")
  (lsp-lens-mode " lns"))
#+END_SRC

*** lsp-ui
:PROPERTIES:
:UNNUMBERED: t
:END:

Don't clutter things up too much.

#+BEGIN_SRC emacs-lisp
(use-package lsp-ui
  :custom
  (lsp-ui-doc-show-with-cursor t)
  (lsp-ui-doc-delay 1.0)
  ;; Make sure that docs actually fit into the window.
  (lsp-ui-doc-max-height 10)
  (lsp-ui-doc-text-scale-level -1)
  :after lsp-mode)
#+END_SRC

*** lsp-dart
:PROPERTIES:
:UNNUMBERED: t
:END:

LSP support for Dart.

#+BEGIN_SRC emacs-lisp
(defun wal/find-dart-flutter-sdk-dir ()
  "Find the Dart Flutter SDK directory."
  (when-let* ((flutter-bin (executable-find "flutter"))
              (sdk-dir (string-trim (shell-command-to-string "flutter sdk-path"))))
    sdk-dir))

(defun wal/find-dart-sdk-dir ()
  "Find the Dart SDK directory."
  (when-let* ((flutter-sdk-dir (wal/find-dart-flutter-sdk-dir)))
    (expand-file-name "bin/cache/dart-sdk" flutter-sdk-dir)))

(defun wal/lsp-dart-set-process-query-on-exit-flag ()
  "Set the query-on-exit flag to nil for the Dart language server."
  (defvar lsp-dart-flutter-daemon-buffer-name)
  (when-let (proc (get-buffer-process lsp-dart-flutter-daemon-buffer-name))
    (set-process-query-on-exit-flag proc nil)))

(defun wal/lsp-service-uri ()
  "Get the service URI (needed for devtools)."
  (interactive)
  (condition-case nil
      (let ((uri (lsp-workspace-get-metadata "devtools-vm-service-uri")))
        (kill-new uri)
        (message "Service URI (%s) copied to kill ring" uri))
    (error
      (message "Couldn't get service URI"))))

(defun wal/configure-lsp-dart ()
  "Configure package `lsp-dart'."
  (when (fboundp 'lsp-dart-define-key)
    (lsp-dart-define-key "r" #'lsp-dart-run))
  (add-hook
   'lsp-after-initialize-hook
   #'wal/lsp-dart-set-process-query-on-exit-flag))

;; Run `lsp-dart-dap-setup' once to install debugger.
(use-package lsp-dart
  :if (executable-find "flutter")
  :config
  (wal/configure-lsp-dart)
  :custom
  (lsp-dart-flutter-sdk-dir (wal/find-dart-flutter-sdk-dir))
  (lsp-dart-sdk-dir (wal/find-dart-sdk-dir))
  :general
  (wal/major
    :keymaps 'dart-mode-map
    :major-modes t
    "o" '(lsp-dart-show-flutter-outline :wk "show outline")
    "E" '(lsp-dart-run :wk "run")
    "R" '(lsp-dart-dap-flutter-hot-restart :wk "restart")
    "r" '(lsp-dart-dap-flutter-hot-reload :wk "hot reload")
    "t" '(lsp-dart-run-test-at-point :wk "test (current)")
    "T" '(lsp-dart-run-all-tests :wk "test (all)")
    "D" '(lsp-dart-open-devtools :wk "devtools")
    "U" '(wal/lsp-service-uri :wk "service URI"))
  :after lsp-mode)
#+END_SRC

*** dap-mode
:PROPERTIES:
:UNNUMBERED: t
:END:

Debugging using VSCode's DAP (in =lsp-mode=)

#+BEGIN_SRC emacs-lisp
(defun wal/configure-dap-mode ()
  "Configure package `dap-mode'."
  (dap-ui-mode 1)
  (dap-auto-configure-mode)
  (wal/display-buffer-in-side-window 'dap-ui-repl-mode)
  (with-no-warnings
    (defhydra wal/dap-hydra (:hint nil :foreign-keys warn)
      "
%s`wal/ascii-whale _d_ebug: _n_ext, _i_n, _o_ut or _c_ontinue.

"
      ("n" dap-next)
      ("i" dap-step-in)
      ("o" dap-step-out)
      ("c" dap-continue :color blue)
      ("d" dap-debug :color blue)
      ("b" dap-breakpoint-toggle "toggle breakpoint" :color blue)
      ("l" dap-go-to-output-buffer "show logs" :color blue)
      ("q" nil))))

(use-package dap-mode
  :config
  (wal/configure-dap-mode)
  :custom
  (dap-python-executable "python3")
  (dap-python-debugger 'debugpy)
  (dap-auto-show-output nil)
  (dap-auto-configure-features '(repl))
  :general
  (wal/captain-sink :keymaps 'lsp-mode-map
    "d" '(dap-mode :wk "dap"))
  (wal/captain :keymaps 'lsp-mode-map
    "d" '(wal/dap-hydra/body :wk "debug")
    "D" '(dap-hydra :wk "debug"))
  :after lsp-mode
  :delight " dap")
#+END_SRC

*** Debug Templates

Put these templates in a file in your project root, and evaluate them
there using =C-x C-e=.

**** Node.js
:PROPERTIES:
:UNNUMBERED: t
:END:

This for attaching to a remote host (Docker container) using =nodemon=.

For TypeScript compile your =src= with =--sourceMap= or set =sourceMap= to
=true= in your =tsconfig.json=.

#+BEGIN_SRC emacs-lisp :tangle no
(when (require 'dap-mode nil 'noerror)
  (progn
    (let* ((use-source-maps t) ; Turn off if not needed.
           (build-directory "build") ; Set to `nil' if this isn't transpiled JavaScript.
           (remote-root "/usr/src/app") ; If this is running remotely.
           (local-root (if build-directory
                           (concat (file-name-directory buffer-file-name) build-directory)
                         (file-name-directory buffer-file-name))))
      (dap-register-debug-template
       "attach::node"
       (list :type "node"
             :request "attach"
             :sourceMaps use-source-maps
             :remoteRoot remote-root
             :localRoot local-root
             :port 9229)))))
#+END_SRC

**** Python
:PROPERTIES:
:UNNUMBERED: t
:END:

Attach to running process.

#+BEGIN_SRC emacs-lisp :tangle no
;; Adapt your remote root
(when (require 'dap-mode nil 'noerror)
  (let ((mapping '(:localRoot "${workspaceFolder}" :remoteRoot "/usr/src/app")))
    (dap-register-debug-template
     "python::attach"
     (list :type "python"
           :request "attach"
           :connect (list :host "localhost" :port 5678)
           :pathMappings (vector mapping)))))
#+END_SRC

** Server Configurations

Configure or register language servers that aren't as straight
forward.

*** Prolog (swipl)
:PROPERTIES:
:UNNUMBERED: t
:END:

=?-likes(krister, Prolog).=

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'lsp-mode
  (with-suppressed-warnings
      (lsp-register-client
       (make-lsp-client
        :new-connection
        (lsp-stdio-connection (list "swipl"
                                    "-g" "use_module(library(lsp_server))."
                                    "-g" "lsp_server:main"
                                    "-t" "halt"
                                    "--" "stdio"))
        :major-modes '(prolog-mode)
        :priority 1
        :multi-root t
        :server-id 'prolog-ls))))
#+END_SRC

** Footer
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
(provide 'wal-lsp)

;;; wal-lsp.el ends here
#+END_SRC

* DevOps
:PROPERTIES:
:header-args:emacs-lisp: :tangle (expand-file-name "wal-devops.el" wal/emacs-config-package-path)
:END:

Put it into a container and throw it in the garbage that is the
Internet.

** Header
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
;;; wal-devops.el --- DevOps.

;;; Commentary:
;;
;; Provide DevOps packages.

;;; Code:

(declare-function wal/display-buffer-in-side-window "wal-func.el")
(declare-function wal/display-buffer-in-direction "wal-func.el")
#+END_SRC

** Packages

*** docker
:PROPERTIES:
:UNNUMBERED: t
:END:

What goes =docker-compose= up, goes =docker-compose= down.

#+BEGIN_SRC emacs-lisp
(use-package docker
  :config
  (wal/display-buffer-in-side-window "\\*docker-containers\\*" :side 'top)
  (wal/display-buffer-in-side-window "^\\* docker shell")
  (wal/display-buffer-in-direction "^\\* docker container")
  (wal/display-buffer-in-direction "^\\*docker-compose")
  :custom
  (docker-container-default-sort-key '("Names"))
  (docker-image-default-sort-key '("Created" . t))
  (docker-volume-default-sort-key '("Name"))
  :bind
  (("C-c d" . docker)))
#+END_SRC

*** dockerfile-mode
:PROPERTIES:
:UNNUMBERED: t
:END:

Make =Dockerfiles= look nice.

#+BEGIN_SRC emacs-lisp
(defun wal/dockerfile-mode ()
  "Hook into `dockerfile-mode'."
  (message "Have you ever given?"))

(use-package dockerfile-mode
  :hook (dockerfile-mode . wal/dockerfile-mode))
#+END_SRC

*** kubernetes
:PROPERTIES:
:UNNUMBERED: t
:END:

Who doesn't like pods and stuff?

#+BEGIN_SRC emacs-lisp
(use-package kubernetes
  :if (executable-find "kubectl")
  :custom
  (kubernetes-commands-display-buffer-function 'display-buffer)
  (kubernetes-poll-frequency 3600)
  (kubernetes-redraw-frequency 3600)
  (kubernetes-default-overview-view 'deployments)
  (kubernetes-json-mode 'json-mode)
  :bind
  ("C-c 8" . kubernetes-overview)
  :commands kubernetes-overview)
#+END_SRC

** Footer
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
(provide 'wal-devops)

;;; wal-devops.el ends here
#+END_SRC

* The Internet
:PROPERTIES:
:header-args:emacs-lisp: :tangle (expand-file-name "wal-web.el" wal/emacs-config-package-path)
:END:

I browse, I request.

** Header
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
;;; wal-web.el --- The Internet.

;;; Commentary:
;;
;; Provide web packages.

;;; Code:

(declare-function wal/display-buffer-in-pop-up "wal-func.el")
#+END_SRC

** Packages

*** verb
:PROPERTIES:
:UNNUMBERED: t
:END:

I'll replace =restclient= with =verb= soon.

#+BEGIN_SRC emacs-lisp
(use-package verb
  :config
  (add-to-list 'org-tag-alist '("verb" . ?v))
  (wal/display-buffer-in-pop-up "\\*HTTP Response")
  :custom
  (verb-auto-kill-response-buffers t)
  :general
  (wal/major :keymaps 'org-mode-map
    "v" '(:ignore t :wk "verb")
    "vr" '(verb-send-request-on-point-other-window-stay :wk "make request")
    "vk" '(verb-kill-all-response-buffers :wk "kill response buffers")
    "vv" '(verb-set-var :wk "set var"))
  (wal/captain-sink :keymaps 'org-mode-map
    "r" '(verb-mode :wk "verb"))
  :after org
  :delight " vrb")
#+END_SRC

*** mu4e
:PROPERTIES:
:UNNUMBERED: t
:END:

You either need to install =maildir-utils= or build from [[https://github.com/djcb/mu][source]].

#+BEGIN_SRC emacs-lisp
(use-package mu4e
  :if (executable-find "mu")
  :config
  (setq mail-user-agent 'mu4e-user-agent)
  :custom
  (mu4e-confirm-quit nil)
  (mu4e-completing-read-function 'completing-read)
  (mu4e-compose-dont-reply-to-self t)
  (mu4e-get-mail-command "offlineimap") ; This one works nicely.
  :general
  (wal/general-sink "m" '(mu4e :wk "emails"))
  :ensure nil)
#+END_SRC

*** smtpmail
:PROPERTIES:
:UNNUMBERED: t
:END:

This configuration is from a (kind of) working [[https://www.djcbsoftware.nl/code/mu/mu4e/Gmail-configuration.html][Gmail setup]].

I recommend putting personal data in a =site-start.el= file somewhere in
your =load-path=.

#+BEGIN_SRC emacs-lisp
(use-package smtpmail
  :custom
  (message-send-mail-function 'smtpmail-send-it)
  (message-kill-buffer-on-exit t)
  (starttls-use-gnutls t)
  :ensure nil)
#+END_SRC

** Footer
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
(provide 'wal-web)

;;; wal-web.el ends here
#+END_SRC

* Writing
:PROPERTIES:
:header-args:emacs-lisp: :tangle (expand-file-name "wal-writing.el" wal/emacs-config-package-path)
:END:

Sometimes you have to sit down and write something.

** Header
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
;;; wal-writing.el --- Writing.

;;; Commentary:
;;
;; Provide writing packages.

;;; Code:
#+END_SRC

** Packages

*** typo
:PROPERTIES:
:UNNUMBERED: t
:END:

Access complex punctuation. To me this doesn't necessarily make sense
for all =text-mode= modes (like =org-mode=), so instead it needs to be
triggered explicitly.

#+BEGIN_SRC emacs-lisp
(use-package typo
  :general
  (wal/captain-sink :keymaps '(text-mode-map org-mode-map) :major-modes t
    "t" '(typo-mode :wk "typo"))
  :hook (typo-mode . flycheck-mode)
  :delight " typ")
#+END_SRC

*** writeroom
:PROPERTIES:
:UNNUMBERED: t
:END:

Create a room of one's own. I use a different (light) theme here.

#+BEGIN_SRC emacs-lisp
(use-package writeroom-mode
  :config
  (setq writeroom-global-effects (remove 'writeroom-set-alpha writeroom-global-effects)) ; Keep transparency.
  :custom
  (writeroom-width 0.618) ; Golden ratio.
  (writeroom-restore-window-config t)
  (writeroom-extra-line-spacing 0.1)
  :general
  (wal/captain-sink "r" '(writeroom-mode :wk "writeroom")))
#+END_SRC

** Footer
:PROPERTIES:
:VISIBILITY: folded
:END:

#+BEGIN_SRC emacs-lisp
(provide 'wal-writing)

;;; wal-writing.el ends here
#+END_SRC

* Config Package
:PROPERTIES:
:header-args:emacs-lisp: :tangle (expand-file-name "wal.el" wal/emacs-config-package-path)
:END:

The root package of the configuration which is basically just a giant
=require=.

#+BEGIN_SRC emacs-lisp
;;; wal.el --- Walheimat's literate Emacs configuration.

;;; Commentary:
;;
;; Require all sub-packages.

;;; Code:

(defgroup wal nil
  "Walheimat's configuration."
  :group 'convenience
  :prefix "wal/")

(defconst wal/sub-packages
  '(wal-settings
    wal-func
    wal-key-bindings
    wal-look
    wal-fonts
    ;; The following packages are optional.
    wal-emacs
    wal-edit
    wal-visuals
    wal-windows
    wal-movement
    wal-find
    wal-complete
    wal-workspace
    wal-org
    wal-dired
    wal-terminal
    wal-vc
    wal-lang
    wal-fix
    wal-lsp
    wal-devops
    wal-web
    wal-writing)
  "List of sub-packages that will be loaded.

The order determines the load order as well.")

(when (boundp 'wal/emacs-config-package-path)
  (add-to-list 'load-path wal/emacs-config-package-path))

(dolist (it wal/sub-packages)
  (require it nil t))

(provide 'wal)

;;; wal.el ends here
#+END_SRC

* Footnotes

[fn:1] Jumped ship from =27.1=. Some minor things might not work there.
I currently use this config in =28.0.60= and =29.0.50=.

[fn:2] If you're feeling adventurous, [[https://git.savannah.gnu.org/cgit/emacs.git/tree/INSTALL][build from source]].

[fn:3] If you're not sure where your =user-emacs-directory= might be,
you can do the following:

+ Run Emacs
+ hit =M-x= (that is your Alt/Option key followed by the letter =x=)
+ type =describe-variable= and hit return
+ type =user-emacs-directory= and hit return again.

A window should pop up telling you the path.

Finally run =git clone git@gitlab.com:Walheimat/emacs-config.git ~/.emacs.d=
(replace =~/.emacs.d= with your actual path if it differs).

[fn:4] This includes this very config which will be exported as a
package collection.

[fn:5] Which means that a frame is created and control immediately
returned.

[fn:6] Not including where =:tangle no= was set.

/Note/ they will not necessarily be evaluated in the same order they
appear in this file. The order of evaluation is determined by the
=wal.el= file from [[*Config Package][this section]].

[fn:7] Send me an email, why don't you?

[fn:8] To get a full overview you'll have to call
=describe-personal-keybindings= and =general-describe-keybindings=.

[fn:9] If hyper can't be used (or shouldn't be used if Emacs is run in
=no-window-system=), it is replaced by =C-c w <key>= for both leader keys
and other bindings.

[fn:10] Be careful! If you make a mistake you could render your
keyboard unusable.

[fn:11] They all require their respective mode to be on.

The leader key also provides prefixes for packages that have their own
ecosystem like =org-roam= and =magit=.

[fn:12] The following packages (and their related or sub-packages) are
found in other sections

- =org= and =org-agenda= in [[*Org Mode][Org Mode]]
- =flyspell= in [[*Fixing Things][Fixing Things]]
- =dired= in [[*Dired][Dired]]
- =eshell= in [[*Terminal][Terminal]]
- =python=, =emacs-lisp=, =cc-mode= and =css-mode= in [[*Languages][Languages]]

[fn:13] The =all-the-icons= icons need to be downloaded manually by
running =M-x all-the-icons-install-fonts= and selecting =yes=.

If the installation process should fail for any reason, close Emacs
and re-run it.

[fn:14] You might have to call =emojify-download-emoji= to download a
set that supports your emojis.

[fn:15] We will try to download it automatically, but might fail.

[fn:16] If you're on an older distro your =libvterm= package might be
too old.

[fn:17] All languages listed [[https://emacs-lsp.github.io/lsp-mode/page/languages/][here]].

[fn:18] Mostly from MELPA. /Note/ that many packages bind keys. Check
the [[*Key Bindings][key bindings section]] if you need a list of the important ones, in
that section you also find package configurations for
key-binding-related packages =general= and =hydra=.
