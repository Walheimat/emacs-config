#+TITLE: Walheimat's Hybrid Emacs Config/Readme
#+AUTHOR: [[https://gitlab.com/Walheimat][@Walheimat]]
#+OPTIONS: toc:nil

* Emacs Org Config

This project is my personal Emacs (27.1)[fn:1] config.

Its base is an org file so it doubles as a readme.

#+TOC: headlines 3

** Setup

Everything you need to know to use this config,
including the information that you maybe shouldn't.

*** Heads-up

If you're a complete beginner,
you will find [[https://github.com/emacs-tw/awesome-emacs#starter-kit][more user-friendly and less tailor-made configs]] out there.

The idea of this config is to provide a jumping-off-point for your own custom config.
Nothing in this config should be considered _good practice_,
it's mostly just how I (think I) like things to be.

*** Try-out

If you're interested in trying out Emacs using my config anyway,
here are the necessary steps:

+ Install Emacs if you haven't[fn:2]
+ Clone this repository into your =user-emacs-directory=[fn:3]
+ Copy the config file included in this repo by running =cp ~/.emacs.d/emacs-config/templates/.emacs ~=
+ Close and re-run Emacs which should download and install (almost[fn:4]) all packages

If you did not init this repo in your =user-emacs-directory= using the default name,
you will need to adapt the variable =wal/emacs-config-default-path= in the example config you just copied.

**** Daemon Mode

This config is /daemon-ready/, i.e. if you start Emacs with the =--daemon= flag,
the config will make sure that any customization that requires a frame
will only be loaded once a frame was created.

A =systemd= service config can be found in the =/templates= directory to
get you started:

+ run =mkdir -p ~/.config/systemd/user=
+ run =cp ~/.emacs.d/emacs-config/templates/emacs.service ~/.config/systemd/user=
+ adapt the =emacs.service= file to point to the correct path
+ run =systemctl --user enable emacs=

Now an Emacs daemon will start on start-up. To connect you can use, for example,
=emacsclient -c -h=, which I alias to =ec=.

** Config

The init script will evaluate _everything_[fn:5] that follows.

I've tried to keep custom functions and variables in a scope
called =wal= to avoid potential interferences.

*** Personal

Set some personal info.[fn:6]

#+BEGIN_SRC emacs-lisp
(setq user-full-name    "Krister Schuchardt"
      user-mail-address "krister.schuchardt@theventury.com")

;; warn Mac/Windows users
(unless (eq system-type 'gnu/linux)
  (warn "\
    Warning: Config only tested on linux.
    While I did get in running on Windows 10,
    it was quite tricky and involved setting unsafe options."))
#+END_SRC

*** Initialization

Set up Emacs, package manager and packages.

**** Start-Up

Customize start-up.

#+BEGIN_SRC emacs-lisp
;; comment the following line if you're using a tiling window manager 
(add-to-list 'default-frame-alist '(fullscreen . maximized))

;; no splash
(setq inhibit-startup-message t)

;; use a distinct file for customization
(setq custom-file (expand-file-name "custom.el" wal/emacs-config-default-path))

;; we'll create that file if it doesn't yet exist
(unless (file-exists-p custom-file)
  (write-region "" nil custom-file))

(load custom-file)
#+END_SRC

**** Package Archives

Add MELPA and org-mode to our package archives.
We'll be getting most (if not all) packages from the prior.

#+BEGIN_SRC emacs-lisp
(require 'package)
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
		    (not (gnutls-available-p))))
       (proto (if no-ssl "http" "https")))
  (when no-ssl (warn "\
   Your version of Emacs does not support SSL connections,
   which is unsafe because it allows man-in-the-middle attacks.
   There are two things you can do about this warning:
   1. Install an Emacs version that does support SSL and be safe.
   2. Remove this warning from your init file so you won't see it again."))
  (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
  ;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`
  ;; and `package-pinned-packages`. Most users will not need or want to do this.
  ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
  )
(setq package-pinned-packages '())
(package-initialize)
#+END_SRC

**** Dependencies

We manage our packages with =use-package=, before we can use it,
we have to install it and a few other packages the hard way.

***** Lisp Extensions

We need dash.

#+BEGIN_SRC emacs-lisp
;; we need dash for the upcoming loop
(unless (package-installed-p 'dash)
  (condition-case nil
      (package-install 'dash)
    (error (package-refresh-contents)
           (package-install 'dash))))
(require 'dash)
#+END_SRC

***** Other Packages

Now we can install the other dependencies.

#+BEGIN_SRC emacs-lisp
(defun wal/packages-install (packages)
  (--each packages
    (when (not (package-installed-p it))
      (package-install it)))
  (delete-other-windows))

;; packages that either don't need configuration (themes)
;; or are requirements in and of themselves are put here
(defun wal/init--install-packages ()
  (wal/packages-install
   '(
     use-package
     diminish
     delight
     ample-theme
     doom-themes
     kaolin-themes
     naysayer-theme
     nord-theme
     panda-theme
     paper-theme
     spacemacs-theme
     brutalist-theme
     )))

(condition-case nil
    (wal/init--install-packages)
  (error
   (package-refresh-contents)
   (wal/init--install-packages)))
#+END_SRC

**** Folders

Make sure that all folders exists.

+ a cache folder to store bookmarks, perspectives, prescience et al.
+ a folder for site lisp
+ a default folder for org files.

#+BEGIN_SRC emacs-lisp
(defconst wal/cache-folder
  (expand-file-name ".cache" user-emacs-directory)
  "The name of the cache folder.")

(defconst wal/site-lisp-directory
  (expand-file-name "site-lisp" user-emacs-directory)
  "Directory of site lisp packages.")

;; change if necessary
(defconst wal/org-directory (expand-file-name "org" "~")
  "My default directory for org files.")

;; I put all of my tasks into a subfolder `tasks` inside the org directory
(defconst wal/agenda-tasks-directory
  (expand-file-name "tasks" wal/org-directory)
  "One-size-fits-all directory for agenda tasks.")

(defconst wal/org-roam-directory
  (expand-file-name "zettelkasten" wal/org-directory)
  "Directory for our note-taking.")

;; create all dirs
(--each
    `(
      ,wal/org-roam-directory
      ,wal/agenda-tasks-directory
      ,wal/org-directory
      ,wal/site-lisp-directory
      ,wal/cache-folder
      )
  (unless (file-directory-p it)
    (make-directory it)))
#+END_SRC

***** Persistent *scratch*

Let's keep the scratch contents.

This was cribbed from [[https://www.john2x.com/emacs.html][john2x's config]].

#+BEGIN_SRC emacs-lisp
;; empty scratch message
(setq initial-scratch-message ";; Howdy, stranger ...")

(defconst wal/scratch-persist-file
  (expand-file-name "scratch-persist" wal/cache-folder)
  "The file to persist the *scratch* buffer's content in.")

(defun wal/persist-scratch ()
  "Persist contents of *scratch* buffer."
  (interactive)
  (with-current-buffer (get-buffer-create "*scratch*")
    (write-region (point-min) (point-max) wal/scratch-persist-file)))

(defun wal/rehydrate-scratch ()
  "Re-hydrate scratch buffer (if persisted)."
  (if (file-exists-p wal/scratch-persist-file)
      (with-current-buffer (get-buffer "*scratch*")
        (delete-region (point-min) (point-max))
        (insert-file-contents wal/scratch-persist-file))))

(add-hook 'after-init-hook #'wal/rehydrate-scratch)
(add-hook 'kill-emacs-hook #'wal/persist-scratch)
#+END_SRC

***** Site-Lisp

Add =site-lisp= directory and sub-directories to load path.
I put non-MELPA packages here.

If the directory doesn't exist, it will get created.
Adapt if necessary.

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path wal/site-lisp-directory)

;; allow us to load from site-lisp package
(add-to-list 'custom-theme-load-path
	     (expand-file-name "emacs-site-lisp" wal/site-lisp-directory))

;; add subdirs as well
(dolist (project (directory-files wal/site-lisp-directory t "\\w+"))
  (when (file-directory-p project)
    (add-to-list 'load-path project)))
#+END_SRC

**** Package Management

We also always want to ensure the package, i.e. if it's not there, get it.

I used key-chords for a few, common actions but prefer using hyper key now.

#+BEGIN_SRC emacs-lisp
(require 'use-package-ensure)
(setq use-package-always-ensure t)

(require 'diminish)
(require 'delight)
(require 'bind-key)

;; has to come here to be useable
(use-package use-package-chords
  :disabled
  :config
  (key-chord-mode 1))
#+END_SRC

*** Built-in

Configure built-in settings.

**** Saving and Backups

Don't clutter up workspaces.

#+BEGIN_SRC emacs-lisp
;; save places and do so in a file
(setq save-place-file (expand-file-name ".places" user-emacs-directory))

;; store backups in backups folder.
(setq backup-directory-alist
      `(("." . ,(expand-file-name
		 (concat user-emacs-directory "backups")))))

;; store autosaves in temp folder.
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

;; we don't want this to mess with git.
(setq create-lockfiles nil)
#+END_SRC

**** Prettifying

Easy on the eyes.

#+BEGIN_SRC emacs-lisp
;; a bunch of useful modes
(show-paren-mode 1)
(global-auto-revert-mode t)
(global-hl-line-mode)
;; (add-hook 'prog-mode-hook 'linum-mode)
;; (add-hook 'prog-mode-hook 'display-line-numbers-mode)
(global-prettify-symbols-mode +1)
;; (global-whitespace-mode)
(save-place-mode 1)
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(global-font-lock-mode 1)
(delete-selection-mode 1)

;; trying to not touch the mouse as much
;; (mouse-avoidance-mode 'banish)

;; simple y/n is enough
(defalias 'yes-or-no-p 'y-or-n-p)

;; I want my comments slanted and my keywords bold
;; the FiraCode font does not support this
(defun wal/font-lock ()
  "Slanted and enchanted."
  (set-face-attribute 'font-lock-comment-face nil :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil :weight 'bold))

(add-hook 'font-lock-mode-hook 'wal/font-lock)

;; huge cursor
;; (setq x-stretch-cursor t)
#+END_SRC

**** Reasonable Settings

Make things snappier.

#+BEGIN_SRC emacs-lisp
(setq mouse-yank-at-point       t
      show-paren-delay          0.0
      read-process-output-max   (* 1024 1024) ;; 1mb
      sentence-end-double-space nil
      echo-keystrokes           0.1)
#+END_SRC

**** Indentation

I (generally) prefer tabs over spaces.
To make this work, we need to tweak a few things.

#+BEGIN_SRC emacs-lisp
(defconst wal/tab-width
  4
  "A tab width 4 spaces wide.")

(defun wal/disable-tabs ()
  "Disable indent-tabs-mode."
  (interactive)
  (local-unset-key (kbd "TAB"))
  (setq indent-tabs-mode nil)
  (setq tab-width (eval (car (get 'tab-width 'standard-value)))))

(defun wal/enable-tabs ()
  "Use TAB key and turn on indent-tabs-mode."
  (interactive)
  (local-set-key (kbd "TAB") 'tab-to-tab-stop)
  (setq indent-tabs-mode t)
  (setq tab-width wal/tab-width))

(defun wal/set-tab-defaults (&optional num)
  "Resets tab defaults, optionally to NUM."
  (interactive)
  (let ((width (if (numberp num) num wal/tab-width)))
    (setq-default python-indent-offset    width ;; Python
                  js-indent-level         width ;; Javascript
                  electric-indent-inhibit t)
    (setq backward-delete-char-untabify-method 'hungry)))

(add-hook 'after-init-hook 'wal/set-tab-defaults)
#+END_SRC

***** Dir Local Indentation

Sometimes you have to play using other people's rules.
You can run =add-dir-local-variable= to do so.
Check out the =.dir-locals.el= template found in the =/templates= folder
for an example using spaces.

**** Key Bindings

Change up the key bindings a bit.

***** Personal

I try to have most actions use user-reserved =C-c <key>= combinations,
but some =C-x <key>= mappings snuck in.

If you want to see all personal keybindings, execute =describe-personal-keybindings=.

+ =C-c a <key>= opens today's (=t=), this week's (=w=) or my personal (=p=) agenda.
+ =C-c c <key>= to duplicate (=d=) the current line, kill (=k=) other buffers and (=o=) open with outside program.
+ =C-c c ;= (un-)comments lines.
+ =C-c f <key>= runs ag (=a= for generic, =p= for in-project search). _Requires ag_!
+ =C-c g= opens magit status.
+ =C-c i <key>= interacts with perspectives.
+ =C-c j= dumb-jumps.
+ =C-c k= for docker actions.
+ =C-c m <key>= for multiple cursors.
+ =C-c n= browses the web.
+ =C-c o <key>= toggle (=o=), go to next (=n=) or show (=s=) bookmarks.
+ =C-c p <key>= interacts with projects.
+ =C-c q <key>= interacts with fly-checking.
+ =C-c s= uses swiper to search.
+ =C-c t <key>= opens eshell (=e=), ansi-term (=a=) or vterm (=v=).
+ =C-c u <key>= to debug (=u=) or edit template (=t=).
+ =C-c v <key>= jumps to char (=c=) or line (=v=) with avy.
+ =C-c w <key>= swaps (=s=) or deletes other windows (=d=).
+ =C-+= expands region.
+ =C-x C-c= opens this config org file.
+ =C-x r q= (really) quits.
+ =C-x r s= restarts.
+ =C-z=/=C-S-z= undos/redos.
+ =<f5>= to enter writeroom mode.
+ =<f6>= to google this.
+ =<f7>= to present org file.
+ =<f8>= to spell-check.
+ =<f9>= to resume =ivy=.
+ =<f10>= to show help for thing at point.
+ =M-o= goes to the "other" window or the last buffer.
+ =M-x= opens smex.
+ =s-k= kills the whole line.
+ =s-(S)-RET= will open an indented line above (below).

***** Hyper

The following bindings are either quick-access of already bound
actions or those that aren't essential (since having a hyper key is not
guaranteed).

+ =H-4= kills window and buffer.
+ =H-5= creates a new frame.
+ =H-a= shows agenda.
+ =H-b= switches buffer.
+ =H-B= switches to a commonly ignored buffer.
+ =H-d= opens dired relative to open file.
+ =H-f= to find with ag.
+ =H-i= switches prespective.
+ =H-k= to interact with docker.
+ =H-M= mark all like this (multiple cursors).
+ =H-m= mark next like this (multiple cursors).
+ =H-<mouse3>= adds another cursor at point.
+ =H-o= to toggle bookmarks.
+ =H-p= switches project.
+ =H-s= searches with swiper.
+ =H-<TAB>= expands snippets (in =yas-minor-mode=).
+ =H-;= (un-)comments lines.
+ =H-u= to debug.
+ =H-v= jumps to line with avy.
+ =H-w= swaps windows.

***** General

There's a third layer of key-bindings.
The three =general= mappings perform useful but not
foundational actions.

Fittingly, all =minor mode= toggle actions are invoked
using the =wal/major-key= prefix.

#+BEGIN_SRC emacs-lisp
;; American ranks
(defconst wal/general-key "H-,"
  "Wal's primary (or general) leader key.")

(defconst wal/colonel-key "H-."
  "Wal's secondary (or colonel) leader key.")

(defconst wal/major-key "H-/"
  "Wal's tertiary (or major) leader key.")

(use-package general
  :config
  (general-create-definer wal/general
    :prefix wal/general-key)
  (general-create-definer wal/colonel
    :prefix wal/colonel-key)
  (general-create-definer wal/major
    :prefix wal/major-key))
#+END_SRC

****** Caps to Hyper

I re-bound my =<CAPS>= (caps-lock) key to =Hyper_L= to use these
hyper bindings.

If you use Xorg Display Server,
you can do this by editing[fn:7] your =/usr/share/X11/xkb/symbols/pc= file like so:

#+BEGIN_SRC
...
// key <CAPS> {    [ Caps_Lock     ]   };
key <CAPS> {    [ Hyper_L       ]   };
...
// modifier_map Lock   { Caps_Lock };
modifier_map Mod3   { Hyper_L, Hyper_R };
...
// modifier_map Mod4   { <HYPR> };   
modifier_map Mod3   { <HYPR> };   
#+END_SRC 

***** Non-Use-Package Bindings

Most bindings are declared in the [[*Packages][packages]] section.

#+BEGIN_SRC emacs-lisp
;; windows
(global-set-key (kbd "H-4") 'kill-buffer-and-window)
(global-set-key (kbd "H-5")  'make-frame-command)
;; (wal/leader "4" '(kill-buffer-and-window :wk "kill buffer and window"))

;; emacs
(global-set-key (kbd "C-x r q") 'save-buffers-kill-terminal)

(defconst wal/readme-config
  (expand-file-name "README.org" wal/emacs-config-default-path)
  "The path to this config file.")

(global-set-key
  (kbd "C-x C-c")
  (lambda () (interactive)(switch-to-buffer (find-file-noselect wal/readme-config))))
#+END_SRC

**** Theme

Be sure to check out [[https://peach-melpa.org/][Peach Melpa]] to find a theme you like.

If you're using the =doom-modeline=, go for a =doom-*= theme.
Otherwise the colors might clash.

#+BEGIN_SRC emacs-lisp
;; two themes and a switch
(defvar wal/primary-emacs-theme 'kaolin-valley-dark
  "The quote-unquote default emacs theme.")

;; use `setq` in your .emacs to switch
(defvar wal/secondary-emacs-theme 'kaolin-valley-light
  "The non-default emacs theme.")

(defvar wal/active-theme wal/primary-emacs-theme
  "The active theme.")

(defun wal/theme-light-switch (&optional selection)
  "Switch from light to dark theme and vice-versa."
  (interactive)
  (disable-theme wal/active-theme)
  (cond ((or (equal wal/active-theme wal/primary-emacs-theme) (equal selection 'secondary))  
         (load-theme wal/secondary-emacs-theme t)
         (setq wal/active-theme wal/secondary-emacs-theme))
        ((or (equal wal/active-theme wal/secondary-emacs-theme) (equal selection 'secondary))
         (load-theme wal/primary-emacs-theme t)
         (setq wal/active-theme wal/primary-emacs-theme))))

;; some themes require configuration, so we only load after intialization
(defun wal/setup-visuals ()
  "Setup visual frills like theme and transparency."
  (load-theme wal/primary-emacs-theme t)
  (wal/transparency 95))

(if (daemonp)
    (add-hook 'server-after-make-frame-hook 'wal/setup-visuals)
  ;; function `wal/transparency` hasn't been untangeled yet
  (add-hook 'after-init-hook 'wal/setup-visuals))
#+END_SRC

**** Fonts

Prefer FiraCode (-> mononoki -> Liberation -> DejaVu).

To get support for ligatures, install the symbol font from [[https://github.com/tonsky/FiraCode/files/412440/FiraCode-Regular-Symbol.zip][here]].

#+BEGIN_SRC emacs-lisp
(defconst wal/default-font-size 120)
(defconst wal/default-variable-font-size 160)

(defun wal/font-candidate (&rest fonts)
  "Return the first available font from a list of FONTS."
  (--first (find-font (font-spec :name it)) fonts))

(defun wal/setup-fonts ()
  "Setup fonts."
  (set-face-attribute 'default nil
    :font (wal/font-candidate '"Fira Code" "mononoki" "Liberation Mono" "DejaVu Sans Mono")
    :height wal/default-font-size)

  ;; variable pitch face
  (set-face-attribute 'variable-pitch nil
    :font (wal/font-candidate '"Roboto" "Ubuntu" "San Francisco" "Arial") ;; you might want to change this one
    :height wal/default-variable-font-size
    :weight 'regular))

;; fonts can't be initialized thru daemon
(if (daemonp)
    (add-hook 'server-after-make-frame-hook 'wal/setup-fonts) 
  (wal/setup-fonts)) 
#+END_SRC

**** Zoning

Zone out after a couple of minutes.

#+BEGIN_SRC emacs-lisp
(require 'zone)
(zone-when-idle 180)
#+END_SRC

**** Time

I want to see the time sometimes (fullscreen).
I don't want to see the CPU load though.

#+BEGIN_SRC emacs-lisp
(setq display-time-default-load-average nil
      display-time-format               "%k:%M ")

;; note that turning this on will persist the mode in your custom.el,
;; so delete it from there if you want it gone again
(display-time-mode -1)
#+END_SRC

**** Additional Functions

Some additional functions.

***** Package-Specific

Need to know if buffer is =treemacs= buffer sometimes.

#+BEGIN_SRC emacs-lisp
(defun wal/treemacsbufferp ()
  "Check if this is the treemacs buffer."
  (eq (current-buffer) (treemacs-get-local-buffer)))
#+END_SRC

***** Garbage Collection

Better(?) garbage collection.

#+BEGIN_SRC emacs-lisp
;; trick garbage collection
(defconst wal/hundred-mb
  (* 1024 1024 100)
  "A hundred megabyte.")

(defun wal/minibuffer-setup-hook ()
  "Increase gc threshold to maximum on minibuffer setup."
  (setq gc-cons-threshold most-positive-fixnum))

(defun wal/minibuffer-exit-hook ()
  "Decrease it again on minibuffer exit."
  (setq gc-cons-threshold wal/hundred-mb))

(add-hook 'minibuffer-setup-hook #'wal/minibuffer-setup-hook)
(add-hook 'minibuffer-exit-hook  #'wal/minibuffer-exit-hook)
#+END_SRC

***** Transparency

Anyone wanna see their background?

#+BEGIN_SRC emacs-lisp
(defun wal/transparency (value)
  "Sets the transparency of the frame window. 0=transparent/100=opaque"
  (interactive "nTransparency Value 0 - 100 opaque:")
  (set-frame-parameter (selected-frame) 'alpha value))
#+END_SRC

***** Directories

Finding files should =mkdir -p= its parents.

#+BEGIN_SRC emacs-lisp
;; creating parent dirs
(defun wal/create-non-existent-directory ()
  "If a file is found in a not (yet) existing directory,
ask if it should get created."
  (let ((parent-directory (file-name-directory buffer-file-name)))
    (when (and (not (file-exists-p parent-directory))
	       (y-or-n-p (format "Directory `%s' does not exist! Create it?" parent-directory)))
      (make-directory parent-directory t))))

(add-to-list 'find-file-not-found-functions #'wal/create-non-existent-directory)
#+END_SRC

***** Buffers

I want to ignore some buffers when switching.

#+BEGIN_SRC emacs-lisp
(defun wal/is-commonly-ignored-buffer (buffer-or-string)
  "Check if provided buffer is commonly ignored."
  (or
   ;; starred buffers
   (string-match "^\\*[[:ascii:]]+\\*\\'" buffer-or-string)
   ;; dired
   (eq (with-current-buffer
           (get-buffer-create buffer-or-string)
         major-mode) 'dired-mode)
   ;; helpful buffers
   (eq (with-current-buffer
           (get-buffer-create buffer-or-string)
         major-mode) 'helpful-mode)))

(defun wal/ivy-switch-ignored-buffers (&rest r)
  "Show only commonly ignored buffers."
  (interactive)
  (let ((ivy-ignore-buffers
	 '((lambda(buffer-or-string)
	     (if (wal/is-commonly-ignored-buffer buffer-or-string)
		 nil
	       t)))))
    (wal/switch-buffer r)))
#+END_SRC

***** Other

Check for custom arguments.

#+BEGIN_SRC emacs-lisp
(defun wal/found-custom-arg (switch)
  "Check for custom SWITCH arg and delete it right away."
  (let ((found-switch (member switch command-line-args)))
    (setq command-line-args (delete switch command-line-args))
    found-switch))
#+END_SRC

*** Packages
    
What follows is a list of MELPA packages that make Emacs even more awesome.

If you wish to know more about any of them, check out the list[fn:8] of repositories
at the end of this readme/configuration or the [[https://github.com/emacs-tw/awesome-emacs][awesome-emacs]] project.

Many packages bind keys.
Check the [[*Key Bindings][key bindings section]] if you need a list of all of them.

**** ace-window

=ace-window= allows for some nifty window swapping.
We do some customization to integrate better with our buffer
switching setup.

#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :custom
  (aw-fair-aspect-ratio 4)
  (aw-dispatch-always   t)
  (aw-dispatch-alist    '((?s aw-swap-window                "swap")
                          (?m aw-move-window                "move")
                          (?h aw-split-window-horz          "horizontal split")
                          (?v aw-split-window-vert          "vertical split")
                          (?w aw-split-window-fair          "fair split")
                          (?b aw-switch-buffer-in-window    "buffer focus")
			  (?u aw-switch-buffer-other-window "buffer unfocus")
			  (?o delete-other-windows          "only")
	                  (?x aw-delete-window              "delete")
			  ;; if this has a description, it doesn't work
                          (?? aw-show-dispatch-help)))
  :init
  (advice-add
   'aw--switch-buffer
   :override (lambda (&rest r) (wal/switch-buffer r))
   '((name . "aw--switch-buffer")))
  :bind (("H-w"   . ace-window)
         ("C-c w" . ace-window)))
#+END_SRC

**** add-node-modules-path

Allows accessing a project's =node_modules=.

#+BEGIN_SRC emacs-lisp
(use-package add-node-modules-path)
#+END_SRC

**** ag

Highlight search results using the *Silver Searcher*.

This _requires_ the =ag= binary which you can get from [[https://github.com/ggreer/the_silver_searcher#installation][here]] (we will try
to download it automatically, but might fail).

#+BEGIN_SRC emacs-lisp
(use-package ag
  :ensure-system-package ag
  :custom
  (ag-highlight-search t)
  (ag-reuse-buffers    t)
  (ag-ignore-list      '("[/\\\\]\\.git\\'"
                         "[/\\\\]\\.idea\\'"
                         "[/\\\\]node_modules"
                         "[/\\\\]dist\\'"
		         "[/\\\\]build\\'"
                         "[/\\\\]\\.vscode\\'"
		         "[/\\\\]deps\\'"))
  :general
  (wal/colonel "f" '(ag-files :wk "find in files of type"))
  :bind (("C-c f a" . ag)
         ("C-c f p" . ag-project)
         ("H-f"     . ag-project)
	 ;; in dired, we change this a bit
	 (:map dired-mode-map
	   ("H-f" . ag-dired))))
#+END_SRC

**** all-the-icons

You need to install the icons yourself[fn:4].

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons)

;; use it for dired
(use-package all-the-icons-dired
  :after all-the-icons
  :diminish
  :hook (dired-mode . all-the-icons-dired-mode))
#+END_SRC

**** ansi-term

Sometimes you need a terminal.

#+BEGIN_SRC emacs-lisp
(use-package term
  :bind ("C-c t a" . ansi-term))
#+END_SRC

**** auto-package-update

Keep packages updated (disabled for now).

#+BEGIN_SRC emacs-lisp
(use-package auto-package-update
  :disabled
  :custom
  (auto-package-update-delete-old-versions t)
  (auto-package-update-hide-results        t)
  :config
  (auto-package-update-maybe))
#+END_SRC

**** autothemer

Create new themes more easily.

#+BEGIN_SRC emacs-lisp
(use-package autothemer)
#+END_SRC

**** avy

Jumping to (visible) lines and chars is fun if you are too lazy to use your mouse.

#+BEGIN_SRC emacs-lisp
(use-package avy
  :general
  (wal/general "v" '(avy-goto-whitespace-end :wk "go to whitespace"))
  (wal/colonel "v" '(avy-kill-whole-line :wk "kill specific line"))
  (wal/major   "v" '(avy-copy-line :wk "copy line and paste above"))
  :bind (("C-c v v" . avy-goto-line)
         ("C-c v c" . avy-goto-char)
	 ("H-v"     . avy-goto-line)))
#+END_SRC

**** beacon

Help me find my cursor!

#+BEGIN_SRC emacs-lisp
(use-package beacon
  :config
  (beacon-mode 1)
  :custom
  (beacon-color                             0.4)
  (beacon-blink-duration                    0.4)
  (beacon-size                              60)
  (beacon-blink-when-point-moves-vertically 2))
#+END_SRC

**** bm

Bookmarks are useful. I don't remember where I was. _Who are you?!_

#+BEGIN_SRC emacs-lisp
(use-package bm
  :init
  (setq-default bm-buffer-persistence t)
  :custom
  (bm-restore-repository-on-load t)
  (bm-repository-file            (expand-file-name "bm-persist" wal/cache-folder))
  (bm-annotate-on-create         t)
  (bm-highlight-style            'bm-highlight-only-fringe)
  (bm-cycle-all-buffers          t)
  :hook
  ((after-init        . bm-repository-load)
   (after-save        . bm-buffer-save)
   (kill-buffer       . bm-buffer-save)
   (kill-emacs        . (lambda nil
                          (bm-buffer-save-all)
                          (bm-repository-save)))
   (find-file         . bm-buffer-restore)
   (after-revert      . bm-buffer-restore)
   (vc-before-checkin . bm-buffer-save))
  :bind
  (("C-c o s" . bm-show)
   ("C-c o n" . bm-next)
   ("C-c o b" . bm-toggle)
   ("H-o"     . bm-toggle))) ;; ho-ho-ho!
#+END_SRC

**** company

Code-completion. In a box.

#+BEGIN_SRC emacs-lisp
(use-package company-box
  :diminish
  :hook (company-mode . company-box-mode))

(use-package company
  :delight " cmp"
  :custom
  (company-prefer-capf           t)
  (company-minimum-prefix-length 3)
  (company-idle-delay            0.5)
  :hook (prog-mode . company-mode))

(use-package company-restclient
  :after company)

(use-package company-web
  :after company)
#+END_SRC

**** counsel

Counsel me this, Counselor.

#+BEGIN_SRC emacs-lisp
(use-package counsel
  :general
  ;; still need to find a scheme for non-package prefixes
  (wal/major "#" '(counsel-load-theme :wk "load theme"))
  (wal/major "$" '(counsel-command-history :wk "command history"))
  (wal/major "!" '(counsel-set-variable :wk "set variable"))
  :bind (("M-x"     . counsel-M-x)
         ("<menu>"  . counsel-M-x)
         ("C-x C-f" . counsel-find-file))
  :custom
  (counsel-linux-app-format-function #'counsel-linux-app-format-function-command-only)
  :config
  (setcdr (assq 'counsel-M-x ivy-initial-inputs-alist) ""))
#+END_SRC

**** crux

Let's use =crux= for some editing magic.
Check the [[*Key Bindings][key bindings section]] for descriptions.

#+BEGIN_SRC emacs-lisp
(use-package crux
  :bind (("M-o"          . crux-other-window-or-switch-buffer)
         ("C-c c k"      . crux-kill-other-buffers)
         ;; need to find solution with treemacs open
         ("C-c c o"      . crux-open-with)
         ("S-s-<return>" . crux-smart-open-line-above)
	 ("s-<return>"   . crux-smart-open-line)
         ("s-k"          . crux-kill-whole-line)
         ("C-c c d"      . crux-duplicate-current-line-or-region)))
#+END_SRC

**** ctrlf

Replacement for =isearch=.
Important command is =C-o c= to change search style.

#+BEGIN_SRC emacs-lisp
(use-package ctrlf
  :custom
  (ctrlf-auto-recenter t)
  :config
  (ctrlf-mode +1))
#+END_SRC

**** dap-mode

Debugging using VSCode's DAP.

#+BEGIN_SRC emacs-lisp
(use-package dap-mode
  :delight " dap"
  :custom
  (lsp-enable-dap-auto-configure nil)
  (dap-python-executable "python3")
  ;; (dap-auto-configure-features '(sessions locals breakpoints))
  :config
  (dap-ui-mode 1)
  (require 'dap-node)
  (require 'dap-python)
  :bind (("C-c u" . dap-mode)
         (:map dap-mode-map
               ("H-u" . dap-hydra))))
#+END_SRC

***** Debug Templates

Here are some examples for Node.js projects using =nodemon=.

Put them in a file in your project root,
and evaluate them there using =C-x C-e=.
Adapt paths if necessary.

****** Node.js

This one is for attaching to a containerized node app.

#+BEGIN_SRC emacs-lisp :tangle no
(when (require 'dap-mode nil 'noerror)
  (progn
    (let* ((remote-root "/usr/src/app")
	   (local-root (file-name-directory buffer-file-name)))
      (dap-register-debug-template
       "attach::node"
       (list :type "node"
             :request "attach"
	     :sourceMaps t
             :remoteRoot remote-root
  	     :localRoot local-root
	     :port 9229)))))
#+END_SRC

****** Transpiled Node.js

Still some =babel= projects left.

#+BEGIN_SRC emacs-lisp :tangle no
(when (require 'dap-mode nil 'noerror)
  (progn
    (let* ((build-directory "build")
	   (remote-root (concat "/usr/src/app/" build-directory))
	   (local-root (concat (file-name-directory buffer-file-name) build-directory)))
      (dap-register-debug-template
       "attach::babel"
       (list :type "node"
             :request "attach"
	     :sourceMaps t
             :remoteRoot remote-root
  	     :localRoot local-root
	     :port 9229)))))
#+END_SRC

****** TypeScript

Compile your =src= with =--sourceMap= or set =sourceMap= to =true= in
your =tsconfig.json=.

#+BEGIN_SRC emacs-lisp :tangle no
(when (require 'dap-mode nil 'noerror)
  (progn
    (let* ((build-directory "build")
	   (remote-root (concat "/usr/src/app/" build-directory))
	   (local-root (concat (file-name-directory buffer-file-name) build-directory)))
      (dap-register-debug-template
       "attach::typescript"
       (list :type "node"
             :request "attach"
	     :sourceMaps t
             :remoteRoot remote-root
  	     :localRoot local-root
	     :port 9229)))))
#+END_SRC

**** dashboard

Let's have a dash of board.

#+BEGIN_SRC emacs-lisp
;; dependency
(use-package page-break-lines)

;; using my gitlab status messages, only one so far
(defconst wal/dashboard-footer-messages
  '(":whale2: breaching your favorite stupid framework"
    ":whale: I propel myself forward on nothing but flukes"
    ":whale: devout and up the spout")
  "The footer messages I can stand to see.")

;; ignore all files that were loaded on start-up
(defconst wal/recentf-exclude
  (append (directory-files wal/agenda-tasks-directory t "org$") '("bookmarks$" "\\.emacs$")))

;; the issue here is that magit will keep re-creating the dashboard
(defun wal/daemon-dash ()
  "For daemon mode run all functions."
  (dashboard-insert-startupify-lists)
  (switch-to-buffer dashboard-buffer-name)
  (goto-char (point-min))
  (redisplay)
  (run-hooks 'dashboard-after-initialize-hook))

;; see above
(defun wal/dashboard-setup ()
  "Set up dashboard."
  (if (daemonp)
      (add-hook 'server-after-make-frame-hook 'wal/daemon-dash t)
  (dashboard-setup-startup-hook)))

(use-package dashboard
  :after page-break-lines
  :custom
  (dashboard-banner-logo-title          "Walheimat's Emacs Config")
  (dashboard-startup-banner             (expand-file-name
	                                 "logo.png"
                                         wal/emacs-config-default-path))
  (dashboard-projects-backend           'projectile)
  (dashboard-items                      '((recents   . 5)
	                                  (projects  . 5)
                                          (agenda    . 5)
                                          (bookmarks . 5)))
  (dashboard-center-content             t)
  (dashboard-set-file-icons             t)
  (dashboard-set-navigator              t)
  (dashboard-footer-messages            wal/dashboard-footer-messages)
  (dashboard-set-init-info              t)
  (dashboard-week-agenda                nil)
  (dashboard-agenda-time-string-format "%d/%m/%y")
  
  :config
  (setq recentf-exclude wal/recentf-exclude)
  (dashboard-setup-startup-hook))
#+END_SRC

**** default-text-scale

Scale text in all buffers.
Unfortunately, the calculations are off to me; until
this is fixed, I'll disable the package.

#+BEGIN_SRC emacs-lisp
(use-package default-text-scale
  :disabled
  :custom
  (default-text-scale-amount 5)
  :config
  (default-text-scale-mode 1))
#+END_SRC

**** delight

Refine a couple of major-mode names.

#+BEGIN_SRC emacs-lisp
(use-package delight
  :config
  (delight 'dired-mode "Dired" :major)
  (delight 'js2-mode "JavaScript" :major)
  (delight 'emacs-lisp-mode "Elisp" :major))
#+END_SRC

**** diff-hl

Show diffs in the fringe.
Show diffs in =dired= buffers as well.
Refresh after =magit= is done.

#+BEGIN_SRC emacs-lisp
(use-package diff-hl
  :init
  (global-diff-hl-mode)
  :hook ((magit-post-refresh . diff-hl-magit-post-refresh)
         (dired-mode         . diff-hl-dired-mode)))
#+END_SRC

**** diminish

See individual =use-package= declarations as well,
since we =delight= in/diminish them there.

#+BEGIN_SRC emacs-lisp
(use-package diminish
  :config
  (diminish 'eldoc-mode))
#+END_SRC

**** dimmer

Dim inactive frames.
Make dimmed frames a bit dimmer.

#+BEGIN_SRC emacs-lisp
(use-package dimmer
  :diminish
  :custom
  (dimmer-fraction       0.3)
  (dimmer-adjustmentmode :both)  
  :config
  (dimmer-configure-company-box)
  (dimmer-configure-hydra)
  (dimmer-configure-magit)
  (dimmer-configure-org)
  (dimmer-configure-which-key)
  (dimmer-mode t))
#+END_SRC

**** dired

Group directories first in =dired=,
override some keybindings.

#+BEGIN_SRC emacs-lisp
(use-package dired
  :ensure nil
  :init
  (put 'dired-find-alternate-file 'disabled nil)
  :commands (dired dired-jump delete-file)
  :custom ((dired-listing-switches "-lah --group-directories-first"))
  :bind (("H-d" . dired-jump)
         (:map dired-mode-map
               ("V" . dired-display-file)    ;; overrides dired-do-run-mail
               ("-" . dired-up-directory)))) ;; overrides negative-argument
#+END_SRC

**** dired-filter

This package is awesome.
Hit =/= to filter in =dired= buffers.

#+BEGIN_SRC emacs-lisp
(use-package dired-filter
  :diminish "def")
#+END_SRC

**** diredfl

#+BEGIN_SRC emacs-lisp
(use-package diredfl
  :config
  (diredfl-global-mode))
#+END_SRC

**** docker

I use Docker a lot, don't always have to use the command line.

#+BEGIN_SRC emacs-lisp
(use-package docker
  :custom
  (docker-container-default-sort-key '("Names"))
  :general
  (wal/general "k" '(docker-compose-up :wk "docker-compose up"))
  (wal/colonel "k" '(docker-compose-exec :wk "docker-compose exec"))
  (wal/major   "k" '(docker-compose-logs :wk "docker-compose logs"))
  :bind (("C-c k" . docker)
         ("H-k"   . docker)))
#+END_SRC

**** doom-modeline

Busier and prettier modeline.
Note that this packag requires you to install =all-the-icons= fonts[fn:4].

#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :custom
  (doom-modeline-project-detection 'projectile)
  (doom-modeline-minor-modes       t)
  (doom-modeline-buffer-encoding   nil)
  (doom-modeline-icon              t)
  :config
  (doom-modeline-mode 1))
#+END_SRC

**** drag-stuff

Use the default key bindings.

#+BEGIN_SRC emacs-lisp
(use-package drag-stuff
  :delight " drg"
  :hook (prog-mode . drag-stuff-mode)
  :config
  (drag-stuff-define-keys))
#+END_SRC

**** dumb-jump

Jump to definitions (in other files).
Configure it for =ivy=.

#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
  :init
  (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
  :custom
  (dumb-jump-selector       'ivy)
  (dumb-jump-force-searcher 'ag)
  :config
  (dumb-jump-mode)
  :bind (("C-c j" . xref-find-definitions)
         ("H-j"   . xref-find-definitions)))
#+END_SRC

**** emojify

Display emojis.

You might have to call =emojify-download-emoji= to
download a set that supports your emojis.

#+BEGIN_SRC emacs-lisp
(use-package emojify
  :hook (after-init . global-emojify-mode))
#+END_SRC

**** eshell

Set up =eshell=.

#+BEGIN_SRC emacs-lisp
(use-package eshell
  :ensure nil
  :hook (eshell-mode . wal/eshell-mode-hook)
  :bind ("C-c t e" . eshell))

(use-package esh-autosuggest)

(use-package eshell-prompt-extras)

(use-package eshell-syntax-highlighting
  :config
  (eshell-syntax-highlighting-global-mode))

(defun wal/setup-eshell-ivy-completion ()
  "Setup eshell completion to use ivy."
  (define-key eshell-mode-map [remap eshell-pcomplete] 'completion-at-point))

(defun wal/eshell-mode-hook ()
  "Hooks for eshell mode."
  (esh-autosuggest-mode)
  (wal/setup-eshell-ivy-completion))

;; override how clearing the eshell works
(defun eshell/clear ()
  "Clear the shell by truncating everything."
  (interactive)
  (let ((eshell-buffer-maximum-lines 0)) (eshell-truncate-buffer)))

(with-eval-after-load "esh-opt"
  (autoload 'epe-theme-lambda "eshell-prompt-extras")
  (setq eshell-highlight-prompt nil
        eshell-prompt-function 'epe-theme-lambda))
#+END_SRC

**** evil-nerd-commenter

Comment code like in =vim=, evil, evil =vim=.

#+BEGIN_SRC emacs-lisp
(use-package evil-nerd-commenter
  :bind (("H-;"      . evilnc-comment-or-uncomment-lines)
         ("C-c c ;"  . evilnc-comment-or-uncomment-lines)))
#+END_SRC

**** eww

Browse web in Emacs.

This requires Emacs to have been compiled with =--with-xml2= flag.

#+BEGIN_SRC emacs-lisp
(use-package eww
  :ensure nil
  :general
  (wal/general "w" '(eww :wk "www the web")))
#+END_SRC

**** expand-region

One thing that can be a bit tricky is selecting regions, not anymore.

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :bind ("C-+" . er/expand-region))
#+END_SRC

**** find-file-in-project

Finding files by name should be easy.

#+BEGIN_SRC emacs-lisp
(use-package find-file-in-project)
#+END_SRC

**** fira-code-mode

I use FiraCode, this mode allows us to use ligatures.

#+BEGIN_SRC emacs-lisp
(defun wal/fira-code()
  (use-package fira-code-mode
    :diminish
    ;; use fira mode if it's the default font and the symbol font is installed
    :if (and (x-list-fonts "Fira Code Symbol") (string= "Fira Code" (face-attribute 'default :family)))
    :custom
    ;; ligatures you don't want
    (fira-code-mode-disabled-ligatures '("[]" "x"))
    :hook prog-mode))

;; we guard against font-related actions
(if (daemonp)
    (add-hook 'server-after-make-frame-hook 'wal/fira-code t)
    (wal/fira-code))
#+END_SRC


**** flycheck

=flycheck= is for all of our linting/code quality needs.

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :delight " fly"
  :custom
  (flycheck-keymap-prefix (kbd "C-c q"))
  :general
  (wal/major "q" '(flycheck-mode :wk "toggle flycheck"))
  :hook ((flycheck-mode . wal/use-eslint-from-node-modules)
         (flycheck-mode . wal/use-tslint-from-node-modules)))
#+END_SRC

**** flyspell

My spelling is bad.
Use American English for =flyspell=.

You can bring up actions (skip, save) with =M-o=.

#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :ensure nil
  :delight " fsp"
  :init
  (setq ispell-dictionary "american")
  :custom
  (flyspell-issue-message-flag nil)
  :bind ("<f8>" . flyspell-mode))

(use-package flyspell-correct
  :after flyspell
  :bind (:map flyspell-mode-map
              ("n" . flyspell-correct-next)
	      ("p" . flyspell-correct-previous)))

(use-package flyspell-correct-ivy
  :after flyspell-correct)
#+END_SRC

**** gitignore-mode

Syntax highlighting.

Necessary even for =.gitignore= files.

#+BEGIN_SRC emacs-lisp
(use-package gitignore-mode
  :mode ("/\\.npmignore\\'" "/\\.gitignore\\'"))
#+END_SRC

**** git-timemachine

If you want to go back in time and point fingers at the progenitors of doom.

#+BEGIN_SRC emacs-lisp
(use-package git-timemachine
  :general
  (wal/colonel "@" '(git-timemachine-toggle :wk "toggle git timemachine")))
#+END_SRC

**** golden-ratio

Use the golden ratio.

#+BEGIN_SRC emacs-lisp
(use-package golden-ratio
  :diminish
  :init
  ;; make sure to run golden ratio after ace switch
  (advice-add 'aw-switch-to-window :after #'golden-ratio)
  :config
  ;; this doesn't work for me, see alt solution above
  ;; (push 'aw-switch-to-window golden-ratio-extra-commands)
  (golden-ratio-mode 1))
#+END_SRC

**** google-this

If you're too lazy to copy and paste.

#+BEGIN_SRC emacs-lisp
(use-package google-this
  :diminish
  :general
  (wal/general "g" '(google-this :wk "google this"))
  (wal/colonel "g" '(google-this-region :wk "google selected region"))
  (wal/major   "g" '(counsel-google :wk "google with counsel"))
  :bind ("<f6>" . 'google-this-mode-submap)
  :config
  (google-this-mode 1))
#+END_SRC

**** helpful

Let's try (to be) =helpful=.

#+BEGIN_SRC emacs-lisp
(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :general
  (wal/general "h" '(counsel-describe-variable :wk "describe variable"))
  (wal/colonel "h" '(counsel-describe-function :wk "describe function"))
  (wal/major "h" '(helpful-at-point :wk "helpful at point"))
  :bind
  ("<f10>"                   . helpful-at-point)
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command]  . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key]      . helpful-key))
#+END_SRC

**** highlight-indent-guides

Show indentation.

#+BEGIN_SRC emacs-lisp
(use-package highlight-indent-guides
  ;; don't need to see this
  :diminish highlight-indent-guides-mode
  :custom
  (highlight-indent-guides-method 'character)
  (highlight-indent-guides-responsive 'top)
  :hook (prog-mode . highlight-indent-guides-mode))
#+END_SRC

**** highlight numbers

Make numbers stand out.

#+BEGIN_SRC emacs-lisp
(use-package highlight-numbers
  :hook (prog-mode . highlight-numbers-mode))
#+END_SRC

**** hl-todo

Highlight =TODO=, =FIXME= etc. in =prog= modes.

#+BEGIN_SRC emacs-lisp
(use-package hl-todo
  :hook (prog-mode . hl-todo-mode))
#+END_SRC

**** hydra

We use =hydra= to trigger grouped actions.

#+BEGIN_SRC emacs-lisp
(use-package hydra)
#+END_SRC

**** ivy

We use =ivy= for narrowing our options.

#+BEGIN_SRC emacs-lisp
;; change to ivy-switch-buffer if you don't use perspective
(defalias 'wal/switch-buffer 'persp-ivy-switch-buffer)

;; hide dired, docker, ag and default emacs buffers when switching
(defconst wal/ivy-ignore-buffers
  '(wal/is-commonly-ignored-buffer
    "\\` "
    "\\`\\*tramp/")
  "The buffers I don't want to see unless I have to.")

;; toggle custom ignore on or off
(defun wal/query-ivy-ignore ()
  "Query if custom ivy buffer ignore list should be used."
  (interactive)
  (if (y-or-n-p "Use custom ivy buffer ignore?")
      (setq ivy-ignore-buffers wal/ivy-ignore-buffers)
    (setq ivy-ignore-buffers '("\\` " "\\`\\*tramp/"))))

(use-package ivy
  :init
  (setq enable-recursive-minibuffers t)
  :custom
  (ivy-use-virtual-buffers t)
  (ivy-ignore-buffers      wal/ivy-ignore-buffers)
  (ivy-count-format        "%d/%d ")
  (ivy-wrap                t)
  :bind (("C-x b" . wal/switch-buffer)
         ("H-b"   . wal/switch-buffer)
         ("H-B"   . wal/ivy-switch-ignored-buffers)
         ("<f9>"  . ivy-resume))
  :config
  (ivy-mode 1))
#+END_SRC

**** ivy-rich

Some nicer candidate view when switching buffers.

#+BEGIN_SRC emacs-lisp
(defun wal/ivy-rich-switch-buffer-icon (candidate)
  "Switch buffer icon for CANDIDATE."
  (with-current-buffer (get-buffer candidate)
    (let ((icon (all-the-icons-icon-for-mode major-mode)))
      (if (symbolp icon)
          (all-the-icons-icon-for-mode 'fundamental-mode)
        icon))))

(use-package ivy-rich
  :after ivy
  :config
  (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
  (setq ivy-rich-display-transformers-list
        (plist-put ivy-rich-display-transformers-list 
		   'wal/switch-buffer
		   '(:columns
		     ((ivy-rich-candidate (:width 30))
		      (ivy-rich-switch-buffer-size (:width 7))
		      (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
		      (ivy-rich-switch-buffer-project (:width 30 :face success))
		      ;; (ivy-rich-switch-buffer-major-mode (:width 8 :face warning))
		      (wal/ivy-rich-switch-buffer-icon (:width 2))
		      (ivy-rich-switch-buffer-path (:width (lambda (x)
							     (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
		     :predicate
		     (lambda (cand) (get-buffer cand)))))
  (ivy-rich-mode 1))
#+END_SRC

**** kaolin

This is a themes collection I sometimes pick from.

#+BEGIN_SRC emacs-lisp
(use-package kaolin-themes
  :custom
  (kaolin-ocean-alt-bg                      t)
  (kaolin-themes-italic-comments            t)
  (kaolin-themes-git-gutter-solid           t)
  ;; modeline border
  (kaolin-themes-modeline-border            nil)
  ;; distinct background for fringe and line numbers
  (kaolin-themes-distinct-fringe            t)
  ;; distinct colors for company popup scrollbar
  (kaolin-themes-distinct-company-scrollbar t)
  :config
  ;; treemacs
  (kaolin-treemacs-theme))
#+END_SRC

**** kubernetes

Who doesn't like pods and stuff?

#+BEGIN_SRC emacs-lisp
(use-package kubernetes
  :commands (kubernetes-overview))
#+END_SRC

**** lsp-mode

Prefer =capf=, bigger delay.

#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :general
  (wal/major "l" '(lsp-mode :wk "toggle LSP"))
  :custom
  (lsp-completion-provider :capf)
  (lsp-prefer-capf         t)
  (lsp-idle-delay          1.5)
  (lsp-keymap-prefix "C-c l")
  :config
  ;; ignore elixir build and dependency folders
  (add-to-list 'lsp-file-watch-ignored "[/\\\\]_build$")
  (add-to-list 'lsp-file-watch-ignored "[/\\\\]deps$"))

(use-package lsp-ui)
#+END_SRC

***** Language Servers 

Configure or register language servers.

You will have to install them yourself.[fn:9]

#+BEGIN_SRC emacs-lisp
;;; elixir
(defconst elixir-ls-release-location
  (expand-file-name "ls/elixir" user-emacs-directory)
  "Location of the Elixir language server.")

(if (file-exists-p (expand-file-name "language_server.sh" elixir-ls-release-location))
    (add-to-list 'exec-path elixir-ls-release-location)
  (add-hook 'elixir-mode-hook 'lsp))

;;; prolog
(lsp-register-client
 (make-lsp-client
  :new-connection
  (lsp-stdio-connection (list "swipl"
                              "-g" "use_module(library(lsp_server))."
                              "-g" "lsp_server:main"
                              "-t" "halt"
                              "--" "stdio"))
  :major-modes '(prolog-mode)
  :priority 1
  :multi-root t
  :server-id 'prolog-ls))
#+END_SRC

**** magit

Version control has never been this easy before.

#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind (("C-c g" . magit-status)
         ("H-g"   . magit-status)))
#+END_SRC

**** mode-line-bell

Make the bell visual.

#+BEGIN_SRC emacs-lisp
(use-package mode-line-bell
  :custom
  (mode-line-bell-flash-time 0.1)
  :config
  (mode-line-bell-mode))
#+END_SRC

**** multiple-cursors

Sometimes a lot of things are similarly wrong.
It's nice to change everything at once.

#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :bind
  (("H-<mouse-3>" . mc/add-cursor-on-click)
   ("C-c m n"     . mc/mark-next-like-this)
   ("H-m"         . mc/mark-next-like-this)
   ("C-c m p"     . mc/mark-previous-like-this)
   ("C-c m a"     . mc/mark-all-like-this)
   ("H-M"         . mc/mark-all-like-this)))
#+END_SRC

**** mwim

Move where I want.
Useful for comments.

#+BEGIN_SRC emacs-lisp
(use-package mwim
  :bind (("C-a" . mwim-beginning)
         ("C-e" . mwim-end)))
#+END_SRC

**** origami

Code folding.
Unfortunately has some performance issues.
This package also uses the deprecated =cl= package,
leading to warning from emacs version 27 onwards.

Disabled for now.

#+BEGIN_SRC emacs-lisp
(use-package origami
  :disabled
  :custom
  (origami-fold-replacement "⋯")
  :hook (prog-mode . origami-mode)
  :bind (("C-c o" . origami-toggle-node)))
#+END_SRC

**** perspective

Have some perspective, man.

#+BEGIN_SRC emacs-lisp
(defconst wal/default-perspective
  "walheimat"
  "The name of my default perspective.")

(use-package perspective
  :custom-face
  (persp-selected-face ((t (:weight bold :foreground "burlywood"))))
  :general
  (wal/general "i" '(persp-kill :wk "change perspective name"))
  (wal/colonel "i" '(persp-add-buffer :wk "add buffer to perspective"))
  (wal/major "i" '(persp-remove-buffer :wk "remove buffer from perspective"))
  :bind ("H-i" . persp-switch)
  :custom
  (persp-modestring-dividers '("(" ")" "/"))
  (persp-initial-frame-name  wal/default-perspective)
  (persp-state-default-file  (expand-file-name "persp-persist" wal/cache-folder))
  (persp-mode-prefix-key     (kbd "C-c i"))
  :config
  (persp-mode))

;; not sure there's much benefit to this
(use-package persp-projectile
  :disabled
  :after perspective
  :bind ("C-c ö" . projectile-persp-switch-project))

;; no idea why putting this in :hook kills the package
(add-hook 'kill-emacs-hook #'persp-state-save)
#+END_SRC

**** prescient

Better short-term-memory for =ivy=.

#+BEGIN_SRC emacs-lisp
(use-package prescient
  :custom
  (prescient-sort-length-enable nil)
  (prescient-save-file (expand-file-name "prescient-persist" wal/cache-folder))
  (prescient-filter-method '(literal initialism fuzzy))
  :config
  (prescient-persist-mode +1))

(use-package ivy-prescient
  :after counsel
  :custom
  ;; default plus `wal/switch-buffer`
  (ivy-prescient-sort-commands '(:not swiper swiper-isearch ivy-switch-buffer wal/switch-buffer))
  (ivy-prescient-retain-classic-highlighting t)
  :config
  (ivy-prescient-mode +1))

(use-package company-prescient
  :after company
  :config
  (company-prescient-mode +1))
#+END_SRC

**** prettier

Prettify your ugly JavaScript.

#+BEGIN_SRC emacs-lisp
(use-package prettier
  :general
  (wal/general js2-mode-map "," '(prettier-prettify :wk "prettify")))
#+END_SRC

**** projectile

Projects in Emacs.
You don't really _need_ =treemacs=.

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :diminish " pjt"
  :general
  (wal/general "p" '(projectile-find-file :wk "find file in project")) 
  (wal/colonel "p" '(projectile-find-dir :wk "find dir in project")) 
  (wal/major   "p" '(projectile-kill-buffers :wk "kill project buffers")) 
  :bind ("H-p" . projectile-switch-project)
  :custom
  (projectile-completion-system     'ivy)
  (projectile-mode-line-function    '(lambda() (format " {%s}" (projectile-project-name))))
  (projectile-switch-project-action #'projectile-dired)
  (projectile-sort-order            'recentf)
  :config
  ;; (add-to-list 'projectile-globally-ignored-directories "node_modules")
  ;; (add-to-list 'projectile-globally-ignored-directories "build")
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (projectile-mode +1))
#+END_SRC

***** counsel-projectile

Add =counsel= integration.

#+BEGIN_SRC emacs-lisp
(use-package counsel-projectile
  :after projectile
  :bind (:map projectile-command-map
          ("s s" . counsel-projectile-ag)))
#+END_SRC

**** rainbow

Show colors in source code and make delimiters stand out.

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

(use-package rainbow-mode
  :diminish
  :hook (prog-mode . rainbow-mode))
#+END_SRC

**** restart-emacs

Sometimes I restart for fun.

#+BEGIN_SRC emacs-lisp
(use-package restart-emacs
  :custom
  (restart-emacs-restore-frames t)
  :bind ("C-x r s" . restart-emacs))
#+END_SRC

**** restclient

Postman is passé.
I use a =.http= file extension for my request examples.

#+BEGIN_SRC emacs-lisp
(use-package restclient
  :mode ("\\.http\\'" . restclient-mode))
#+END_SRC

**** request

Not used yet, but will in the future.

#+BEGIN_SRC emacs-lisp
(use-package request)
#+END_SRC

**** s

String manipulation utility.

#+BEGIN_SRC emacs-lisp
(use-package s)
#+END_SRC

**** selectrum

Alternative for ivy.
Sunken cost thinking prevents a switch for now.

#+BEGIN_SRC emacs-lisp
(use-package selectrum
  :disabled
  :config
  (selectrum-mode +1))
#+END_SRC

**** smartparens

Create a pairs automatically.

#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :diminish smartparens-mode
  :init
  (require 'smartparens-config)
  :hook (prog-mode . smartparens-mode))
#+END_SRC

**** smeargle

Highlight sections by edit date.

#+BEGIN_SRC emacs-lisp
;; make it toggle
(defvar wal/smeargle-on
  nil
  "Whether smeargle is already on.")

(defun wal/smeargle-toggle ()
  "Toggle smeargle on/off."
  (interactive)
  (if smeargle-on
      (progn
	(setq smeargle-on nil)
	(smeargle-clear))
    (progn
      (setq smeargle-on t)
      (smeargle))))

(use-package smeargle)
#+END_SRC

**** smex

Show completions for =M-x= in a buffer.

Only used for sorting at the moment.

#+BEGIN_SRC emacs-lisp
(use-package smex
  :disabled
  :defer 1
  ;; :bind ("M-x" . smex)
  :after counsel)
#+END_SRC

**** smooth-scrolling

Smooth scrolling at the margins using =C-n= and =C-p=.

#+BEGIN_SRC emacs-lisp
(use-package smooth-scrolling
  :custom
  (smooth-scroll-margin 4)
  :config
  (smooth-scrolling-mode 1))
#+END_SRC

**** so-long

For files whose lines are too long (no longer
needed in Emacs 27+).

#+BEGIN_SRC emacs-lisp
(if (version< emacs-version "27")
  (use-package so-long
    :config
    (global-so-long-mode 1)))
#+END_SRC

**** swiper

Smart searching with =ivy=.

#+BEGIN_SRC emacs-lisp
(use-package swiper
  :after ivy
  :general
  (wal/general "s" '(swiper-all :wk "search all buffers"))
  (wal/colonel "s" '(swiper-multi :wk "search multiple buffers"))
  (wal/major   "s" '(swiper-thing-at-point :wk "search thing at point"))
  :bind (("C-c s" . swiper)
         ("H-s"   . swiper)
         (:map swiper-map
               ("C-c v" . swiper-avy))))
#+END_SRC

**** symon

Show some system stats when nothing else is going on.

#+BEGIN_SRC emacs-lisp
(use-package symon
  :if (eq system-type 'gnu/linux)
  :custom
  (symon-sparkline-type 'bounded)
  (symon-delay          10)
  (symon-monitors       '(symon-linux-cpu-monitor
			  symon-linux-memory-monitor
			  symon-linux-network-rx-monitor
			  symon-linux-network-tx-monitor))
  :config
  (symon-mode))
#+END_SRC

**** telephone-line

A slightly nicer mode-line (disabled in favor of =doom-modeline= for now).

#+BEGIN_SRC emacs-lisp
(use-package telephone-line
  :disabled
  :init
  (setq telephone-line-lhs
	'((evil   . (telephone-line-buffer-segment))
	  (accent . (telephone-line-vc-segment))
	  (nil    . (telephone-line-minor-mode-segment
		     telephone-line-process-segment))))
  (setq telephone-line-rhs
	'((nil    . (telephone-line-misc-info-segment
                     telephone-line-flycheck-segment))
	  (accent . (telephone-line-major-mode-segment))
	  (evil   . (telephone-line-airline-position-segment))))
  (setq telephone-line-primary-right-separator 'telephone-line-identity-left
        telephone-line-secondary-right-separator 'telephone-line-identity-hollow-left
        telephone-line-primary-left-separator 'telephone-line-identity-right
        telephone-line-secondary-left-separator 'telephone-line-identity-hollow-right)
  :config
  (telephone-line-mode t))
#+END_SRC

**** treemacs

I'm now a fan of =dired=, but sometimes the "ineluctable modality of the 
visible" is nice, so let's show some _dirs_.

#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :disabled
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-indentation                   1
          treemacs-width                         35
	  treemacs-move-forward-on-expand        t
	  treemacs-follow-after-init             nil
          treemacs-indentation-string            " ⁝ "
          treemacs-is-never-other-window         t
	  treemacs-no-delete-other-windows       nil
          treemacs-persist-file                  (expand-file-name "treemacs-persist" wal/cache-folder)
          treemacs-show-hidden-files             t
          treemacs-file-event-delay              1000)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)

    (pcase (cons (not (null (executable-find "git")))
		 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'extended))))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-c n 1"   . treemacs-delete-other-windows)
        ("C-c n n"   . treemacs)
        ("C-c n b"   . treemacs-bookmark)
        ("C-c n M-t" . treemacs-find-tag)))
#+END_SRC

***** Treemacs Packages

Some treemacs integration packages.

#+BEGIN_SRC emacs-lisp
(use-package treemacs-evil
  :disabled
  :after treemacs evil)

(use-package treemacs-projectile
  :disabled
  :after treemacs projectile)

(use-package treemacs-icons-dired
  :disabled
  :after treemacs dired
  :config (treemacs-icons-dired-mode))

(use-package treemacs-magit
  :disabled
  :after treemacs magit)

;; this supposedly works with perspective but it fails
(use-package treemacs-persp
  :disabled
  :after treemacs persp-mode
  :config (treemacs-set-scope-type 'Perspectives))

;; start with treemacs open (or not)
;; (treemacs)
#+END_SRC

**** typo

Access complex punctuation.

To me this doesn't necessarily make sense for all =text-mode=
modes (like =org-mode=), so instead it needs to be triggered
explicitly.

#+BEGIN_SRC emacs-lisp
(use-package typo
  :diminish " typ"
  :general
  (wal/general text-mode-map "," '(typo-mode :wk "toggle typo mode")))
#+END_SRC

**** undo-fu

Undoing un-undoing is weird in Emacs.

#+BEGIN_SRC emacs-lisp
(use-package undo-fu
  :init
  (global-unset-key (kbd "C-z"))
  :bind (("C-z"   . undo-fu-only-undo)
         ("C-S-z" . undo-fu-only-redo)))
#+END_SRC

**** use-package-ensure-system-package

Ensure binaries.

#+BEGIN_SRC emacs-lisp
(use-package use-package-ensure-system-package)
#+END_SRC

**** visual-fill-column

Makes presentations a bit nicer.

#+BEGIN_SRC emacs-lisp
(use-package visual-fill-column)
#+END_SRC

**** vterm

=vterm= can be an alternative to included shells.
We also install =vterm-toggle=.

Also, if you're on an older Ubuntu version (like my work PC),
the =libvterm= package might be too old, but you could
always try to build from source ...

#+BEGIN_SRC emacs-lisp
(unless (version< emacs-version "27.0")
  (use-package vterm
    :custom
    (vterm-kill-buffer-on-exit t)
    :config
    (when (file-exists-p "/bin/fish")
      (setq vterm-shell "/bin/fish")))

  (use-package vterm-toggle
    :custom
    (vterm-toggle-fullscreen-p nil)
    (vterm-toggle-scope 'project)
    :init
    (add-to-list 'display-buffer-alist
		 '((lambda(bufname _) (with-current-buffer bufname (equal major-mode 'vterm-mode)))
                   (display-buffer-reuse-window display-buffer-in-side-window)
                   (side . bottom)
                   (dedicated . t)
		   (window-height . 0.3)
                   (reusable-frames . visible)))
   :bind (("H-t"     . vterm-toggle)
          ("C-c t v" . vterm-toggle))))
#+END_SRC

**** which-key

Show the next possible key presses towards an action.

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :diminish
  :custom
  ;; big enough to not mess up avy line search
  (which-key-idle-delay 1.5)
  :config
  (which-key-mode))
#+END_SRC

**** writeroom-mode

Create a room of one's own.
I use a different (light) theme here.

#+BEGIN_SRC emacs-lisp
(use-package writeroom-mode
  :hook ((writeroom-mode-enable  . (lambda() (wal/theme-light-switch 'secondary)))
         (writeroom-mode-disable . (lambda() (wal/theme-light-switch 'primary))))
  :general
  (wal/major "w" '(writeroom-mode :wk "toggle writeroom"))
  :bind ("<f5>" . writeroom-mode))
#+END_SRC

**** yasnippet

Use snippets in =prog= mode buffers.
Because I also use company, =yas-expand= is mapped to =H-e=,
if you don't have a hyper key, bind it to a personal binding.

#+BEGIN_SRC emacs-lisp
(use-package yasnippet-snippets
  :after yasnippet
  :config
  (yas-reload-all))

(use-package yasnippet
  :delight " yas"
  :general
  (wal/general "y" '(yas-visit-snippet-file :wk "visit snippet file"))
  (wal/colonel "y" '(yas-new-snippet :wk "create new snippet"))
  (wal/major   "y" '(yas-minor-mode :wk "toggle yasnippet"))
  :bind ((:map yas-minor-mode-map
               ("<tab>"    . nil)
	       ("TAB"      . nil)
	       ("H-<tab>"  . #'yas-expand)))
  ;; :config
  ;; (add-hook 'company-mode-hook (lambda ()
  ;;   (substitute-key-definition 'company-complete-common
  ;;                              'company-yasnippet-or-completion
  ;;                               company-active-map)))
  :hook (prog-mode . yas-minor-mode))

;; (defun company-yasnippet-or-completion ()
;;   (interactive)
;;   (let ((yas-fallback-behavior nil))
;;     (unless (yas-expand)
;;       (call-interactively #'company-complete-common))))
#+END_SRC

*** Mode Configs

Configure major modes.

**** angular-mode

You might think Angular is dead and you'd be right but not everyone knows yet.

#+BEGIN_SRC emacs-lisp
(use-package angular-mode
  :mode ("\\.component.css\\'" . css-mode)
  :init
  ;; adapt, obviouisly
  (let* ((node-lts "14.8.0")
         (node-nvm-lib (format ".config/nvm/%s/lib/node_modules" node-lts))
         (node-abs (expand-file-name node-nvm-lib "~")))
    (setq lsp-clients-angular-server-command
  	  `("node"
            ,(expand-file-name "@angular/language-server" node-abs)
	    "--ngProbeLocations"
	    ,node-abs
	    "--tsProbeLocations"
	    ,node-abs
	    "--stdio"))))
#+END_SRC

**** crontab-mode

It's time to deal with this.

#+BEGIN_SRC emacs-lisp
(use-package crontab-mode)
#+END_SRC

**** emacs-lisp

Enable =flycheck=.

#+BEGIN_SRC emacs-lisp
(use-package emacs-lisp
  :ensure nil
  :hook (emacs-lisp-mode . wal/elisp-mode-hook))

(defun wal/elisp-mode-hook ()
  "Hooks for lisp interaction mode."
  (message "So it's just a bunch of lists?")
  (flycheck-mode 1))
#+END_SRC

**** css-mode

Just activate =flycheck= and tabs for now.

#+BEGIN_SRC emacs-lisp
(use-package css-mode
  :ensure nil
  :hook (css-mode . wal/css-mode-hook))

(defun wal/css-mode-hook ()
  "Hooks for css mode."
  (message "Centering? It's simple. Here's 15 ways to do it.")
  (add-node-modules-path)
  (wal/enable-tabs)
  (flycheck-mode))
#+END_SRC

**** dockerfile-mode

Make =Dockerfiles= look nice.

#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode)
#+END_SRC

**** elixir-mode

Enable =flycheck=.

#+BEGIN_SRC emacs-lisp
(use-package elixir-mode
  :hook (elixir-mode . wal/elixir-mode-hook))

(defun wal/elixir-mode-hook ()
  "Hooks for elixir mode."
  (message "Mixin' potions")
  (lsp)
  (flycheck-mode))
#+END_SRC

**** haskell-mode

Don't use haskell much yet.

#+BEGIN_SRC emacs-lisp
(use-package haskell-mode)
#+END_SRC

**** json-mode

Enable tabs and =flycheck=.

#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :hook (json-mode . wal/json-mode-hook))

(defun wal/json-mode-hook ()
  "Hooks for json mode."
  (message "JSON ...? JSON?! JSON!!")
  (flycheck-mode 1)
  (rainbow-delimiters-mode))
#+END_SRC

**** js2-mode

Enable =flycheck= and disable internal checker.

#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :mode "\\.js\\'"
  :init
  (setq-default js2-show-parse-errors nil
                js2-strict-missing-semi-warning nil)
  :hook (js2-mode . wal/js2-mode-hook))

(defun wal/js2-mode-hook ()
  "Hooks for js2 mode."
  (message "NaN !== NaN")
  (wal/enable-tabs)
  (add-node-modules-path)
  (flycheck-mode 1)
  (rainbow-delimiters-mode)
  (add-hook 'local-write-file-hooks
	    (lambda ()
	      (delete-trailing-whitespace)
              nil)))
#+END_SRC

**** lua-mode

Why not. It can be /awesome/.

#+BEGIN_SRC emacs-lisp
(use-package lua-mode)
#+END_SRC

**** markdown-mode

Markdown. Sometimes you need it.

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode)
#+END_SRC

**** org-mode

Org mode is the best thing about Emacs. Check out the [[https://orgmode.org/manual/][manual]].

***** The Mode Itself

Use bullets mode and make the ellipses bendy arrows. When a =TODO= is =DONE=, log time.
We also make the sequence from =TODO= to =DONE= more granular and add another =DONE=-like
state =CANCELLED=.

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :hook (org-mode . (lambda() (org-bullets-mode t))))

(defun wal/org-mode ()
  "Life shouldn't be a drag in org-mode."
  (message "Organize! Seize the means of production!")
  (drag-stuff-mode -1))

(use-package org
  :ensure nil
  ;; disable drag-stuff-mode in org-mode
  :hook (org-mode . wal/org-mode)
  :config
  ;; sometimes md export is missing
  (require 'ox-md nil t)
  :init
  (add-to-list 'org-global-properties
               '("Effort_ALL". "30m 1h 2h 4h 6h 1d 2d"))
  :custom
  (org-ellipsis                   "↷")
  (org-log-done                   t)
  (org-startup-truncated          nil)
  (org-startup-folded             'overview)
  (org-directory                  wal/org-directory)
  (org-default-notes-file         (concat org-directory "/notes.org"))
  (org-startup-with-inline-images t)
  ;; be sure to add archive tag with org-toggle-archive-tag
  (org-archive-location           "::* Archived")
  (org-todo-keywords
	'((sequence "TODO(t)" "IN PROGRESS(p)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)"))))

(setq org-log-done                           'time
      org-clock-idle-time                    nil
      org-clock-continuously                 nil
      org-clock-persist                      t
      org-clock-in-switch-to-state           "IN PROGRESS"
      org-clock-in-resume                    nil
      org-clock-report-include-clocking-task t
      org-clock-out-remove-zero-time-clocks  t
      ;; Too many clock entries clutter up a heading
      org-log-into-drawer                    t
      org-clock-into-drawer                  1)

(require 'org-install)
(add-to-list 'org-modules 'org-habit)
(setq org-habit-graph-column          105
      ;; this doesn't seem to affect anything
      org-archive-subtree-save-file-p t)

(org-load-modules-maybe t)

(defun wal/org-make-habit()
  "Make it a habit, dammi!"
  (interactive)
  (org-set-property "STYLE" "habit"))

(setq org-use-speed-commands t
      org-speed-commands-user
      '(("w" widen)
        ("n" org-narrow-to-subtree)
	;; defaults are I and O
	("i" org-clock-in)
	("o" org-clock-out)
        ("a" org-archive-subtree)
        ("r" org-clock-report)))

;; tags differentiated by # and @
(setq org-tag-alist
      '(;; depth
	("@immersive" . ?i)
	("@process"   . ?p)
	;; context
	("@work"      . ?w)
	("@home"      . ?h)
	("@away"      . ?a)
	("@repeated"  . ?r)
	;; time
	("@short"     . ?<)
	("@medium"    . ?=)
	("@long"      . ?>)
	;; energy
	("@easy"      . ?1)
	("@average"   . ?2)
	("@challenge" . ?3)
	;; category
	("@dev"       . ?d)
	("@bla"       . ?b)
	("@edu"       . ?e)
	))
#+END_SRC

***** Agendas

Everything concerning agendas.

This is mostly based on [[https://github.com/mwfogleman/.emacs.d/blob/master/michael.org][mwfogleman]]'s Emacs config.

#+BEGIN_SRC emacs-lisp
(use-package org-super-agenda
  :custom
  (org-super-agenda-groups
   '((:name "Schedule"
	    :time-grid t)
     (:name "Unscheduled"
	    :scheduled nil)
     (:name "Leftovers"
	    :and (
                  :todo ("IN PROGRESS" "WAITING")
                  :scheduled past
                  :not (:tag "@repeated")))
     (:discard (:anything t))))
  :init
  ;; not sure why this can't be in config
  (org-super-agenda-mode)
  :general
  (wal/general org-agenda-keymap "w" '(org-agenda-write :wk "write agenda"))
  :bind (("C-c a" . org-agenda)
         ("H-a"   . org-agenda)))

;; we hide all @-tags
(setq org-agenda-hide-tags-regexp "@")

(setq org-agenda-files `(,wal/agenda-tasks-directory))
#+END_SRC

***** Presentations

Use =org-tree-slide= for presentations.

#+BEGIN_SRC emacs-lisp
(defun wal/tree-slide-toggle-visibility ()
  "Toggle visibility of line and cursor."
  (interactive)
  (if (bound-and-true-p global-hl-line-mode)
    (progn
      (setq cursor-type nil)
      (global-hl-line-mode -1))
    (progn
      (setq cursor-type t)
      (global-hl-line-mode 1))))

(defun wal/tree-slide-play ()
  "Make presentable."
  (setq cursor-type nil)
  (global-hl-line-mode 1)
  (beacon-mode -1)
  (variable-pitch-mode 1)
  (setq visual-fill-column-width 140
        visual-fill-column-center-text t
	visible-cursor nil)
  (visual-fill-column-mode 1)
  ;; cribbed from daviwil's emacs-from-scratch
  (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch :height wal/default-font-size)
  (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
  (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch) 
  (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch)))

(defun wal/tree-slide-stop ()
  "We no longer care about presentation."
  (setq cursor-type t)
  (global-hl-line-mode 1)
  (visual-fill-column-mode 0)
  (variable-pitch-mode 0)
  (beacon-mode 1))

(use-package org-tree-slide
  :hook ((org-tree-slide-play . wal/tree-slide-play)
         (org-tree-slide-stop . wal/tree-slide-stop))
  :general
  (wal/general org-mode-map "," '(org-tree-slide-mode :wk "slideshow"))
  :bind (("<f7>" . org-tree-slide-mode)
         (:map org-tree-slide-mode-map
          ("n" . org-tree-slide-move-next-tree)
	  ("p" . org-tree-slide-move-previous-tree)
	  ("v" . wal/tree-slide-toggle-visibility))))
#+END_SRC

***** Zettelkasten

Let's give =org-roam= a try.

You will need to install =sqlite3= and =graphviz= manually.

#+BEGIN_SRC emacs-lisp
(defvar wal/org-roam-dailies-directory "tagebuch/"
  "The directory for dailies.")

;; has to be created manually for now
(defvar wal/org-roam-index-file "verzeichnis.org"
  "The name of the index file.")

;; not sure why we need to do it this way
(let ((index-file (expand-file-name wal/org-roam-index-file wal/org-roam-directory)))
  (unless (file-exists-p index-file)
    (write-region "* Zettelkasten" nil index-file)))

(use-package org-roam
  :if (executable-find "sqlite3")
  :hook (after-init . org-roam-mode)
  :custom
  (org-roam-directory wal/org-roam-directory)
  (org-roam-index-file wal/org-roam-index-file)
  (org-roam-dailies-directory wal/org-roam-dailies-directory)
  (org-roam-completion-system 'ivy)
  :bind (("H-n" . org-roam-jump-to-index)
         (:map org-roam-mode-map
              (("C-c n l" . org-roam)
               ("C-c n f" . org-roam-find-file)
               ("C-c n g" . org-roam-graph)))
         (:map org-mode-map
              (("C-c n i" . org-roam-insert)
               ("C-c n I" . org-roam-insert-immediate))))
  :config
  (let* ((fname (concat wal/org-roam-dailies-directory "%<%Y-%m-%d>")))
    (setq org-roam-dailies-capture-templates
        `(("w" "work" entry
           #'org-roam-capture--get-point
           "* %?"
           :file-name ,fname
           :head "#+title: %<%Y-%m-%d>\n"
           :olp ("Work notes"))

          ("j" "journal" entry
           #'org-roam-capture--get-point
           "* %?"
           :file-name ,fname
           :head "#+title: %<%Y-%m-%d>\n"
           :olp ("Journal"))))))
#+END_SRC

**** python-mode

Enable =flycheck=.
This mode is built-in.

#+BEGIN_SRC emacs-lisp
(use-package python-mode
  :ensure nil
  :hook (python-mode . wal/python-mode-hook)
  :init
  ;; use python3 as default python command
  (setq py-python-command        "python3"
        python-shell-interpreter "python3"))

(defun wal/python-mode-hook ()
  "Hooks for python mode."
  (message "Sssnake_case!")
  (flycheck-mode 1)
  (lsp)
  (add-hook 'local-write-file-hooks
	    (lambda ()
	      (delete-trailing-whitespace)
              nil)))
#+END_SRC

**** rjsx-mode

Pretty much like =js2=.

#+BEGIN_SRC emacs-lisp
(use-package rjsx-mode
  :mode "\\.jsx\\'"
  :hook (rjsx-mode . wal/rjsx-mode-hook))

(defun wal/rjsx-mode-hook ()
  "Hooks for rjsx mode."
  (message "Extend those ugly JavaScripts of yours!")
  (add-node-modules-path)
  (wal/enable-tabs)
  (flycheck-mode)
  (setq-local indent-line-function 'js-jsx-indent-line)
  (add-hook 'local-write-file-hooks
	    (lambda ()
	      (delete-trailing-whitespace)
              nil)))
#+END_SRC

**** typescript-mode

Enable =lsp=, =flycheck=.

#+BEGIN_SRC emacs-lisp
(use-package typescript-mode
  :mode "\\.ts\\'"
  :hook (typescript-mode . wal/typescript-mode-hook))

(defun wal/typescript-mode-hook ()
  "Hooks for typescript mode."
  (message "This is any, that is any, everything is any!")
  (wal/enable-tabs)
  (add-node-modules-path)
  (flycheck-mode 1)
  (lsp)
  (add-hook 'local-write-file-hooks
	    (lambda ()
	      (delete-trailing-whitespace)
              nil)))
#+END_SRC

**** web-mode

Web mode uses =flycheck=, prompts user if =lsp= should be enabled.

#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :hook (web-mode . wal/web-mode-hook)
  :custom
  (web-mode-comment-style 2)
  :mode ("\\.vue\\'"
         "\\.component.html\\'"
         "\\.ejs\\'"))

(defun wal/web-mode-hook ()
  "Hooks for web mode."
  (message "This is the Internet")
  (wal/enable-tabs)
  (web-mode-use-tabs)
  (add-node-modules-path)
  (flycheck-mode)
  (add-hook 'local-write-file-hooks
	    (lambda ()
	      (delete-trailing-whitespace)
              nil)))
#+END_SRC

**** yaml-mode

Sometimes you need YAMLs.

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode)
#+END_SRC

*** Tweaks

Some things don't always work out-of-the-box.

**** Finding ESLint

ESLint configs can be found using a file, not a directory.

#+BEGIN_SRC emacs-lisp
(defun flycheck-eslint-config-exists-p ()
  "Whether there is a valid eslint config for the current buffer."
  (let* ((executable (flycheck-find-checker-executable 'javascript-eslint))
         (exitcode (and executable (call-process executable nil nil nil
                                                 "--print-config" ".eslintrc"))))
    (eq exitcode 0)))
#+END_SRC

**** Switch Between Language Server and Other Checker

The =lsp= checker seemingly can't be chained,
so we provide some functionality to switch from
to it depending on current major mode.

#+BEGIN_SRC emacs-lisp
(defun wal/switch-from-lsp ()
  "Switch back from LSP to previous checker."
  (pcase (with-current-buffer
             (current-buffer)
           major-mode)
    ('python-mode     (setq flycheck-checker 'python-pylint))
    ('typescript-mode (setq flycheck-checker 'typescript-tslint))
    (_ (setq flycheck-checker nil))))

(defun wal/switch-to-lsp ()
  "Switch to LSP."
  (setq flycheck-checker 'lsp))

(defun wal/flycheck-switch ()
  "Switch depending on mode between LSP and other default checker."
  (interactive)
  (when (bound-and-true-p lsp-mode)
    (if (eq flycheck-checker 'lsp)
        (wal/switch-from-lsp)
      (wal/switch-to-lsp))))
#+END_SRC

**** Loading ESLint/TSLint

Use the locally installed =eslint= and =tslint= binaries.

#+BEGIN_SRC emacs-lisp
(defun wal/use-eslint-from-node-modules ()
  (let* ((root (locate-dominating-file
		(or (buffer-file-name) default-directory)
		"node_modules"))
	 (eslint
	  (and root
	       (expand-file-name "node_modules/.bin/eslint"
				 root))))
    (when (and eslint (file-executable-p eslint))
      (setq-local flycheck-javascript-eslint-executable eslint))))

(defun wal/use-tslint-from-node-modules ()
  (let* ((root (locate-dominating-file
		(or (buffer-file-name) default-directory)
		"node_modules"))
	 (tslint
	  (and root
	       (expand-file-name "node_modules/.bin/tslint"
				 root))))
    (when (and tslint (file-executable-p tslint))
      (setq-local flycheck-typescript-tslint-executable tslint))))
#+END_SRC

* Footnotes

[fn:1] I jumped ship from =26.3=. Most of the things will work there.

[fn:2] If you're feeling adventurous, [[https://git.savannah.gnu.org/cgit/emacs.git/tree/INSTALL][build from source]].

[fn:3] If you're not sure where your =user-emacs-directory= might be,
you can do the following:
  + run Emacs
  + hit =M-x= (that is your Alt/Option key followed by the letter =x=)
  + type =describe-variable= and hit return
  + type =user-emacs-directory= and hit return again

  A window (or is it a frame?) should pop up telling you the path
  
  Finally run =git clone git@gitlab.com:Walheimat/emacs-config.git ~/.emacs.d=
  (replace =~/.emacs.d= with your actual path if it differs)

[fn:4] This config uses the =all-the-icons= package
whose icons need to be downloaded manually
by running =M-x all-the-icons-install-fonts= and selecting =yes=.

This config uses =dash=.

We will try to install it before installing the other packages
but this might fail.

If that is the case do the following:

+ hit =M-x=, type =package-install= and hit return
+ type =dash= and hit return again

Once the installation is complete, re-run Emacs

[fn:5] 107 code blocks, to be exact.

[fn:6] Send me an email, why don't you?

[fn:7] Be careful! If you make a mistake you could render your
keyboard unuseable.

[fn:8] Repositories:
+ [[https://github.com/abo-abo/ace-window][ace-window]]
+ [[https://github.com/codesuki/add-node-modules-path][add-node-modules-path]]
+ [[https://github.com/Wilfred/ag.el][ag]]
+ [[https://github.com/domtronn/all-the-icons.el][all-the-icons]]
+ [[https://github.com/jtbm37/all-the-icons-dired][all-the-icons-dired]]
+ [[https://github.com/rranelli/auto-package-update.el][auto-package-update]]
+ [[https://github.com/jasonm23/autothemer][autothemer]]
+ [[https://github.com/abo-abo/avy][avy]]
+ [[https://github.com/Malabarba/beacon][beacon]]
+ [[https://github.com/joodland/bm][bm]]
+ [[https://company-mode.github.io/][company]]
+ [[https://github.com/ericdanan/counsel-projectile][counsel-projectile]]
+ [[https://github.com/bbatsov/crux][crux]]
+ [[https://github.com/raxod502/ctrlf][ctrlf]]
+ [[https://github.com/emacs-lsp/dap-mode][dap-mode]]
+ [[https://github.com/magnars/dash.el][dash]]
+ [[https://github.com/emacs-dashboard/emacs-dashboard][dashboard]]
+ [[https://github.com/purcell/default-text-scale][default-text-scale]]
+ [[https://elpa.gnu.org/packages/delight.html][delight]]
+ [[https://github.com/dgutov/diff-hl][diff-hl]]
+ [[https://github.com/emacsmirror/diminish][diminish]]
+ [[https://github.com/gonewest818/dimmer.el][dimmer]]
+ [[https://github.com/Fuco1/dired-hacks/][dired-filter]]
+ [[https://github.com/purcell/diredfl][diredfl]]
+ [[https://github.com/Silex/docker.el][docker]]
+ [[https://github.com/seagle0128/doom-modeline][doom-modeline]]
+ [[https://github.com/rejeep/drag-stuff.el][drag-stuff]]
+ [[https://github.com/jacktasia/dumb-jump][dumb-jump]]
+ [[https://github.com/elixir-editors/emacs-elixir][elixir-mode]]
+ [[https://github.com/iqbalansari/emacs-emojify][emojify]]
+ [[https://github.com/dieggsy/esh-autosuggest/][esh-autosuggest]]
+ [[https://github.com/zwild/eshell-prompt-extras][eshell-prompt-extras]]
+ [[https://github.com/akreisher/eshell-syntax-highlighting][eshell-syntax-highlighting]]
+ [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]]
+ [[https://github.com/magnars/expand-region.el][expand-region]]
+ [[https://github.com/technomancy/find-file-in-project][find-file-in-project]]
+ [[https://github.com/jming422/fira-code-mode][fira-code-mode]]
+ [[https://github.com/flycheck/flycheck][flycheck]]
+ [[https://github.com/d12frosted/flyspell-correct][flyspell-correct(-ivy)]]
+ [[https://github.com/noctuid/general.el][general]]
+ [[https://github.com/emacsmirror/git-timemachine][git-timemachine]]
+ [[https://github.com/roman/golden-ratio.el][golden-ratio]]
+ [[https://github.com/Malabarba/emacs-google-this][google-this]]
+ [[https://github.com/haskell/haskell-mode][haskell-mode]]
+ [[https://github.com/Wilfred/helpful][helpful]]
+ [[https://github.com/zk-phi/indent-guide][highlight-indent-guides]]
+ [[https://github.com/Fanael/highlight-numbers][highlight-numbers]]
+ [[https://github.com/tarsius/hl-todo][hl-todo]]
+ [[https://github.com/abo-abo/hydra][hydra]]
+ [[https://github.com/Yevgnen/ivy-rich][ivy-rich]]
+ [[https://github.com/abo-abo/swiper][ivy/swiper/counsel]]
+ [[https://github.com/mooz/js2-mode/][js2-mode]]
+ [[https://github.com/ogdenwebb/emacs-kaolin-themes][kaolin]]
+ [[https://github.com/chrisbarrett/kubernetes-el][kubernetes]]
+ [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]]
+ [[https://github.com/emacs-lsp/lsp-ui][lsp-ui]]
+ [[https://github.com/immerrr/lua-mode/tree/345ebfc1e236d9676e7e9f7364493785e7756348][lua-mode]]
+ [[https://magit.vc/][magit]]
+ [[https://jblevins.org/projects/markdown-mode/][markdown-mode]]
+ [[https://github.com/purcell/mode-line-bell][mode-line-bell]]
+ [[https://github.com/magnars/multiple-cursors.el][multiple-cursors]]
+ [[https://github.com/alezost/mwim.el][mwim]]
+ [[https://orgmode.org/][org-mode]]
+ [[https://github.com/org-roam/org-roam][org-roam]]
+ [[https://github.com/alphapapa/org-super-agenda][org-super-agenda]]
+ [[https://github.com/takaxp/org-tree-slide][org-tree-slide]]
+ [[https://github.com/gregsexton/origami.el][origami]]
+ [[https://github.com/nex3/perspective-el][perspective]]
+ [[https://github.com/raxod502/prescient.el][prescient]]
+ [[https://github.com/prettier/prettier-emacs/tree/e9b73e81d3e1642aec682195f127a42dfb0b5774][prettier-js]]
+ [[https://github.com/bbatsov/projectile][projectile]]
+ [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]]
+ [[https://github.com/emacsmirror/rainbow-mode][rainbow-mode]]
+ [[https://github.com/tkf/emacs-request][request]]
+ [[https://github.com/iqbalansari/restart-emacs][restart-emacs]]
+ [[https://github.com/pashky/restclient.el][restclient]]
+ [[https://github.com/felipeochoa/rjsx-mode][rjsx-mode]]
+ [[https://github.com/magnars/s.el][s]]
+ [[https://github.com/Fuco1/smartparens][smartparens]]
+ [[https://github.com/emacsorphanage/smeargle][smeargle]]
+ [[https://github.com/nonsequitur/smex/][smex]]
+ [[https://github.com/aspiers/smooth-scrolling/tree/2462c13640aa4c75ab3ddad443fedc29acf68f84][smooth-scrolling]]
+ [[https://www.emacswiki.org/emacs/SoLong][so-long]]
+ [[https://github.com/zk-phi/symon][symon]]
+ [[https://github.com/dbordak/telephone-line][telephone-line]]
+ [[https://github.com/Alexander-Miller/treemacs][treemacs]]
+ [[https://gitlab.com/ideasman42/emacs-undo-fu][undo-fu]]
+ [[https://github.com/jwiegley/use-package][use-package]]
+ [[https://github.com/waymondo/use-package-ensure-system-package][ensure-system-package]]
+ [[https://github.com/akermu/emacs-libvterm][vterm]]
+ [[https://github.com/jixiuf/vterm-toggle][vterm-toggle]]
+ [[http://web-mode.org/][web-mode]]
+ [[https://github.com/justbur/emacs-which-key][which-key]]
+ [[https://github.com/joostkremers/writeroom-mode][writeroom-mode]]
+ [[https://github.com/joaotavora/yasnippet][yasnippet]]
+ [[https://www.emacswiki.org/emacs/ZoneMode][zone]]

[fn:9] All languages listed [[https://emacs-lsp.github.io/lsp-mode/page/languages/][here]].

Currently I only need three:
+ [[https://github.com/elixir-lsp/elixir-ls][Elixir]]
+ [[https://emacs-lsp.github.io/lsp-mode/page/lsp-prolog/][Prolog]]
+ [[https://emacs-lsp.github.io/lsp-mode/page/lsp-pyls/][Python]]
