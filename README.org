#+TITLE: Walheimat's Emacs Config
#+AUTHOR: [[https://gitlab.com/Walheimat][@Walheimat]]
#+TOC: headlines 3

* About

** Heads-up

This project is my personal literate Emacs (27.1)[fn:1] configuration.

If you're a complete beginner,
you will find [[https://github.com/emacs-tw/awesome-emacs#starter-kit][more user-friendly and less tailor-made configs]] out there.

The idea of this config is to provide a jumping-off-point for your own custom config.
Nothing in this config should be considered _good practice_,
it's mostly just how I (think I) like things to be.

** Try-out

If you're interested in trying out Emacs using my config anyway,
here are the necessary steps:

+ Install Emacs if you haven't[fn:2]
+ Clone this repository into your =user-emacs-directory=[fn:3]
+ Copy the config file included in this repo by running =cp ~/.emacs.d/emacs-config/templates/.emacs ~=
+ Close and re-run Emacs which should download and install (almost[fn:4]) all packages

If you did not init this repo in your =user-emacs-directory= using the default name,
you will need to adapt the variable =wal/emacs-config-default-path= in the example config you just copied.

** Peculiarities

*** Daemon Mode

This config is /daemon-ready/, i.e. if you start Emacs with the =--daemon= flag,
the config will make sure that any customization that requires a frame
will only be loaded once a frame was created.

A =systemd= service config can be found in the =/templates= directory to
get you started:

+ run =mkdir -p ~/.config/systemd/user=
+ run =cp ~/.emacs.d/emacs-config/templates/emacs.service ~/.config/systemd/user=
+ adapt the =emacs.service= file to point to the correct path
+ run =systemctl --user enable emacs=

Now an Emacs daemon will start on start-up. To connect you can use, for example,
=emacsclient -c -h=, which I alias to =ec=.

*** Scope

I've tried to keep custom functions and variables in a scope
called =wal= to avoid potential interference.

Let's configure some Emacs.
The init script will evaluate _everything_[fn:5] that follows.

* Settings

** Personal

Set some personal info.[fn:6]

#+BEGIN_SRC emacs-lisp
(setq user-full-name    "Krister Schuchardt"
      user-mail-address "krister.schuchardt@theventury.com")

;; Warn Mac/Windows users.
(unless (eq system-type 'gnu/linux)
  (warn "\
    Warning: Config only tested on linux.
    While I did get in running on Windows 10,
    it was quite tricky and involved setting unsafe options."))
#+END_SRC

** Start-Up

Customize start-up.

#+BEGIN_SRC emacs-lisp
;; Comment the following line if you're using a tiling window manager.
(add-to-list 'default-frame-alist '(fullscreen . maximized))

;; No splash.
(setq inhibit-startup-message t)

;; Use a distinct file for customization.
(setq custom-file (expand-file-name "custom.el" wal/emacs-config-default-path))

;; We'll create that file if it doesn't yet exist.
(unless (file-exists-p custom-file)
  (write-region "" nil custom-file))

(load custom-file)
#+END_SRC

** Package Archives

Add MELPA and org-mode to our package archives.
We'll be getting most (if not all) packages from the prior.

#+BEGIN_SRC emacs-lisp
(require 'package)

(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
       (proto (if no-ssl "http" "https")))
  (when no-ssl (warn "\
   Your version of Emacs does not support SSL connections,
   which is unsafe because it allows man-in-the-middle attacks.
   There are two things you can do about this warning:
   1. Install an Emacs version that does support SSL and be safe.
   2. Remove this warning from your init file so you won't see it again."))
  (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t))

(setq package-pinned-packages '())
(package-initialize)
#+END_SRC

** Dependencies

We manage our packages with =use-package=, before we can use it,
we have to install it and a few other packages the hard way.

#+BEGIN_SRC emacs-lisp
;; We need dash for the upcoming loop.
(unless (package-installed-p 'dash)
  (condition-case nil
      (package-install 'dash)
    (error (package-refresh-contents)
           (package-install 'dash))))
(require 'dash)

(defun wal/packages-install (packages)
  "Install all PACKAGES unless already installed."
  (--each packages
    (when (not (package-installed-p it))
      (package-install it)))
  (delete-other-windows))

;; Packages that either don't need configuration (themes)
;; or are requirements in and of themselves are put here.
(defun wal/install-dependencies ()
  "Install dependencies."
  (wal/packages-install
   '(
     use-package
     delight
     ;; themes
     doom-themes
     kaolin-themes
     naysayer-theme
     nord-theme
     paper-theme
     brutalist-theme
     )))

(condition-case nil
    (wal/install-dependencies)
  (error
   (package-refresh-contents)
   (wal/install-dependencies)))

;; Ensuring packages.
(require 'use-package-ensure)
(setq use-package-always-ensure t)
#+END_SRC

** Directories

Make sure that custom directories exists.

+ a cache directory to store bookmarks, perspectives, prescience et al.
+ a directory for site lisp
+ a default directory for org files.

#+BEGIN_SRC emacs-lisp
(defvar wal/cache-directory
  (expand-file-name ".cache" user-emacs-directory)
  "The cache directory.")

(defvar wal/site-lisp-directory
  (expand-file-name "site-lisp" user-emacs-directory)
  "Directory of site Lisp packages.")

;; Change if necessary.
(defvar wal/org-directory (expand-file-name "org" "~")
  "My default directory for org files.")

;; I put all of my tasks into a subfolder `tasks' inside the org directory.
(defvar wal/agenda-tasks-directory
  (expand-file-name "tasks" wal/org-directory)
  "One-size-fits-all directory for agenda tasks.")

(defvar wal/org-roam-directory
  (expand-file-name "zettelkasten" wal/org-directory)
  "Directory for our note-taking.")

;; Create all dirs.
(--each
    `(
      ,wal/org-roam-directory
      ,wal/agenda-tasks-directory
      ,wal/org-directory
      ,wal/site-lisp-directory
      ,wal/cache-directory
      )
  (unless (file-directory-p it)
    (make-directory it)))
#+END_SRC

** Site-Lisp

Add =site-lisp= directory and sub-directories to load path.
I put non-MELPA packages here.

If the directory doesn't exist, it will get created.
Adapt if necessary.

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path wal/site-lisp-directory)

;; Allow us to load from site-lisp package.
(add-to-list 'custom-theme-load-path
             (expand-file-name "emacs-site-lisp" wal/site-lisp-directory))

;; Add subdirs as well.
(dolist (project (directory-files wal/site-lisp-directory t "\\w+"))
  (when (file-directory-p project)
    (add-to-list 'load-path project)))
#+END_SRC

** Persistent =*scratch*=

Let's keep the scratch contents.

This was cribbed from [[https://www.john2x.com/emacs.html][john2x's config]].

#+BEGIN_SRC emacs-lisp
;; Empty scratch message.
(setq initial-scratch-message ";; Howdy, stranger ...")

(defvar wal/scratch-persist-file
  (expand-file-name "scratch-persist" wal/cache-directory)
  "The file to persist the *scratch* buffer's content in.")

(defun wal/persist-scratch ()
  "Persist contents of *scratch* buffer."
  (interactive)
  (with-current-buffer (get-buffer-create "*scratch*")
    (write-region (point-min) (point-max) wal/scratch-persist-file)))

(defun wal/rehydrate-scratch ()
  "Re-hydrate scratch buffer (if persisted)."
  (if (file-exists-p wal/scratch-persist-file)
      (with-current-buffer (get-buffer "*scratch*")
        (delete-region (point-min) (point-max))
        (insert-file-contents wal/scratch-persist-file))))

(add-hook 'after-init-hook #'wal/rehydrate-scratch)
(add-hook 'kill-emacs-hook #'wal/persist-scratch)
#+END_SRC

** Saving and Backups

Don't clutter up workspaces.

#+BEGIN_SRC emacs-lisp
;; Save places and do so in a file.
(setq save-place-file (expand-file-name ".places" user-emacs-directory))

;; Store backups in backups folder.
(setq backup-directory-alist
      `(("." . ,(expand-file-name (concat user-emacs-directory "backups")))))

;; Store autosaves in temp folder.
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

;; We don't want this to mess with git.
(setq create-lockfiles nil)
#+END_SRC

** Prettifying

Easy on the eyes.

#+BEGIN_SRC emacs-lisp
;; A bunch of useful modes.
(show-paren-mode 1)
(global-auto-revert-mode t)
(global-hl-line-mode)
(global-prettify-symbols-mode +1)
(save-place-mode 1)
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(global-font-lock-mode 1)
(delete-selection-mode 1)

;; Trying to not touch the mouse as much.
;; (Mouse-avoidance-mode 'banish)

;; Simple y/n is enough.
(defalias 'yes-or-no-p 'y-or-n-p)

;; I want my comments slanted and my keywords bold.
;; The FiraCode font does not support this.
(defun wal/font-lock ()
  "Slanted and enchanted."
  (set-face-attribute 'font-lock-comment-face nil :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil :weight 'bold))

(add-hook 'font-lock-mode-hook 'wal/font-lock)

;; Huge cursor.
;; (setq x-stretch-cursor t)
#+END_SRC

** Reasonable Numbers

Make things snappier.

#+BEGIN_SRC emacs-lisp
(defconst wal/one-mb
  (* 1024 1024)
  "One megabyte.")

(setq mouse-yank-at-point       t
      show-paren-delay          0.0
      read-process-output-max   wal/one-mb
      sentence-end-double-space nil
      echo-keystrokes           0.1)
#+END_SRC

** Indentation

I (generally) prefer tabs over spaces.
To make this work, we need to tweak a few things.

#+BEGIN_SRC emacs-lisp
(defvar wal/tab-width 4
  "A tab width 4 spaces wide.")

(defvar wal/prefer-tabs t
  "Whether tabs are used for indentation.")

(defvar wal/allow-custom-indent-line-fun t
  "Whether a custom `indent-line-function' can be passed.")

(defun wal/reset-tab-width ()
  "Reset the tab width to the standard."
  (interactive)
  (setq tab-width (eval (car (get 'tab-width 'standard-value)))))

(defun wal/disable-tabs ()
  "Disable `indent-tabs-mode'."
  (interactive)
  (local-unset-key (kbd "TAB"))
  (setq indent-tabs-mode nil))

(defun wal/enable-tabs ()
  "Use TAB key and turn on `indent-tabs-mode'."
  (interactive)
  (local-set-key (kbd "TAB") 'tab-to-tab-stop)
  (setq indent-tabs-mode t))

(defun wal/maybe-enable-tabs (&optional tab-indent-fun mode-fun)
  "Maybe enable tabs using TAB-INDENT-FUN and MODE-FUN to do so."
  (if wal/prefer-tabs
    (progn
      (wal/enable-tabs)
      (when (and wal/allow-custom-indent-line-fun tab-indent-fun)
        (setq-local indent-line-function tab-indent-fun))
      (when mode-fun
        (funcall mode-fun)))
    (wal/disable-tabs)))

(defun wal/set-indent-defaults (&optional num)
  "Set indent defaults, optionally to NUM."
  (interactive)
  (let ((width (or num wal/tab-width)))
    (setq-default python-indent-offset    width ; Python
                  js-indent-level         width ; Javascript
                  css-indent-offset       width ; CSS and SCSS
                  electric-indent-inhibit t
                  tab-width               width
                  indent-tabs-mode        nil)
    (setq backward-delete-char-untabify-method 'hungry)))

(when wal/prefer-tabs
    (add-hook 'after-init-hook 'wal/set-indent-defaults))
#+END_SRC

*** Dir Local Indentation

Sometimes you have to play using other people's rules.
You can run =add-dir-local-variable= to do so.
Check out the =.dir-locals.el= template found in the =/templates= folder
for an example using spaces.

** White space

Delete trailing white space before saving.

#+BEGIN_SRC emacs-lisp
(add-hook 'write-file-functions
              (lambda ()
                (delete-trailing-whitespace)
                nil))
#+END_SRC

** Zoning

 Zone out after a couple of minutes.

 #+BEGIN_SRC emacs-lisp
 (defvar wal/zone-timer 180
   "The time in seconds when we will zone out.")

 (require 'zone)
 (zone-when-idle wal/zone-timer)
 #+END_SRC

** Time

I want to see the time sometimes (full screen).
I don't want to see the CPU load though.

#+BEGIN_SRC emacs-lisp
(setq display-time-default-load-average nil
      display-time-format               "%k:%M ")

;; Note that turning this on will persist the mode in your custom.el,
;; so delete it from there if you want it gone again.
(display-time-mode -1)
#+END_SRC

* Key Bindings

I use many[fn:7] custom keybindings.

** Control

There are some non-standard control sequences:

+ =C->=/=C-<= expands/contracts region.
+ =C-.= marks next point like this.
+ =C-;= (un-)comments lines.
+ =C-z=/=C-S-z= undoes/redoes.

User-reserved combinations are used for certain command maps:

+ =C-c a= for =org-agenda=.
+ =C-c f= for =flyspell=.
+ =C-c i= for =perspective=.
+ =C-c p= for =projectile=.

** Hyper

All hyper bindings are quick-access actions.

+ =H-4= kills window and buffer.
+ =H-5= creates a new frame.
+ =H-d= opens =dired= relative to open file.
+ =H-a= finds with =ag=.
+ =H-i= switches perspective.
+ =H-k= interacts with docker.
+ =H-n= opens notes index file.
+ =H-<mouse3>= adds another cursor at point.
+ =H-p= switches project.
+ =H-<TAB>= expands snippets (in =yas-minor-mode=).
+ =H-v= jumps to line with =avy=.
+ =H-w= opens =ace= dispatch.

*** Caps to Hyper

I re-bound my =<CAPS>= (caps-lock) key to =Hyper_L= to use the
hyper bindings above.

If you use Xorg Display Server,
you can do this by editing[fn:8] your =/usr/share/X11/xkb/symbols/pc= file like so:

#+BEGIN_SRC
...
// key <CAPS> {    [ Caps_Lock     ]   };
key <CAPS> {    [ Hyper_L       ]   };
...
// modifier_map Lock   { Caps_Lock };
modifier_map Mod3   { Hyper_L, Hyper_R };
...
// modifier_map Mod4   { <HYPR> };
modifier_map Mod3   { <HYPR> };
#+END_SRC

** General

The five =general= mappings perform all non-standard actions.

#+BEGIN_SRC emacs-lisp
;; American ranks.
(defvar wal/general-key "H-;"
  "Wal's primary (or general) leader key.")

(defvar wal/colonel-key "H-'"
  "Wal's secondary (or colonel) leader key.")

(defvar wal/major-key "H-,"
  "Wal's tertiary (or major) leader key.")

(defvar wal/captain-key "H-."
  "Wal's quaternary (or captain) leader key.")

(defvar wal/lieutenant-key "H-/"
  "Wal's quinary (or lieutenant) leader key.")

(use-package general
  :config
  (general-create-definer wal/general
    :prefix wal/general-key)
  (general-create-definer wal/colonel
    :prefix wal/colonel-key)
  (general-create-definer wal/major
    :prefix wal/major-key)
  (general-create-definer wal/captain
    :prefix wal/captain-key)
  (general-create-definer wal/lieutenant
    :prefix wal/lieutenant-key))

;; Define some global prefixes.
(wal/general "a" '(:ignore t :wk "appearance")
             "x" '(:ignore t :wk "external")
             "e" '(:ignore t :wk "Emacs") ; Emacs is so particular about case.
             "b" '(:ignore t :wk "buffer")
             "d" '(:ignore t :wk "directory")
             "g" '(:ignore t :wk "global")
             "w" '(:ignore t :wk "window")
             "t" '(:ignore t :wk "terminal"))
#+END_SRC

*** About Leader Keys

Leader key =general= prefixes editor actions
like loading a theme, going to a mark etc.

Leader key =colonel= prefixes mode toggles.
Available modes might depend on =major-mode=.

Leader keys =major=, =captain= prefix mode-specific actions,
for major and minor modes respectively.

Leader key =lieutenant= is a sink for additional useful actions.

** Additional Mode Controls

Turning off certain minor modes and
switching between =major mode= and =fundamental mode=.

#+BEGIN_SRC emacs-lisp
(defvar wal/before-emergency-mode nil
  "The major mode before emergency was engaged.")

(defun wal/emergency-mode ()
  "Switch from `major-mode' to `fundamental-mode' and back."
  (interactive)
  (let ((m-mode major-mode))
    (if wal/before-emergency-mode
        (progn
          (funcall wal/before-emergency-mode)
          (setq wal/before-emergency-mode nil))
      (fundamental-mode)
	  (make-local-variable 'wal/before-emergency-mode)
	  (setq wal/before-emergency-mode m-mode))))

(wal/colonel "F" '(wal/emergency-mode :wk "fundamental")
             "N" '(linum-mode         :wk "linum"))
#+END_SRC

** Additional (Un-)Bindings

Most bindings are declared in the [[*Packages][packages]] section.

#+BEGIN_SRC emacs-lisp
(defvar wal/readme-config
  (expand-file-name "README.org" wal/emacs-config-default-path)
  "The path to this config file.")

(defun wal/readme-config-open ()
  "Open this very config."
  (interactive)
  (switch-to-buffer (find-file-noselect wal/readme-config)))

(wal/general "ec" '(wal/readme-config-open :wk "open config"))

;; windows
(global-set-key (kbd "H-4") 'kill-buffer-and-window) ; C-x 4 0
(global-set-key (kbd "H-5") 'make-frame-command) ; C-x 5 2

;; Killing Emacs.
(global-unset-key (kbd "C-x C-c"))
(wal/general "eq" '(save-buffers-kill-terminal :wk "quit"))

;; No triple-ESC.
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+END_SRC

* Look

Be sure to check out [[https://peach-melpa.org/][Peach Melpa]] to find a theme you like.

If you're using the =doom-modeline=, go for a =doom-*= theme.
Otherwise the colors might clash.

#+BEGIN_SRC emacs-lisp
;; transparency
(defun wal/transparency (value)
  "Set the transparency of the frame window to VALUE.
1 being (almost) completely transparent, 100 being opaque."
  (interactive "nSet transparency (1-100):")
  (let ((transparency (min (max value 1) 100)))
    (set-frame-parameter (selected-frame) 'alpha transparency)))

(wal/general "aa" '(wal/transparency :wk "adjust transparency"))

;; Two themes and a switch.
(defvar wal/primary-emacs-theme 'kaolin-valley-dark
  "The quote-unquote default Emacs theme.")

;; Use `setq' in your .emacs to switch.
(defvar wal/secondary-emacs-theme 'kaolin-valley-light
  "The non-default Emacs theme.")

(defvar wal/active-theme nil
  "The active theme.")

(defun wal/light-switch (&optional selection)
  "Switch to SELECTION or from light to dark theme and vice-versa."
  (interactive)
  (disable-theme wal/active-theme)
  (cond ((or (equal wal/active-theme wal/primary-emacs-theme) (equal selection 'secondary))
         (load-theme wal/secondary-emacs-theme t)
         (setq wal/active-theme wal/secondary-emacs-theme))
        ((or (equal wal/active-theme wal/secondary-emacs-theme) (equal selection 'primary))
         (load-theme wal/primary-emacs-theme t)
         (setq wal/active-theme wal/primary-emacs-theme))))

(wal/general "al" '(wal/light-switch :wk "theme light switch"))

;; Some themes require configuration, so we only load after intialization.
(defun wal/setup-visuals ()
  "Setup visual frills like theme and transparency."
  (load-theme wal/primary-emacs-theme t)
  (setq wal/active-theme wal/primary-emacs-theme)
  (wal/transparency 95))

(if (daemonp)
    (add-hook 'server-after-make-frame-hook 'wal/setup-visuals)
  ;; Function `wal/transparency' hasn't been untangeled yet.
  (add-hook 'after-init-hook 'wal/setup-visuals))
#+END_SRC

* Fonts

Set fonts (with preference).

To get support for ligatures, install the symbol font from [[https://github.com/tonsky/FiraCode/files/412440/FiraCode-Regular-Symbol.zip][here]].

#+BEGIN_SRC emacs-lisp
(defvar wal/fixed-fonts
   '("Fira Code" "mononoki" "Liberation Mono" "DejaVu Sans Mono")
   "Fixed fonts ordered by preference.")

(defvar wal/variable-fonts
  '("Roboto" "Ubuntu" "San Francisco" "Arial")
  "Variable fonts ordered by preference.")

(defvar wal/fixed-fonts-size 120
  "The font size for fixed fonts.")

(defvar wal/variable-fonts-size 160
  "The font size for variable fonts.")

(defun wal/fixed-fonts-select (font)
  "Select fixed FONT."
  (interactive (list (completing-read "Select font: " wal/fixed-fonts)))
  (let ((found (find-font (font-spec :name font))))
    (when found
      (set-face-attribute 'default nil
        :font found
        :height wal/fixed-fonts-size))))

(wal/general "af" '(wal/fixed-fonts-select :wk "select (fixed) font"))

(defun wal/fonts-candidate (fonts)
  "Return the first available font from a list of FONTS."
  (--first (find-font (font-spec :name it)) fonts))

(defun wal/setup-fonts ()
  "Setup fonts."
  (interactive)
  (set-face-attribute 'default nil
    :font (wal/fonts-candidate wal/fixed-fonts)
    :height wal/fixed-fonts-size)
  ;; Variable pitch face.
  (set-face-attribute 'variable-pitch nil
    :font (wal/fonts-candidate wal/variable-fonts)
    :height wal/variable-fonts-size
    :weight 'regular))

;; Fonts can't be initialized thru daemon.
(if (daemonp)
    (add-hook 'server-after-make-frame-hook 'wal/setup-fonts)
  (add-hook 'after-init-hook 'wal/setup-fonts))
#+END_SRC

* Additional Functions

** Package-Specific

Need to know if buffer is =treemacs= buffer sometimes.

#+BEGIN_SRC emacs-lisp
(defun wal/treemacsbufferp ()
  "Check if this is the treemacs buffer."
  (eq (current-buffer) (treemacs-get-local-buffer)))
#+END_SRC

** Garbage Collection

Better(?) garbage collection.

#+BEGIN_SRC emacs-lisp
;; Trick garbage collection.
(defconst wal/hundred-mb
  (* 1024 1024 100)
  "A hundred megabyte.")

(defun wal/minibuffer-setup-hook ()
  "Increase gc threshold to maximum on minibuffer setup."
  (setq gc-cons-threshold most-positive-fixnum))

(defun wal/minibuffer-exit-hook ()
  "Decrease it again on minibuffer exit."
  (setq gc-cons-threshold wal/hundred-mb))

(add-hook 'minibuffer-setup-hook #'wal/minibuffer-setup-hook)
(add-hook 'minibuffer-exit-hook  #'wal/minibuffer-exit-hook)
#+END_SRC

** Directories

Finding files should =mkdir -p= its parents.

#+BEGIN_SRC emacs-lisp
;; Creating parent dirs.
(defun wal/create-non-existent-directory ()
  "Ask whether to create non-existent directory.
If a file is found in a not (yet) existing directory,
ask if it should get created."
  (let ((parent-directory (file-name-directory buffer-file-name)))
    (when (and (not (file-exists-p parent-directory))
               (y-or-n-p (format "Create non-existing directory `%s'? " parent-directory)))
      (make-directory parent-directory t))))

(add-to-list 'find-file-not-found-functions #'wal/create-non-existent-directory)

;; Don't care about `.' and `..'.
(defun wal/directory-files (directory)
  "Get all directory files in DIRECTORY except for current and parent directories."
  (nthcdr 2 (directory-files directory t)))
#+END_SRC

** Buffers

I want to ignore some buffers when switching.

#+BEGIN_SRC emacs-lisp
(defun wal/is-commonly-ignored-buffer (buffer-or-string)
  "Check if provided BUFFER-OR-STRING is commonly ignored."
  (or
   ;; Starred buffers other than scratch buffers.
   (and (not (string-match "^\\*scratch" buffer-or-string))
        (string-match "^\\*[[:ascii:]]+\\*\\'" buffer-or-string))
   ;; dired
   (eq (with-current-buffer
           (get-buffer-create buffer-or-string)
         major-mode)
       'dired-mode)
   ;; `helpful' buffers
   (eq (with-current-buffer
           (get-buffer-create buffer-or-string)
         major-mode)
       'helpful-mode)))

(defun wal/ivy-switch-ignored-buffers (&rest r)
  "Show only commonly ignored buffers.
Pass R to the switch buffer function."
  (interactive)
  (let ((ivy-ignore-buffers
          '((lambda(buffer-or-string)
              (if (wal/is-commonly-ignored-buffer buffer-or-string)
                  nil
                t)))))
    (wal/switch-buffer r)))
#+END_SRC

** Windows

I keep messing up, splitting vertically when I meant horizontally.
This is inspired by [[https://github.com/purcell/emacs.d/blob/master][purcell's config]].

#+BEGIN_SRC emacs-lisp
(defun wal/split-window-the-other-way ()
  "Split window the other way.
This means if horizontally split, split vertically;
if vertically split, split horizontally."
  (interactive)
  (let* ((other-buffer (and (next-window) (window-buffer (next-window))))
         (win (selected-window))
         (split-direction (cond ((or (windows-sharing-edge win 'above)
                                     (windows-sharing-edge win 'below))
                                 'vert)
                                ((or (windows-sharing-edge win 'right)
                                     (windows-sharing-edge win 'left))
                                 'hori)
                                (t nil))))
    (delete-other-windows)
    (pcase split-direction
      ('vert (split-window-horizontally))
      ('hori (split-window-vertically)))
    (when other-buffer
      (set-window-buffer (next-window) other-buffer))))

(wal/general "ws" '(wal/split-window-the-other-way :wk "split the other way"))
#+END_SRC

** Other

Check for custom arguments.

#+BEGIN_SRC emacs-lisp
(defun wal/found-custom-arg (switch)
  "Check for custom SWITCH arg and delete it right away."
  (let ((found-switch (member switch command-line-args)))
    (setq command-line-args (delete switch command-line-args))
    found-switch))
#+END_SRC

* Packages

What follows is a list of MELPA packages that make Emacs even more awesome.

If you wish to know more about any of them, check out the list[fn:9] of repositories
at the end of this readme/configuration or the [[https://github.com/emacs-tw/awesome-emacs][awesome-emacs]] project.

Many packages bind keys.
Check the [[*Key Bindings][key bindings section]] if you need a list of all of them.

** ace-window

=ace-window= allows for some nifty window swapping.
We do some customization to integrate better with our buffer
switching setup.

#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :delight " ace"
  :custom
  (aw-fair-aspect-ratio 4)
  (aw-dispatch-always   t)
  (aw-keys              '(?j ?k ?l ?\; ?u ?i ?o ?p))
  :config
  (setq aw-dispatch-alist '((?h aw-split-window-horz          "horizontal split")
                            (?v aw-split-window-vert          "vertical split")
                            (?b aw-switch-buffer-in-window    "switch focused")
                            (?o aw-switch-buffer-other-window "switch unfocused")
                            (?s aw-swap-window                "swap")
                            (?m aw-move-window                "move")
                            (?d aw-delete-window              "delete")
                            (?w aw-split-window-fair          "fair split")
                            ;; If this has a description, it doesn't work.
                            (?? aw-show-dispatch-help)))
  :init
  (advice-add
    'aw--switch-buffer
    :override (lambda (&rest r) (wal/switch-buffer r))
    '((name . "aw--switch-buffer")))
  :bind
  ("H-w" . ace-window))
#+END_SRC

** add-node-modules-path

Allows accessing a project's =node_modules=.

#+BEGIN_SRC emacs-lisp
(use-package add-node-modules-path)
#+END_SRC

** ag

Highlight search results using the *Silver Searcher*.

This _requires_ the =ag= binary which you can get from [[https://github.com/ggreer/the_silver_searcher#installation][here]] (we will try
to download it automatically, but might fail).

#+BEGIN_SRC emacs-lisp
(use-package ag
  :ensure-system-package ag
  :custom
  (ag-highlight-search t)
  (ag-reuse-buffers    t)
  (ag-arguments        '("--smart-case" "--stats" "--hidden"))
  (ag-ignore-list      '(".git"
                         ".idea"
                         ".vscode"
                         "node_modules"
                         "deps"
                         "dist"
                         "build"
                         "*.svg"))
  :general
  (wal/lieutenant "a"  '(:ignore t  :wk "ag")
                  "af" '(ag-files   :wk "files")
                  "ap" '(ag-project :wk "project"))
  (wal/lieutenant :keymaps 'dired-mode-map
                  "ad" '(ag-dired   :wk "dired"))
  :bind ("H-a"     . ag))
#+END_SRC

** all-the-icons

You need to install the icons yourself[fn:4].

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons)

;; Use it for dired.
(use-package all-the-icons-dired
  :after all-the-icons
  :diminish
  :hook (dired-mode . all-the-icons-dired-mode))
#+END_SRC

** ansi-term

Sometimes you need a terminal.

#+BEGIN_SRC emacs-lisp
(use-package term
  :ensure nil
  :general (wal/general "ta" '(ansi-term :wk "ansi")))
#+END_SRC

** async

It's currently mostly a dependency of other packages.

#+BEGIN_SRC emacs-lisp
(use-package async
  :diminish 'dired-async-mode
  :init
  (dired-async-mode 1))
#+END_SRC

** autothemer

Create new themes more easily.

#+BEGIN_SRC emacs-lisp
(use-package autothemer
  :defer t)
#+END_SRC

** avy

Jumping to (visible) lines and chars is fun if you are too lazy to use your mouse.

#+BEGIN_SRC emacs-lisp
(use-package avy
  :general
  (wal/lieutenant "v"   '(:ignore t               :wk "avy")
                  "vg"  '(:ignore t               :wk "go to")
                  "vgc" '(avy-goto-char           :wk "char")
                  "vgw" '(avy-goto-whitespace-end :wk "whitespace")
                  "vc"  '(avy-copy-line           :wk "copy")
                  "vk"  '(avy-kill-whole-line     :wk "kill"))
  :bind ("H-v"       . avy-goto-line))
#+END_SRC

** beacon

Help me find my cursor!

#+BEGIN_SRC emacs-lisp
(use-package beacon
  :config
  (beacon-mode 1)
  :custom
  (beacon-color                             0.4)
  (beacon-blink-duration                    0.4)
  (beacon-size                              60)
  (beacon-blink-when-point-moves-vertically 2))
#+END_SRC

** bm

Bookmarks are useful. I don't remember where I was. _Who are you?!_

#+BEGIN_SRC emacs-lisp
(use-package bm
  :init
  (setq-default bm-buffer-persistence t)
  :custom
  (bm-restore-repository-on-load t)
  (bm-repository-file            (expand-file-name "bm-persist" wal/cache-directory))
  (bm-annotate-on-create         t)
  (bm-highlight-style            'bm-highlight-only-fringe)
  (bm-cycle-all-buffers          t)
  :hook
  ((after-init        . bm-repository-load)
   (after-save        . bm-buffer-save)
   (kill-buffer       . bm-buffer-save)
   (kill-emacs        . (lambda nil
                          (bm-buffer-save-all)
                          (bm-repository-save)))
   (find-file         . bm-buffer-restore)
   (after-revert      . bm-buffer-restore)
   (vc-before-checkin . bm-buffer-save))
  :general
  (wal/lieutenant "b"  '(:ignore t   :wk "bm")
                  "bs" '(bm-show     :wk "show")
                  "bn" '(bm-next     :wk "next")
                  "bp" '(bm-previous :wk "previous")
                  "bt" '(bm-toggle   :wk "toggle")))
#+END_SRC

** company

Code-completion. In a box.

#+BEGIN_SRC emacs-lisp
(use-package company-box
  :diminish
  :hook (company-mode . company-box-mode))

(use-package company
  :delight " cmp"
  :general
  (wal/colonel :keymaps 'prog-mode
               "C" '(company-mode :wk "company"))
  :custom
  (company-prefer-capf           t)
  (company-minimum-prefix-length 3)
  (company-idle-delay            0.5)
  :hook (prog-mode . company-mode))

(use-package company-restclient
  :after company)

(use-package company-web
  :after company)
#+END_SRC

** consult

More useful replacements and extensions.
We have do advise some of the functions to play
nice despite us using =ivy= for completion everywhere.

#+BEGIN_SRC emacs-lisp
(use-package consult
  :custom
  (consult-project-root-function #'projectile-project-root)
  :bind
  (("M-g g" . consult-goto-line)
   ("M-g m" . consult-mark)
   ;; Don't see the point of `consult-yank-pop'.
   ("M-y"   . consult-yank))
  :init
  ;; Advise functions to use selectrum when.
  ;; `ivy' behaves unpredictably.
  (--each
    '(consult-buffer
      consult-focus-lines
      consult-global-mark
      consult-grep
      consult-mark
      consult-minor-mode-menu
      consult-mode-command
      consult-outline
      consult-yank)
    (advice-add it :around #'wal/advise-selectrum))
  :general
  (wal/general "bf" '(consult-focus-lines  :wk "focus-lines")
               "gm" '(consult-global-mark  :wk "go to mark")
               "dg" '(consult-grep         :wk "grep"))
  (wal/major   "c"  '(consult-mode-command :wk "invoke mode command"))
  (wal/major   :keymaps 'org-mode-map
               "j"  '(consult-outline      :wk "jump to heading")))

(use-package consult-flycheck
  :init
  (advice-add 'consult-flycheck :around #'wal/advise-selectrum)
  :general
  (wal/captain :keymaps 'flycheck-mode-map
               "fs" '(consult-flycheck :wk "search error")))
#+END_SRC

** counsel

Counsel me this, Counselor.

#+BEGIN_SRC emacs-lisp
(defvar wal/use-prescient t
  "Whether prescient is used.")

(use-package counsel
  :after ivy
  :general
  (wal/general "at" '(counsel-load-theme      :wk "load theme")
               "eh" '(counsel-command-history :wk "command history")
               "ev" '(counsel-set-variable    :wk "set variable")
               "xa" '(counsel-linux-app       :wk "launch app")
               "xs" '(counsel-search          :wk "duck-duck-go"))
  :bind
  ("M-x"     . counsel-M-x)
  ("<menu>"  . counsel-M-x)
  ("C-x C-f" . counsel-find-file)
  :custom
  (counsel-linux-app-format-function #'counsel-linux-app-format-function-command-only)
  :config
  ;; Package ivy-prescient sets `ivy-initial-inputs-alist' to nil!
  (unless wal/use-prescient
    (setcdr (assq 'counsel-M-x ivy-initial-inputs-alist) "")))
#+END_SRC

** crux

Let's use =crux= for some editing magic.
Check the [[*Key Bindings][key bindings section]] for descriptions.

#+BEGIN_SRC emacs-lisp
(use-package crux
  :general
  (wal/general "ei" '(crux-find-user-init-file :wk "open init file"))
  (wal/general "gk" '(crux-kill-other-buffers  :wk "kill other buffers")
               "xo" '(crux-open-with           :wk "open with default program"))
  (wal/lieutenant "x"  '(:ignore t                             :wk "crux")
                  "xd" '(crux-duplicate-current-line-or-region :wk "duplicate"))
  :bind
  (("M-o"     . crux-other-window-or-switch-buffer)
   :map prog-mode-map
   ("C-k"   . crux-smart-kill-line)
   ("C-o"   . crux-smart-open-line)
   ("C-S-o" . crux-smart-open-line-above)))
#+END_SRC

** ctrlf

Replacement for =isearch=.
Important command is =C-o c= to change search style.

#+BEGIN_SRC emacs-lisp
(use-package ctrlf
  :custom
  (ctrlf-auto-recenter t)
  ;; Prefer fuzzy over literal.
  (ctrlf-mode-bindings '(("C-s" . ctrlf-forward-fuzzy)
                         ("C-r" . ctrlf-backward-fuzzy)
                         ("M-s" . ctrlf-forward-literal)
                         ("M-r" . ctrlf-backward-literal)))
  ;; Not relased yet.
  ;; (ctrlf-go-to-end-of-match nil)
  :config
  (ctrlf-mode +1))
#+END_SRC

** dap-mode

Debugging using VSCode's DAP.

#+BEGIN_SRC emacs-lisp
(use-package dap-mode
  :commands dap-mode
  :delight " dap"
  :custom
  (lsp-enable-dap-auto-configure nil)
  (dap-python-executable         "python3")
  ;; Be sure to install with `pip3'.
  (dap-python-debugger           'debugpy)
  :config
  (dap-ui-mode 1)
  (require 'dap-node)
  (require 'dap-python)
  :general
  (wal/colonel :keymaps 'prog-mode-map
               "D" '(dap-mode  :wk "dap"))
  (wal/captain :keymaps 'dap-mode-map
               "d"  '(:ignore t :wk "dap")
               "dh" '(dap-hydra :wk "hydra")))
#+END_SRC

*** Debug Templates

Here are some examples for Node.js projects using =nodemon=.

Put them in a file in your project root,
and evaluate them there using =C-x C-e=.
Adapt paths if necessary.

**** Node.js

This one is for attaching to a containerized node app.

#+BEGIN_SRC emacs-lisp :tangle no
(when (require 'dap-mode nil 'noerror)
  (progn
    (let* ((remote-root "/usr/src/app")
           (local-root (file-name-directory buffer-file-name)))
      (dap-register-debug-template
       "attach::node"
       (list :type "node"
             :request "attach"
             :sourceMaps t
             :remoteRoot remote-root
             :localRoot local-root
             :port 9229)))))
#+END_SRC

**** Transpiled Node.js

Still some =babel= projects left.

#+BEGIN_SRC emacs-lisp :tangle no
(when (require 'dap-mode nil 'noerror)
  (progn
    (let* ((build-directory "build")
           (remote-root (concat "/usr/src/app/" build-directory))
           (local-root (concat (file-name-directory buffer-file-name) build-directory)))
      (dap-register-debug-template
       "attach::babel"
       (list :type "node"
             :request "attach"
             :sourceMaps t
             :remoteRoot remote-root
             :localRoot local-root
             :port 9229)))))
#+END_SRC

**** TypeScript

Compile your =src= with =--sourceMap= or set =sourceMap= to =true= in
your =tsconfig.json=.

#+BEGIN_SRC emacs-lisp :tangle no
(when (require 'dap-mode nil 'noerror)
  (progn
    (let* ((build-directory "build")
           (remote-root (concat "/usr/src/app/" build-directory))
           (local-root (concat (file-name-directory buffer-file-name) build-directory)))
      (dap-register-debug-template
       "attach::typescript"
       (list :type "node"
             :request "attach"
             :sourceMaps t
             :remoteRoot remote-root
             :localRoot local-root
             :port 9229)))))
#+END_SRC

** dashboard

Let's have a dash of board.

#+BEGIN_SRC emacs-lisp
;; dependency
(use-package page-break-lines
  :delight " pbl")

;; Using my gitlab status messages, only one so far.
(defvar wal/dashboard-footer-messages
  '(":whale2: breaching your favorite stupid framework"
    ":whale: I propel myself forward on nothing but flukes"
    ":whale: devout and up the spout")
  "The footer messages I can stand to see.")

;; Ignore all files that were loaded on start-up.
(defvar wal/recentf-exclude
  (append (wal/directory-files wal/agenda-tasks-directory)
          (wal/directory-files wal/org-roam-directory)
          (wal/directory-files wal/cache-directory)
          (wal/directory-files user-emacs-directory))
  "Files that should not be considered recent files.")

(use-package dashboard
  :after page-break-lines
  :custom
  (dashboard-banner-logo-title          "Walheimat's Emacs Config")
  (dashboard-startup-banner             (expand-file-name
                                        "logo.png"
                                         wal/emacs-config-default-path))
  (dashboard-projects-backend           'projectile)
  (dashboard-items                      '((recents   . 5)
                                          (projects  . 5)
                                          ;; This means all agenda files are opened
                                          ;; which I find annoying.
                                          ;; (agenda    . 5)
                                          (bookmarks . 5)))
  (dashboard-center-content             t)
  (dashboard-set-file-icons             t)
  (dashboard-set-navigator              t)
  (dashboard-footer-messages            wal/dashboard-footer-messages)
  (dashboard-set-init-info              t)
  (dashboard-week-agenda                nil)
  (dashboard-agenda-time-string-format "%d/%m/%y")
  :init
  (advice-add 'dashboard-insert-startupify-lists
    :around (lambda (fun &rest r)
              (let ((recentf-exclude wal/recentf-exclude))
                (apply fun r))))
  :config
  (dashboard-setup-startup-hook))
#+END_SRC

** delight

Refine a couple of major-mode names.

#+BEGIN_SRC emacs-lisp
(defvar wal/major-delight t
  "Whether some major modes are delighted beyond reason.")

(use-package delight
  :config
  (delight 'dired-mode      "Dired" :major)
  (delight 'emacs-lisp-mode "Elisp" :major)
  (delight 'compilation-shell-minor-mode " csh" "compile")
  ;; Only confuse/delight if allowed.
  (when wal/major-delight
    (delight 'python-mode          "Snake"    :major)
    (delight 'js2-mode             "NaNsense" :major)
    (delight 'inferior-python-mode "Bite"     :major)))
#+END_SRC

** diff-hl

Show diffs in the fringe.
Show diffs in =dired= buffers as well.
Refresh after =magit= is done.

#+BEGIN_SRC emacs-lisp
(use-package diff-hl
  :defer nil
  :config
  (global-diff-hl-mode)
  :hook ((magit-post-refresh . diff-hl-magit-post-refresh)
         (dired-mode         . diff-hl-dired-mode)))
#+END_SRC

** diminish

See individual =use-package= declarations as well,
since we =delight= in/diminish them there.

#+BEGIN_SRC emacs-lisp
(use-package diminish
  :config
  (diminish 'eldoc-mode))
#+END_SRC

** dimmer

Dim inactive frames.
Make dimmed frames a bit dimmer.

#+BEGIN_SRC emacs-lisp
(use-package dimmer
  :diminish
  :custom
  (dimmer-fraction        0.3)
  (dimmer-adjustment-mode :foreground)
  :config
  (dimmer-configure-company-box)
  (dimmer-configure-hydra)
  (dimmer-configure-magit)
  (dimmer-configure-org)
  (dimmer-configure-which-key)
  (dimmer-mode t))
#+END_SRC

** dired

Group directories first in =dired=,
override some keybindings.

#+BEGIN_SRC emacs-lisp
(use-package dired
  :ensure nil
  :init
  (put 'dired-find-alternate-file 'disabled nil)
  :custom
  (dired-listing-switches "-lah --group-directories-first")
  :bind
  (("H-d" . dired-jump)
   :map dired-mode-map
   ("-" . dired-up-directory)  ; Overrides negative-argument.
   ("," . dired-display-file)))
#+END_SRC

** dired-filter

This package is awesome.
Hit =/= to filter in =dired= buffers.

#+BEGIN_SRC emacs-lisp
(use-package dired-filter
  :delight " def")
#+END_SRC

** diredfl

Highlighting in =dired= buffers.

#+BEGIN_SRC emacs-lisp
(use-package diredfl
  :config
  (diredfl-global-mode))
#+END_SRC

** docker

I use Docker a lot, don't always have to use the command line.

#+BEGIN_SRC emacs-lisp
(use-package docker
  :custom
  (docker-container-default-sort-key '("Names"))
  :general
  (wal/lieutenant "k"  '(:ignore t           :wk "docker")
                  "ku" '(docker-compose-up   :wk "up")
                  "ke" '(docker-compose-exec :wk "exec")
                  "kl" '(docker-compose-logs :wk "logs"))
  :bind ("H-k" . docker))
#+END_SRC

** doom-modeline

Busier and prettier =modeline=.
Note that this package requires you to install =all-the-icons= fonts[fn:4].

#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :custom
  (doom-modeline-project-detection 'projectile)
  (doom-modeline-minor-modes       t)
  (doom-modeline-buffer-encoding   nil)
  (doom-modeline-icon              t)
  (doom-modeline-vcs-max-length    20)
  :config
  (doom-modeline-mode 1))
#+END_SRC

** drag-stuff

Use the default key bindings.

#+BEGIN_SRC emacs-lisp
(use-package drag-stuff
  :delight " drg"
  :hook (prog-mode . drag-stuff-mode)
  :config
  (drag-stuff-define-keys))
#+END_SRC

** dumb-jump

Jump to definitions (in other files).
Configure it for =ivy=.
Jumping is done using =M-.=.

#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
  :init
  (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
  :custom
  (dumb-jump-selector       'ivy)
  (dumb-jump-force-searcher 'ag))
#+END_SRC

** emojify

Display emojis.

You might have to call =emojify-download-emoji= to
download a set that supports your emojis.

#+BEGIN_SRC emacs-lisp
(use-package emojify
  :hook (after-init . global-emojify-mode))
#+END_SRC

** eshell

Set up =eshell=.

#+BEGIN_SRC emacs-lisp
(use-package esh-autosuggest
  :hook (eshell-mode . esh-autosuggest-mode))

(use-package eshell-prompt-extras)

(use-package eshell-syntax-highlighting
  :hook (eshell-mode . eshell-syntax-highlighting-mode))

(use-package eshell-mode
  :ensure nil
  :init
  ;; Override how clearing the eshell works.
  (advice-add
    'eshell/clear :override
    (lambda nil
      (let ((eshell-buffer-maximum-lines 0))
        (eshell-truncate-buffer))))
  (setq eshell-highlight-prompt nil
        eshell-prompt-function 'epe-theme-lambda)
  :general
  (wal/general "te" '(eshell :wk "eshell"))
  :bind
  (:map eshell-mode-map
   ([remap eshell-pcomplete] . completion-at-point)))
#+END_SRC

** evil-nerd-commenter

Comment code like in =vim=, evil, evil =vim=.

#+BEGIN_SRC emacs-lisp
(use-package evil-nerd-commenter
  :commands evilnc-comment-or-uncomment-lines
  :bind
  (:map prog-mode-map
   ("C-;" . evilnc-comment-or-uncomment-lines)))
#+END_SRC

** eww

Browse web in Emacs.

This requires Emacs to have been compiled with =--with-xml2= flag.

#+BEGIN_SRC emacs-lisp
(use-package eww
  :ensure nil
  :general
  (wal/general "ew" '(eww :wk "www the web")))
#+END_SRC

** expand-region

One thing that can be a bit tricky is selecting regions, not anymore.

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :commands er/expand-region
  :bind
  (("C->" . er/expand-region)
   ("C-<" . er/contract-region)))
#+END_SRC

** find-file-in-project

Finding files by name should be easy.

#+BEGIN_SRC emacs-lisp
(use-package find-file-in-project)
#+END_SRC

** fira-code-mode

I use FiraCode, this mode allows us to use ligatures.

#+BEGIN_SRC emacs-lisp
(defun wal/fira-code ()
  "Wraps macro to only maybe enable."
  (use-package fira-code-mode
    :diminish
    ;; Use fira mode if it's the default font and the symbol font is installed.
    :if (and (x-list-fonts "Fira Code Symbol")
             (string= "Fira Code" (face-attribute 'default :family)))
    :custom
    ;; Ligatures you don't want.
    (fira-code-mode-disabled-ligatures '("[]" "x"))
    :hook prog-mode))

;; We guard against font-related actions.
(if (daemonp)
    (add-hook 'server-after-make-frame-hook 'wal/fira-code t)
  (add-hook 'after-init-hook 'wal/fira-code t))
#+END_SRC

** flycheck

=flycheck= is for all of our linting/code quality needs.

*** Loading ESLint/TSLint

Use the locally installed =eslint= and =tslint= binaries.

#+BEGIN_SRC emacs-lisp
(defun wal/use-eslint-from-node-modules ()
  "Use locally installed ESLint binary."
  (let* ((root (locate-dominating-file
                 (or (buffer-file-name) default-directory)
                 "node_modules"))
         (eslint
           (and root
                (expand-file-name "node_modules/.bin/eslint"
                                  root))))
    (when (and eslint (file-executable-p eslint))
      (setq-local flycheck-javascript-eslint-executable eslint))))

(defun wal/use-tslint-from-node-modules ()
  "Use locally installed TSLint binary."
  (let* ((root (locate-dominating-file
                 (or (buffer-file-name) default-directory)
                 "node_modules"))
         (tslint
           (and root
                (expand-file-name "node_modules/.bin/tslint"
                                  root))))
    (when (and tslint (file-executable-p tslint))
      (setq-local flycheck-typescript-tslint-executable tslint))))
#+END_SRC

*** Configuration

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :delight " fly"
  :custom
  (flycheck-keymap-prefix (kbd "C-c f"))
  :general
  (wal/colonel :keymaps 'prog-mode-map
               "F" '(flycheck-mode :wk "flycheck"))
  (wal/captain :keymaps 'flycheck-mode-map
               "f"  '(:ignore t           :wk "flycheck")
               "fn" '(flycheck-next-error :wk "next error"))
  :hook ((flycheck-mode . wal/use-eslint-from-node-modules)
         (flycheck-mode . wal/use-tslint-from-node-modules)))
#+END_SRC

*** Finding ESLint

ESLint configs can be found using a file, not a directory.

#+BEGIN_SRC emacs-lisp
(defun flycheck-eslint-config-exists-p ()
  "Whether there is a valid eslint config for the current buffer."
  (let* ((executable (flycheck-find-checker-executable 'javascript-eslint))
         (exitcode (and executable (call-process executable nil nil nil
                                                 "--print-config" ".eslintrc"))))
    (eq exitcode 0)))
#+END_SRC

*** Fix =pylint= False Positive

The =pylint= checker creates false positives for
relative import mistakes. There is a fix but it doesn't seem
to be released yet.

Taken from [[https://github.com/bkhl/flycheck/commit/3f9582d2df42d4f55ee1fc33aae1a56bf1dab421][here]].

#+BEGIN_SRC emacs-lisp
(defun flycheck-pylint-find-project-root (_checker)
  "Find the directory to invoke pylint from.

The algorithm is the same as used by epylint: find the first
directory that doesn't have a __init__.py file."
  (locate-dominating-file
   (if buffer-file-name
       (file-name-directory buffer-file-name)
     default-directory)
   (lambda (dir)
     (not (file-exists-p (expand-file-name "__init__.py" dir))))))

(flycheck-define-checker python-pylint
  "A Python syntax and style checker using Pylint.

This syntax checker requires Pylint 1.0 or newer.

See URL `https://www.pylint.org/'."
  :command ("python3"
            (eval (flycheck-python-module-args 'python-pylint "pylint"))
            "--reports=n"
            "--output-format=json"
            (config-file "--rcfile=" flycheck-pylintrc concat)
            source-inplace)
  :error-parser flycheck-parse-pylint
  :enabled (lambda ()
             (or (not (flycheck-python-needs-module-p 'python-pylint))
                 (flycheck-python-find-module 'python-pylint "pylint")))
  :verify (lambda (_) (flycheck-python-verify-module 'python-pylint "pylint"))
  :error-explainer (lambda (err)
                     (-when-let (id (flycheck-error-id err))
                       (apply
                        #'flycheck-call-checker-process-for-output
                        'python-pylint nil t
                        (append
                         (flycheck-python-module-args 'python-pylint "pylint")
                         (list (format "--help-msg=%s" id))))))
  :working-directory flycheck-pylint-find-project-root
  :modes python-mode
  :next-checkers ((warning . python-mypy)))
#+END_SRC

** flyspell

My spelling is bad.
Use American English for =flyspell=.

You can bring up actions (skip, save) with =M-o=.

#+BEGIN_SRC emacs-lisp
(defun wal/flyspell-prog-mode ()
  "Toggle function `flyspell-prog-mode' properly."
  (interactive)
  (if flyspell-mode
      (flyspell-mode -1)
    (flyspell-prog-mode)))

(defun wal/flyspell-mode ()
  "Toggle function `flyspell-mode' properly."
  (interactive)
  (if flyspell-mode
      (flyspell-mode -1)
    (flyspell-mode 1)))

(use-package flyspell
  :ensure nil
  :commands flyspell-mode
  :delight " fsp"
  :init
  (setq ispell-dictionary "american")
  :general
  (wal/colonel :keymaps 'text-mode-map
               "S" '(wal/flyspell-mode :wk "flyspell"))
  (wal/colonel :keymaps 'prog-mode-map
               "S" '(wal/flyspell-prog-mode :wk "flyspell-prog"))
  (wal/captain :keymaps 'flyspell-mode-map
               "s"  '(:ignore t :wk "spell-check")
               "sb" '(flyspell-buffer :wk "buffer"))
  :custom
  (flyspell-issue-message-flag nil))

(use-package flyspell-correct
  :after flyspell
  :general
  (wal/captain :keymaps 'flyspell-mode-map
               "sc" '(flyspell-correct-at-point :wk "correct at point")))

(use-package flyspell-correct-ivy
  :after flyspell-correct)
#+END_SRC

** git-timemachine

If you want to go back in time and point fingers at the progenitors of doom.

#+BEGIN_SRC emacs-lisp
(use-package git-timemachine
  :commands git-timemachine-toggle
  :general
  (wal/colonel :keymaps 'prog-mode-map
               "M" '(git-timemachine-toggle :wk "git-timemachine")))
#+END_SRC

** golden-ratio

Use the golden ratio.

#+BEGIN_SRC emacs-lisp
(use-package golden-ratio
  :defer nil
  :diminish
  :init
  ;; Make sure to run golden ratio after ace switch.
  (advice-add 'aw-switch-to-window :after #'golden-ratio)
  :config
  ;; This doesn't work for me, see alt solution above.
  ;; (push 'aw-switch-to-window golden-ratio-extra-commands)
  (golden-ratio-mode 1)
  :general
  (wal/colonel "G" '(golden-ratio-mode :wk "golden ratio")))
#+END_SRC

** helpful

Let's try (to be) =helpful=.

#+BEGIN_SRC emacs-lisp
(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :general
  (wal/major :keymaps '(emacs-lisp-mode-map org-mode-map)
             "h"  '(:ignore t :wk "helpful")
             "hp" '(helpful-at-point          :wk "at point")
             "hv" '(counsel-describe-variable :wk "describe variable")
             "hf" '(counsel-describe-function :wk "describe function"))
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command]  . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key]      . helpful-key))
#+END_SRC

** highlight-indent-guides

Show indentation.

#+BEGIN_SRC emacs-lisp
(use-package highlight-indent-guides
  ;; Don't need to see this.
  :diminish highlight-indent-guides-mode
  :custom
  (highlight-indent-guides-method     'character)
  (highlight-indent-guides-responsive 'top)
  :hook
  ((prog-mode       . highlight-indent-guides-mode)
   (yaml-mode       . highlight-indent-guides-mode)
   (whitespace-mode . (lambda() (highlight-indent-guides-mode -1))))
  :general
  (wal/colonel :keymaps '(prog-mode-map yaml-mode-map)
               "I" '(highlight-indent-guides-mode :wk "highlight indent")))
#+END_SRC

** highlight-numbers

Make numbers stand out.

#+BEGIN_SRC emacs-lisp
(use-package highlight-numbers
  :hook (prog-mode . highlight-numbers-mode))
#+END_SRC

** highlight-thing

Highlight symbols.

#+BEGIN_SRC emacs-lisp
(use-package highlight-thing
  :custom
  (highlight-thing-delay-seconds 1.0)
  :general
  (wal/colonel :keymaps 'prog-mode-map
               "T" '(highlight-thing-mode :wk "highlight thing")))
#+END_SRC

** hl-todo

Highlight =TODO=, =FIXME= etc. in =prog= modes.

#+BEGIN_SRC emacs-lisp
(use-package hl-todo
  :hook (prog-mode . hl-todo-mode))
#+END_SRC

** hungry-delete

#+BEGIN_SRC emacs-lisp
(use-package hungry-delete
  :custom
  (hungry-delete-join-reluctantly t)
  :general
  (wal/colonel :keymaps 'prog-mode-map
               "H" '(hungry-delete-mode :wk "hungry delete")))
#+END_SRC

** hydra

We use =hydra= to trigger grouped actions.

#+BEGIN_SRC emacs-lisp
(use-package hydra)
#+END_SRC

** ivy

We use =ivy= for narrowing our options.

#+BEGIN_SRC emacs-lisp
;; Change to ivy-switch-buffer if you don't use perspective.
(defalias 'wal/switch-buffer 'persp-ivy-switch-buffer)

;; Hide `dired', `docker', `ag' and default Emacs buffers when switching.
(defvar wal/ivy-ignore-buffers
  '(wal/is-commonly-ignored-buffer
    "\\` "
    "\\`\\*tramp/")
  "The buffers I don't want to see unless I have to.")

;; Toggle custom ignore on or off.
(defun wal/query-ivy-ignore ()
  "Query if custom ivy buffer ignore list should be used."
  (interactive)
  (if (y-or-n-p "Use custom ivy buffer ignore? ")
      (setq ivy-ignore-buffers wal/ivy-ignore-buffers)
    (setq ivy-ignore-buffers '("\\` " "\\`\\*tramp/"))))

(use-package ivy
  :init
  (setq enable-recursive-minibuffers t)
  :custom
  (ivy-use-virtual-buffers t)
  (ivy-ignore-buffers      wal/ivy-ignore-buffers)
  (ivy-count-format        "%d/%d ")
  (ivy-wrap                t)
  :general
  (wal/captain "i"  '(:ignore t  :wk "ivy")
               "ir" '(ivy-resume :wk "resume"))
  :bind
  (("C-x b" . wal/switch-buffer)
   ("C-x B" . wal/ivy-switch-ignored-buffers))
  :config
  (ivy-mode 1))
#+END_SRC

** ivy-rich

Some nicer candidate view when switching buffers.

#+BEGIN_SRC emacs-lisp
(defun wal/ivy-rich-switch-buffer-icon (candidate)
  "Switch buffer icon for CANDIDATE."
  (with-current-buffer (get-buffer candidate)
    (let ((icon (all-the-icons-icon-for-mode major-mode)))
      (if (symbolp icon)
          (all-the-icons-icon-for-mode 'fundamental-mode)
        icon))))

(use-package ivy-rich
  :after ivy
  :config
  (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
  (setq ivy-rich-display-transformers-list
        (plist-put ivy-rich-display-transformers-list
                   'wal/switch-buffer
                   '(:columns
                     ((ivy-rich-candidate (:width 30))
                      (ivy-rich-switch-buffer-size (:width 7))
                      (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
                      (ivy-rich-switch-buffer-project (:width 30 :face success))
                      ;; (ivy-rich-switch-buffer-major-mode (:width 8 :face warning))
                      (wal/ivy-rich-switch-buffer-icon (:width 2))
                      (ivy-rich-switch-buffer-path (:width (lambda (x)
                                                             (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
                     :predicate
                     (lambda (cand) (get-buffer cand)))))
  (ivy-rich-mode 1))
#+END_SRC

** kaolin

This is a themes collection I sometimes pick from.

#+BEGIN_SRC emacs-lisp
(use-package kaolin-themes
  :custom
  (kaolin-ocean-alt-bg                      t)
  (kaolin-themes-italic-comments            t)
  (kaolin-themes-git-gutter-solid           t)
  ;; `modeline' border
  (kaolin-themes-modeline-border            nil)
  ;; Distinct background for fringe and line numbers.
  (kaolin-themes-distinct-fringe            t)
  ;; Distinct colors for company popup scrollbar.
  (kaolin-themes-distinct-company-scrollbar t)
  :config
  ;; `treemacs'
  (kaolin-treemacs-theme))
#+END_SRC

** kubernetes

Who doesn't like pods and stuff?

#+BEGIN_SRC emacs-lisp
(use-package kubernetes
  :commands kubernetes-overview)
#+END_SRC

** lsp-mode

Language server protocol integration.

*** Configuration

Prefer =capf=, bigger delay.

#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :delight " lsp"
  :general
  (wal/colonel :keymaps 'prog-mode-map
               "L" '(lsp-mode :wk "lsp"))
  (wal/captain :keymaps 'lsp-mode-map
               "l" '(:ignore t :wk "lsp")
               "lr" '(lsp-rename :wk "rename symbol"))
  (wal/captain :keymaps 'lsp-ui-mode-map
               "lo" '(lsp-ui-doc-focus-frame :wk "focus doc frame"))
  :custom
  (lsp-completion-provider :capf)
  (lsp-prefer-capf         t)
  (lsp-idle-delay          1.5)
  (lsp-keymap-prefix       "C-c l")
  ;; These have to be defined here.
  (lsp-ui-doc-position 'top) ; alternatively 'at-point
  (lsp-ui-doc-delay    2)
  (lsp-log-io t)
  ;; Enable `pylint'.
  (lsp-pyls-plugins-pylint-enabled t)
  (lsp-pyls-plugins-jedi-use-pyenv-environment t)
  ;; (lsp-pyls-plugins-pylint-args (vector "--init-hook" "import sys; sys.path.append('~/.pyenv/versions')"))
  :config
  ;; Ignore elixir build and dependency folders.
  (add-to-list 'lsp-file-watch-ignored "[/\\\\]_build$")
  (add-to-list 'lsp-file-watch-ignored "[/\\\\]deps$"))

(use-package lsp-ui)

;; (use-package pyvenv
;;  :init
;;  (setenv "WORKON_HOME" "~/.pyenv/versions"))
#+END_SRC

*** Checker switching

The =lsp= checker seemingly can't be chained,
so we provide some functionality to switch from
to it depending on current major mode.

#+BEGIN_SRC emacs-lisp
(defun wal/switch-from-lsp ()
  "Switch back from LSP to previous checker."
  (pcase (with-current-buffer
             (current-buffer)
           major-mode)
    ('typescript-mode (setq flycheck-checker 'typescript-tslint))
    (_ (setq flycheck-checker nil))))

(defun wal/switch-to-lsp ()
  "Switch to LSP."
  (setq flycheck-checker 'lsp))

(defun wal/flycheck-switch ()
  "Switch depending on mode between LSP and other default checker."
  (interactive)
  (when (bound-and-true-p lsp-mode)
    (if (eq flycheck-checker 'lsp)
        (wal/switch-from-lsp)
      (wal/switch-to-lsp))))
#+END_SRC

*** Language Servers

Configure or register language servers.

You will have to install them yourself.[fn:10]

#+BEGIN_SRC emacs-lisp
;;; elixir
(defvar elixir-ls-release-location
  (expand-file-name "ls/elixir" user-emacs-directory)
  "Location of the Elixir language server.")

(if (file-exists-p (expand-file-name "language_server.sh" elixir-ls-release-location))
    (add-to-list 'exec-path elixir-ls-release-location)
  (add-hook 'elixir-mode-hook 'lsp))

;;; prolog
(lsp-register-client
 (make-lsp-client
  :new-connection
  (lsp-stdio-connection (list "swipl"
                              "-g" "use_module(library(lsp_server))."
                              "-g" "lsp_server:main"
                              "-t" "halt"
                              "--" "stdio"))
  :major-modes '(prolog-mode)
  :priority 1
  :multi-root t
  :server-id 'prolog-ls))
#+END_SRC

** magit

Version control has never been this easy before.

Also trying out =magit-todos=.

#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind ("H-g" . magit-status))

(use-package magit-todos
  :after magit
  :commands (ivy-magit-todos magit-todos-list)
  :custom
  (magit-todos-branch-list nil)
  :bind
  (:map magit-mode-map
   ("," . ivy-magit-todos)
   ("." . magit-todos-list)))
#+END_SRC

** mode-line-bell

Make the bell visual.

#+BEGIN_SRC emacs-lisp
(use-package mode-line-bell
  :custom
  (mode-line-bell-flash-time 0.1)
  :config
  (mode-line-bell-mode))
#+END_SRC

** multiple-cursors

Don't you want to edit your buffer in multiple places at once?

#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :init
  ;; Since the map is `nil', using `:bind' would fail.
  (setq mc/keymap (make-sparse-keymap))
  :general
  (wal/lieutenant "m"   '(:ignore t :wk "multiple cursors")
                  "ma"  '(mc/mark-all-like-this :wk "all like this")
                  "mr"  '(:ignore t :wk "region")
                  "mrb" '(mc/edit-beginnings-of-lines :wk "beginnings")
                  "mre" '(mc/edit-ends-of-lines :wk "end"))
  :bind
  (("H-<mouse-3>" . mc/add-cursor-on-click)
   ("C-."         . mc/mark-next-like-this)
   :map mc/keymap
   ("C-g" . mc/keyboard-quit) ; We keep this from the default map.
   ("C-," . mc/unmark-next-like-this)
   ("C-/" . mc/skip-to-next-like-this)))
#+END_SRC

** mwim

Move where I want.
Useful for comments.

#+BEGIN_SRC emacs-lisp
(use-package mwim
  :bind
  (("C-a" . mwim-beginning)
   ("C-e" . mwim-end)))
#+END_SRC

** perspective

Have some perspective, man.

#+BEGIN_SRC emacs-lisp
(defvar wal/default-perspective
  "walheimat"
  "The name of my default perspective.")

(use-package perspective
  :defer nil
  :custom-face
  (persp-selected-face ((t (:weight bold :foreground "burlywood"))))
  :bind ("H-i" . persp-switch)
  :custom
  (persp-modestring-dividers '("(" ")" "/"))
  (persp-initial-frame-name  wal/default-perspective)
  (persp-state-default-file  (expand-file-name "persp-persist" wal/cache-directory))
  (persp-mode-prefix-key     (kbd "C-c i"))
  :config
  (persp-mode))

;; No idea why putting this in `:hook' kills the package.
(add-hook 'kill-emacs-hook #'persp-state-save)
#+END_SRC

** prescient

Better short-term-memory for =ivy=.

#+BEGIN_SRC emacs-lisp
(use-package prescient
  :if wal/use-prescient
  :custom
  (prescient-sort-length-enable nil)
  (prescient-save-file (expand-file-name "prescient-persist" wal/cache-directory))
  (prescient-filter-method '(literal regexp initialism))
  :config
  (prescient-persist-mode +1))

(use-package ivy-prescient
  :if wal/use-prescient
  :after counsel
  :custom
  ;; Default plus `wal/switch-buffer'.
  (ivy-prescient-sort-commands               '(:not swiper swiper-isearch ivy-switch-buffer wal/switch-buffer))
  (ivy-prescient-retain-classic-highlighting t)
  :config
  (ivy-prescient-mode +1))

(use-package company-prescient
  :if wal/use-prescient
  :after company
  :config
  (company-prescient-mode +1))
#+END_SRC

** prettier

Prettify your ugly JavaScript.

#+BEGIN_SRC emacs-lisp
(use-package prettier
  :commands prettier-prettify
  :general
  (wal/major :keymaps 'js2-mode-map
             "l"  '(:ignore t :wk "linting")
             "lp" '(prettier-prettify :wk "run prettier")))
#+END_SRC

** projectile

Projects in Emacs.
You don't really _need_ =treemacs=.

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :delight " pjt"
  :bind ("H-p" . projectile-switch-project)
  ;; :bind-keymap ("C-c p" . projectile-command-map)
  :custom
  (projectile-completion-system     'ivy)
  (projectile-mode-line-function    '(lambda() (format " {%s}" (projectile-project-name))))
  (projectile-switch-project-action #'projectile-dired)
  (projectile-sort-order            'recentf)
  :config
  ;; (add-to-list 'projectile-globally-ignored-directories "node_modules")
  ;; (add-to-list 'projectile-globally-ignored-directories "build")
  (add-to-list 'projectile-globally-ignored-directories "__pycache__")
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (projectile-mode +1))
#+END_SRC

*** counsel-projectile

Add =counsel= integration.

#+BEGIN_SRC emacs-lisp
(use-package counsel-projectile
  :after projectile
  :bind
  (:map projectile-command-map
   ("s s" . counsel-projectile-ag)))
#+END_SRC

** rainbow

Show colors in source code and make delimiters stand out.

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

(use-package rainbow-mode
  :diminish
  :hook prog-mode)
#+END_SRC

** restart-emacs

Sometimes I restart for fun.

#+BEGIN_SRC emacs-lisp
(use-package restart-emacs
  :custom
  (restart-emacs-restore-frames t)
  :general
  (wal/general "er" '(restart-emacs :wk "restart")))
#+END_SRC

** restclient

Postman is passé.
I use a =.http= file extension for my request examples.

#+BEGIN_SRC emacs-lisp
(use-package restclient
  :mode ("\\.http\\'" . restclient-mode))
#+END_SRC

** request

Not used yet, but will in the future.

#+BEGIN_SRC emacs-lisp
(use-package request)
#+END_SRC

** s

String manipulation utility.

#+BEGIN_SRC emacs-lisp
(use-package s)
#+END_SRC

** selectrum

A potential =ivy= replacement.
Sunken cost thinking prevents a switch for now
but we still use it to advise a few =consult= functions.

#+BEGIN_SRC emacs-lisp
(defun wal/advise-selectrum(func &rest r)
  "Call FUNC applying R using `selectrum' for read completion."
  (let ((completing-read-function    #'selectrum-completing-read)
        (read-buffer-function        #'selectrum-read-buffer)
        (read-file-name-function     #'selectrum-read-file-name)
        (complete-in-region-function #'selectrum-complete-in-region)
        (read-libary-name            #'selectrum-read-libarary-name)
        (completion-styles           '(substring partial-completion)))
   (apply func r)))

(use-package selectrum)
#+END_SRC

** smartparens

I didn't have smart parens growing up so I need help.

#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :diminish smartparens-mode
  :init
  (require 'smartparens-config)
  :hook (prog-mode . smartparens-mode))
#+END_SRC

** smooth-scrolling

Smooth scrolling at the margins using =C-n= and =C-p=.

#+BEGIN_SRC emacs-lisp
(use-package smooth-scrolling
  :custom
  (smooth-scroll-margin 4)
  :config
  (smooth-scrolling-mode 1))
#+END_SRC

** so-long

For files whose lines are too long (no longer
needed in Emacs 27+).

#+BEGIN_SRC emacs-lisp
(if (version< emacs-version "27")
  (use-package so-long
    :config
    (global-so-long-mode 1)))
#+END_SRC

** sudo-edit

Make it easier to edit files that need super user
privileges.

#+BEGIN_SRC emacs-lisp
(use-package sudo-edit
  :commands (sudo-edit sudo-edit-find-file)
  :general
  (wal/general "r" '(sudo-edit-find-file :wk "find file as root")))
#+END_SRC

** swiper

Smart searching with =ivy=.

#+BEGIN_SRC emacs-lisp
(use-package swiper
  :after ivy
  :commands (swiper swiper-all swiper-multi swiper-thing-at-point swiper-avy)
  :general
  (wal/general "gs" '(swiper-all :wk "search all buffers"))
  :bind
  (("H-s" . swiper)
   :map swiper-map
   ("C-c v" . swiper-avy)))
#+END_SRC

** symon

Show some system stats when nothing else is going on.

#+BEGIN_SRC emacs-lisp
(use-package symon
  :if (eq system-type 'gnu/linux)
  :custom
  (symon-sparkline-type 'bounded)
  (symon-delay          10)
  (symon-monitors       '(symon-linux-cpu-monitor
                          symon-linux-memory-monitor
                          symon-linux-network-rx-monitor
                          symon-linux-network-tx-monitor))
  :config
  (symon-mode))
#+END_SRC

** typo

Access complex punctuation.

To me this doesn't necessarily make sense for all =text-mode=
modes (like =org-mode=), so instead it needs to be triggered
explicitly.

#+BEGIN_SRC emacs-lisp
(use-package typo
  :commands typo-mode
  :delight " typ"
  :general
  (wal/colonel :keymaps 'text-mode-map
               "T" '(typo-mode :wk "toggle typo mode")))
#+END_SRC

** undo-fu

Undoing un-undoing is weird in Emacs.

#+BEGIN_SRC emacs-lisp
(use-package undo-fu
  :init
  (global-unset-key (kbd "C-z"))
  :bind (("C-z"   . undo-fu-only-undo)
         ("C-S-z" . undo-fu-only-redo)))
#+END_SRC

** use-package-ensure-system-package

Ensure binaries.

#+BEGIN_SRC emacs-lisp
(use-package use-package-ensure-system-package)
#+END_SRC

** vdiff-magit

I find =ediff= quite cumbersome, so I'm giving =vdiff= a try.

#+BEGIN_SRC emacs-lisp
(use-package vdiff-magit
  :after magit
  :config
  ;; `:bind-keymap' doesn't seem to allow mode predicates.
  (define-key vdiff-mode-map (kbd "C-c v") vdiff-mode-prefix-map)
  :custom
  (vdiff-diff-algorithm      'git-diff)
  (vdiff-magit-stage-is-2way t)
  :bind
  (:map vdiff-mode-map
   ("q" . vdiff-quit)
   ("h" . vdiff-hydra/body)
   :map magit-mode-map
   ("e" . vdiff-magit-dwim)
   ("E" . vdiff-magit))
  :init
  (transient-suffix-put 'magit-dispatch "e" :description "vdiff (dwim)")
  (transient-suffix-put 'magit-dispatch "e" :command 'vdiff-magit-dwim)
  (transient-suffix-put 'magit-dispatch "E" :description "vdiff")
  (transient-suffix-put 'magit-dispatch "E" :command 'vdiff-magit))
#+END_SRC

** visual-fill-column

Makes presentations a bit nicer.

#+BEGIN_SRC emacs-lisp
(use-package visual-fill-column)
#+END_SRC

** vterm

=vterm= can be an alternative to included shells.
We also install =vterm-toggle=.

Also, if you're on an older Ubuntu version (like my work PC),
the =libvterm= package might be too old, but you could
always try to build from source ...

#+BEGIN_SRC emacs-lisp
(unless (version< emacs-version "27.0")
  (use-package vterm
    :commands vterm-toggle
    :delight
    (vterm-copy-mode " vcp")
    :custom
    (vterm-kill-buffer-on-exit t)
    :general
    (wal/major :keymaps 'vterm-mode-map
               "c"  '(:ignore t       :wk "copy mode")
               "ce" '(vterm-copy-mode :wk "enter"))
    (wal/major :keymaps 'vterm-copy-mode-map
               "cx" '(vterm-copy-mode-done :wk "exit copy mode"))
    :config
    (when (file-exists-p "/bin/fish")
      (setq vterm-shell "/bin/fish")))

  (use-package vterm-toggle
    :custom
    (vterm-toggle-fullscreen-p nil)
    (vterm-toggle-scope        'project)
    :init
    (add-to-list 'display-buffer-alist
                 '((lambda(bufname _) (with-current-buffer bufname (equal major-mode 'vterm-mode)))
                   (display-buffer-reuse-window display-buffer-in-side-window)
                   (side            . bottom)
                   (dedicated       . t)
                   (window-height   . 0.3)
                   (reusable-frames . visible)))
    :general
    (wal/general "tv" '(vterm-toggle :wk "vterm"))
    :bind
    ("H-t"     . vterm-toggle)))
#+END_SRC

** which-key

Show the next possible key presses towards an action.

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :diminish
  :custom
  ;; Big enough to not mess up avy line search.
  (which-key-idle-delay 0.5)
  :config
  (which-key-mode))
#+END_SRC

** whitespace-mode

Toggle =highlight-indent-guide= with =whitespace-mode=.

#+BEGIN_SRC emacs-lisp
(use-package whitespace-mode
  :ensure nil
  :general
  (wal/colonel "W" '(whitespace-mode :wk "whitespace")))
#+END_SRC

** writeroom-mode

Create a room of one's own.
I use a different (light) theme here.

#+BEGIN_SRC emacs-lisp
(use-package writeroom-mode
  :commands writeroom-mode
  :hook ((writeroom-mode-enable  . (lambda() (wal/light-switch 'secondary)))
         (writeroom-mode-disable . (lambda() (wal/light-switch 'primary))))
  :general
  (wal/colonel "R" '(writeroom-mode :wk "toggle writeroom")))
#+END_SRC

** yasnippet

Use snippets in =prog= mode buffers.
Because I also use company, =yas-expand= is mapped to =H-e=,
if you don't have a hyper key, bind it to a personal binding.

#+BEGIN_SRC emacs-lisp
(use-package yasnippet-snippets
  :after yasnippet
  :config
  (yas-reload-all))

(use-package yasnippet
  :commands (yas-minor-mode yas-visit-snippet-file yas-new-snippet)
  :delight " yas"
  :general
  (wal/colonel "Y" '(yas-minor-mode :wk "yasnippet"))
  (wal/captain :keymaps 'yas-minor-mode-map
               "y"  '(:ignore t              :wk "yasnippet")
               "yv" '(yas-visit-snippet-file :wk "visit snippet file")
               "yc" '(yas-new-snippet        :wk "create new snippet"))
  :bind (:map yas-minor-mode-map
         ("<tab>"    . nil)
         ("TAB"      . nil)
         ("H-<tab>"  . #'yas-expand))
  ;; :config
  ;; (add-hook 'company-mode-hook (lambda ()
  ;;   (substitute-key-definition 'company-complete-common
  ;;                              'company-yasnippet-or-completion
  ;;                               company-active-map)))
  :hook (prog-mode . yas-minor-mode))

;; (defun company-yasnippet-or-completion ()
;;   (interactive)
;;   (let ((yas-fallback-behavior nil))
;;     (unless (yas-expand)
;;       (call-interactively #'company-complete-common))))
#+END_SRC

** Disabled Packages

What follows are currently disabled and/or unused packages
that I still might have already configured somewhat satisfactorily.

*** auto-package-update

Keep packages updated (disabled for now).

#+BEGIN_SRC emacs-lisp
(use-package auto-package-update
  :disabled
  :custom
  (auto-package-update-delete-old-versions t)
  (auto-package-update-hide-results        t)
  :config
  (auto-package-update-maybe))
#+END_SRC

*** default-text-scale

Scale text in all buffers.
Unfortunately, the calculations are off to me; until
this is fixed, I'll disable the package.

#+BEGIN_SRC emacs-lisp
(use-package default-text-scale
  :disabled
  :custom
  (default-text-scale-amount 5)
  :config
  (default-text-scale-mode 1))
#+END_SRC

*** google-this

If you're too lazy to copy and paste.

#+BEGIN_SRC emacs-lisp
(use-package google-this
  :disabled
  :commands (google-this google-this-region)
  :diminish)
#+END_SRC

*** origami

Code folding.
Unfortunately has some performance issues.
This package also uses the deprecated =cl= package,
leading to warning from Emacs version 27 onward.

#+BEGIN_SRC emacs-lisp
(use-package origami
  :disabled
  :custom
  (origami-fold-replacement "⋯")
  :hook (prog-mode . origami-mode)
  :bind (("C-c o" . origami-toggle-node)))
#+END_SRC

*** smeargle

Highlight sections by edit date.

#+BEGIN_SRC emacs-lisp
;; Make it toggle.
(defvar wal/smeargle-on
  nil
  "Whether smeargle is already on.")

(defun wal/smeargle-toggle ()
  "Toggle smeargle on/off."
  (interactive)
  (if wal/smeargle-on
      (progn
        (setq wal/smeargle-on nil)
        (smeargle-clear))
    (progn
      (setq wal/smeargle-on t)
      (smeargle))))

(use-package smeargle
  :disabled
  :commands smeargle)
#+END_SRC

*** smex

Show completions for =M-x= in a buffer.

Currently replaced by =counsel-M-x= and =ivy-prescient=.

#+BEGIN_SRC emacs-lisp
(use-package smex
  :disabled
  :defer 1
  ;; :bind ("M-x" . smex)
  :after counsel)
#+END_SRC

*** telephone-line

A slightly nicer mode-line (disabled in favor of =doom-modeline= for now).

#+BEGIN_SRC emacs-lisp
(use-package telephone-line
  :disabled
  :init
  (setq telephone-line-lhs
          '((evil   . (telephone-line-buffer-segment))
            (accent . (telephone-line-vc-segment))
            (nil    . (telephone-line-minor-mode-segment
                        telephone-line-process-segment))))
  (setq telephone-line-rhs
          '((nil    . (telephone-line-misc-info-segment
                        telephone-line-flycheck-segment))
            (accent . (telephone-line-major-mode-segment))
            (evil   . (telephone-line-airline-position-segment))))
  (setq telephone-line-primary-right-separator 'telephone-line-identity-left
        telephone-line-secondary-right-separator 'telephone-line-identity-hollow-left
        telephone-line-primary-left-separator 'telephone-line-identity-right
        telephone-line-secondary-left-separator 'telephone-line-identity-hollow-right)
  :config
  (telephone-line-mode t))
#+END_SRC

*** treemacs

I'm now a fan of =dired=, but sometimes the "ineluctable modality of the
visible" is nice, so let's show some _dirs_.

#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :disabled
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-indentation                   1
          treemacs-width                         35
          treemacs-move-forward-on-expand        t
          treemacs-follow-after-init             nil
          treemacs-indentation-string            " ⁝ "
          treemacs-is-never-other-window         t
          treemacs-no-delete-other-windows       nil
          treemacs-persist-file                  (expand-file-name "treemacs-persist" wal/cache-directory)
          treemacs-show-hidden-files             t
          treemacs-file-event-delay              1000)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)

    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'extended))))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-c n 1"   . treemacs-delete-other-windows)
        ("C-c n n"   . treemacs)
        ("C-c n b"   . treemacs-bookmark)
        ("C-c n M-t" . treemacs-find-tag)))
#+END_SRC

**** Treemacs Packages

Some =treemacs= integration packages.

#+BEGIN_SRC emacs-lisp
(use-package treemacs-evil
  :disabled
  :after treemacs evil)

(use-package treemacs-projectile
  :disabled
  :after treemacs projectile)

(use-package treemacs-icons-dired
  :disabled
  :after treemacs dired
  :config (treemacs-icons-dired-mode))

(use-package treemacs-magit
  :disabled
  :after treemacs magit)

;; This supposedly works with `perspective' but it fails.
(use-package treemacs-persp
  :disabled
  :after treemacs persp-mode
  :config (treemacs-set-scope-type 'Perspectives))

;; Start with treemacs open (or not).
;; (treemacs)
#+END_SRC

* Mode Configs

Configure major modes.

** angular-mode

You might think Angular is dead and you'd be right but not everyone knows yet.

#+BEGIN_SRC emacs-lisp
(use-package angular-mode
  :init
  ;; I use nvm and I assume the language server is installed.
  (let* ((node-v    (string-trim (substring (shell-command-to-string "node -v") 1)))
         (node-m    (format ".config/nvm/%s/lib/node_modules" node-v))
         (node-abs  (expand-file-name node-m "~"))
         (lang-serv (expand-file-name "@angular/language-server" node-abs)))
    (when (f-directory? lang-serv)
      (setq lsp-clients-angular-server-command
            `("node"
              ,lang-serv
              "--ngProbeLocations"
              ,node-abs
              "--tsProbeLocations"
              ,node-abs
              "--stdio")))))
#+END_SRC

** crontab-mode

It's time to deal with this.

#+BEGIN_SRC emacs-lisp
(use-package crontab-mode)
#+END_SRC

** emacs-lisp

Enable =flycheck=.

#+BEGIN_SRC emacs-lisp
(defun wal/elisp-mode-hook ()
  "Hooks for Lisp interaction mode."
  (message "So it's just a bunch of lists?")
  (flycheck-mode 1))

(use-package emacs-lisp
  :ensure nil
  :hook (emacs-lisp-mode . wal/elisp-mode-hook))
#+END_SRC

** css-mode

We want quicker =company= suggestions when in CSS modes.

#+BEGIN_SRC emacs-lisp
(defun wal/css-modes-hook ()
  "Hooks for css mode."
  (message "Centering? It's simple. Here's 15 ways to do it.")
  ;; Faster `company'.
  (setq-local company-idle-delay 0.1
              company-minimum-prefix-length 2)
  (hack-local-variables)
  (wal/maybe-enable-tabs)
  (flycheck-mode 1))

(use-package css-modes
  :ensure nil
  :hook ((css-mode  . wal/css-modes-hook)
         (scss-mode . wal/css-modes-hook)))
#+END_SRC

** dockerfile-mode

Make =Dockerfiles= look nice.

#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode)
#+END_SRC

** elixir-mode

Enable =flycheck=.

#+BEGIN_SRC emacs-lisp
(defun wal/elixir-mode ()
  "Hooks for elixir mode."
  (message "Mixin' potions")
  (wal/disable-tabs)
  (lsp)
  (flycheck-mode 1))

(use-package elixir-mode
  :hook (elixir-mode . wal/elixir-mode))
#+END_SRC

** gitignore-mode

Syntax highlighting.

Necessary even for =.gitignore= files.

#+BEGIN_SRC emacs-lisp
(use-package gitignore-mode
  :mode ("/\\.npmignore\\'" "/\\.gitignore\\'"))
#+END_SRC

** haskell-mode

Don't use Haskell much yet.

#+BEGIN_SRC emacs-lisp
(use-package haskell-mode)
#+END_SRC

** json-mode

Enable tabs and =flycheck=.

#+BEGIN_SRC emacs-lisp
(defun wal/json-mode ()
  "Hooks for json mode."
  (message "JSON ...? JSON?! JSON!!")
  (rainbow-delimiters-mode)
  (hack-local-variables)
  (wal/maybe-enable-tabs)
  (flycheck-mode 1))

(use-package json-mode
  :hook (json-mode . wal/json-mode))
#+END_SRC

** js2-mode

Enable =flycheck= and disable internal checker.

#+BEGIN_SRC emacs-lisp
(defun wal/js2-mode ()
  "Hooks for js2 mode."
  (message "NaN !== NaN")
  (add-node-modules-path)
  (hack-local-variables)
  (wal/maybe-enable-tabs)
  (flycheck-mode 1))

(use-package js2-mode
  :mode "\\.js\\'"
  :init
  (setq-default js2-show-parse-errors           nil
                js2-strict-missing-semi-warning nil)
  :hook (js2-mode . wal/js2-mode))
#+END_SRC

** lua-mode

Why not. It can be /awesome/.

#+BEGIN_SRC emacs-lisp
(use-package lua-mode)
#+END_SRC

** markdown-mode

Markdown. Sometimes you need it.

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode)
#+END_SRC

** org-mode

Org mode is the best thing about Emacs. Check out the [[https://orgmode.org/manual/][manual]].

*** Variable Pitch

If =variable-pitch-mode= is turned on,
make sure it's not applied to elements that need fixed pitch.

#+BEGIN_SRC emacs-lisp
(defun wal/org-set-variable-faces ()
  "Set faces to `fixed-pitch' where applicable."
  (set-face-attribute 'org-block nil           :foreground nil :inherit 'fixed-pitch :height wal/fixed-fonts-size)
  (set-face-attribute 'org-table nil           :inherit 'fixed-pitch)
  (set-face-attribute 'org-formula nil         :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil            :inherit 'fixed-pitch)
  (set-face-attribute 'org-table nil           :inherit 'fixed-pitch)
  (set-face-attribute 'org-verbatim nil        :inherit 'fixed-pitch)
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil       :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil        :inherit 'fixed-pitch)
  (set-face-attribute 'org-block nil           :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil            :inherit 'fixed-pitch)
  (set-face-attribute 'org-verbatim nil        :inherit 'fixed-pitch))

(defvar wal/variable-org nil
  "Whether `org-mode' should use variable fonts.")

(defun wal/variable-org ()
  "Turn variable fonts on/off in `org-mode'."
  (interactive)
  (if wal/variable-org
      (progn
        (setq wal/variable-org nil)
        (variable-pitch-mode -1))
    (setq wal/variable-org t)
    (variable-pitch-mode 1)
    (wal/org-set-variable-faces)))
#+END_SRC

*** The Mode Itself

Use bullets mode and make the ellipses bendy arrows. When a =TODO= is =DONE=, log time.
We also make the sequence from =TODO= to =DONE= more granular and add another =DONE=-like
state =CANCELLED=.

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :hook (org-mode . (lambda() (org-bullets-mode t))))

(defun wal/org-mode ()
  "Life shouldn't be a drag in `org-mode'."
  (message "Organize! Seize the means of production!")
  (drag-stuff-mode -1))

(use-package org
  :ensure nil
  ;; Disable `drag-stuff-mode' in `org-mode'.
  :hook (org-mode . wal/org-mode)
  :init
  (require 'org-install)
  (require 'ox-md nil t)
  (add-to-list 'org-global-properties
               '("Effort_ALL" . "30m 1h 2h 4h 6h 1d 2d"))
  (add-to-list 'org-modules 'org-habit)
  :config
  (org-load-modules-maybe t)
  (define-key org-mode-map (kbd "C-,") nil) ; Remove `org-cycle-agenda-files'.
  :custom
  (org-ellipsis                   "↷")
  (org-log-done                   t)
  (org-startup-truncated          nil)
  (org-startup-folded             'overview)
  (org-directory                  wal/org-directory)
  (org-default-notes-file         (concat org-directory "/notes.org"))
  (org-agenda-files               `(,wal/agenda-tasks-directory))
  (org-startup-with-inline-images t)
  ;; Be sure to add archive tag with `org-toggle-archive-tag'.
  (org-archive-location           "::* Archived")
  (org-log-done                   'time)
  ;; Too many clock entries clutter up a heading.
  (org-log-into-drawer            t)
  (org-todo-keywords
    '((sequence "TODO(t)" "IN PROGRESS(p)" "WAITING(w)" "BLOCKED (b)" "|" "DONE(d)" "CANCELLED(c)")))
  (org-tag-alist
      '(;; depth
        ("@immersive" . ?i)
        ("@process"   . ?p)
        ;; context
        ("@work"      . ?w)
        ("@home"      . ?h)
        ("@away"      . ?a)
        ("@repeated"  . ?r)
        ;; time
        ("@short"     . ?<)
        ("@medium"    . ?=)
        ("@long"      . ?>)
        ;; energy
        ("@easy"      . ?1)
        ("@average"   . ?2)
        ("@challenge" . ?3)
        ;; category
        ("@dev"       . ?d)
        ("@bla"       . ?b)
        ("@edu"       . ?e))))

(use-package org-clock
  :ensure nil
  :custom
  (org-clock-idle-time                    10)
  (org-clock-continuously                 t)
  (org-clock-persist                      t)
  (org-clock-in-switch-to-state           "IN PROGRESS")
  (org-clock-in-resume                    t)
  (org-clock-report-include-clocking-task t)
  (org-clock-out-remove-zero-time-clocks  t)
  (org-clock-into-drawer                  t))

(use-package org-habit
  :ensure nil
  :custom
  (org-habit-graph-column 105))

(defun wal/org-make-habit()
  "Make it a habit, dammi!"
  (interactive)
  (org-set-property "STYLE" "habit"))

(use-package org-keys
  :ensure nil
  :custom
  (org-use-speed-commands t)
  (org-speed-commands-user
      '(("w" widen)
        ("n" org-narrow-to-subtree)
        ;; Defaults are I and O.
        ("i" org-clock-in)
        ("o" org-clock-out)
        ("a" org-archive-subtree)
        ("r" org-clock-report))))
#+END_SRC

*** Agendas

Everything concerning agendas.

This is mostly based on [[https://github.com/mwfogleman/.emacs.d/blob/master/michael.org][mwfogleman]]'s Emacs config.

#+BEGIN_SRC emacs-lisp
(use-package org-agenda
  :ensure nil
  :custom
  ;; We hide all @-tags.
  (org-agenda-hide-tags-regexp "@"))

(use-package org-super-agenda
  :custom
  (org-super-agenda-groups
   '((:name "Schedule"
      :time-grid t)
     (:name "Unscheduled"
      :scheduled nil)
     (:name "Leftovers"
      :and (:todo ("IN PROGRESS" "WAITING")
            :scheduled past
            :not (:tag "@repeated")))
     (:discard (:anything t))))
  :init
  ;; Not sure why this can't be in config.
  (org-super-agenda-mode)
  :general
  (wal/major :keymaps 'org-agenda-keymap
             "w" '(org-agenda-write :wk "write"))
  :bind
  ("C-c a"   . org-agenda))
#+END_SRC

*** Presentations

Use =org-tree-slide= for presentations.

#+BEGIN_SRC emacs-lisp
(defun wal/tree-slide-toggle-visibility ()
  "Toggle visibility of line and cursor."
  (interactive)
  (if (bound-and-true-p global-hl-line-mode)
    (progn
      (setq cursor-type nil)
      (global-hl-line-mode -1))
    (progn
      (setq cursor-type t)
      (global-hl-line-mode 1))))

(defun wal/tree-slide-play ()
  "Make presentable."
  (setq visual-fill-column-width 140
        visual-fill-column-center-text t
        visible-cursor nil
        cursor-type nil)
  (zone-leave-me-alone)
  (global-hl-line-mode -1)
  (beacon-mode -1)
  (visual-fill-column-mode 1))

(defun wal/tree-slide-stop ()
  "We no longer care about presentation."
  (setq visual-fill-column-width nil
        visual-fill-column-center-text nil
        visible-cursor t
        cursor-type t)
  (zone-when-idle wal/zone-timer)
  (global-hl-line-mode 1)
  (beacon-mode 1)
  (visual-fill-column-mode -1))

(use-package org-tree-slide
  :custom
  (org-tree-slide-never-touch-face   t)
  (org-tree-slide-cursor-init        nil)
  (org-tree-slide-activate-message   "We're on a road to nowhere")
  (org-tree-slide-deactivate-message "Take you here, take you there")
  (org-tree-slide-indicator          '(:next "   >>>" :previous "<<<" :content "< Here is where time is on our side >"))
  :commands org-tree-slide-mode
  :diminish buffer-face-mode
  :hook ((org-tree-slide-play . wal/tree-slide-play)
         (org-tree-slide-stop . wal/tree-slide-stop))
  :general
  (wal/major :keymaps 'org-mode-map
             "p" '(org-tree-slide-mode :wk "presentation"))
  :bind
  ((:map org-tree-slide-mode-map
   ("n" . org-tree-slide-move-next-tree)
   ("p" . org-tree-slide-move-previous-tree)
   ("v" . wal/tree-slide-toggle-visibility))))
#+END_SRC

*** Zettelkasten

Let's give =org-roam= a try.

You will need to install =sqlite3= and =graphviz= manually.

#+BEGIN_SRC emacs-lisp
(defvar wal/org-roam-dailies-directory "tagebuch/"
  "The directory for dailies.")

;; Has to be created manually for now.
(defvar wal/org-roam-index-file "verzeichnis.org"
  "The name of the index file.")

;; Not sure why we need to do it this way.
(let ((index-file (expand-file-name wal/org-roam-index-file wal/org-roam-directory)))
  (unless (file-exists-p index-file)
    (write-region "* Zettelkasten" nil index-file)))

(use-package org-roam
  :delight " zet"
  :if (executable-find "sqlite3")
  :hook (after-init . org-roam-mode)
  :custom
  (org-roam-directory wal/org-roam-directory)
  (org-roam-index-file wal/org-roam-index-file)
  (org-roam-dailies-directory wal/org-roam-dailies-directory)
  (org-roam-completion-system 'ivy)
  :general
  ;; Theoretically these should be `wal/major' but these are minor of major.
  (wal/captain :keymaps 'org-mode-map
               "r"  '(:ignore t       :wk "roam")
               "ri" '(org-roam-insert :wk "insert other note")
               "rr" '(org-roam        :wk "roam from here")
               "rg" '(org-roam-graph  :wk "write graph"))
  (wal/lieutenant "z"  '(:ignore t          :wk "zettel")
                  "zn" '(org-roam-capture   :wk "capture")
                  "zf" '(org-roam-find-file :wk "find"))
  :bind ("H-n" . org-roam-jump-to-index)
  :config
  (let* ((fname (concat wal/org-roam-dailies-directory "%<%Y-%m-%d>")))
    (setq org-roam-dailies-capture-templates
        `(("w" "work" entry
           #'org-roam-capture--get-point
           "* %?"
           :file-name ,fname
           :head "#+title: %<%Y-%m-%d>\n"
           :olp ("Work notes"))

          ("j" "journal" entry
           #'org-roam-capture--get-point
           "* %?"
           :file-name ,fname
           :head "#+title: %<%Y-%m-%d>\n"
           :olp ("Journal"))))))
#+END_SRC

** python-mode

Enable =flycheck=.
This mode is built-in.

#+BEGIN_SRC emacs-lisp
(defun wal/python-mode ()
  "Hooks for python mode."
  (message "Sssnake_case!")
  (wal/disable-tabs)
  (lsp)
  (flycheck-mode 1))

(use-package python-mode
  :ensure nil
  :general
  (wal/major :keymaps 'python-mode-map
             "i"  '(run-python               :wk "inferior shell")
             "s"  '(:ignore t                :wk "send")
             "sr" '(python-shell-send-region :wk "region")
             "sb" '(python-shell-send-buffer :wk "buffer")
             "sf" '(python-shell-send-file   :wk "file"))
  :hook (python-mode . wal/python-mode)
  :init
  ;; Use `python3' as default Python command.
  (setq py-python-command        "python3"
        python-shell-interpreter "python3"))
#+END_SRC

** rjsx-mode

Pretty much like =js2=.

#+BEGIN_SRC emacs-lisp
(defun wal/rjsx-mode ()
  "Hooks for rjsx mode."
  (message "Extend those ugly JavaScripts of yours!")
  (add-node-modules-path)
  (hack-local-variables)
  (wal/maybe-enable-tabs 'js-jsx-indent-line)
  (flycheck-mode 1))

(use-package rjsx-mode
  :mode "\\.jsx\\'"
  :hook (rjsx-mode . wal/rjsx-mode))
#+END_SRC

** typescript-mode

Enable =lsp=, =flycheck=.

#+BEGIN_SRC emacs-lisp
(defun wal/typescript-mode ()
  "Hooks for typescript mode."
  (message "This is any, that is any, everything is any!")
  (add-node-modules-path)
  (hack-local-variables)
  (wal/maybe-enable-tabs)
  (lsp)
  (flycheck-mode 1))

(use-package typescript-mode
  :mode "\\.ts\\'"
  :hook (typescript-mode . wal/typescript-mode))
#+END_SRC

** web-mode

Web mode uses =flycheck=, prompts user if =lsp= should be enabled.

#+BEGIN_SRC emacs-lisp
(defun wal/web-mode ()
  "Hooks for web mode."
  (message "This is the Internet")
  (add-node-modules-path)
  (hack-local-variables)
  (wal/maybe-enable-tabs nil #'web-mode-use-tabs)
  (flycheck-mode 1))

(use-package web-mode
  :hook (web-mode . wal/web-mode)
  :custom
  (web-mode-comment-style 2)
  :mode ("\\.vue\\'"
         "\\.component.html\\'"
         "\\.ejs\\'"))
#+END_SRC

** yaml-mode

Sometimes you need YAMLs.

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :bind
  (:map yaml-mode-map
   ("C-;"   . evilnc-comment-or-uncomment-lines)
   ("C-k"   . crux-smart-kill-line)
   ("C-o"   . crux-smart-open-line)
   ("C-S-o" . crux-smart-open-line-above)))
#+END_SRC

* Footnotes

[fn:1] I jumped ship from =26.3=. Most of the things will work there.

[fn:2] If you're feeling adventurous, [[https://git.savannah.gnu.org/cgit/emacs.git/tree/INSTALL][build from source]].

[fn:3] If you're not sure where your =user-emacs-directory= might be,
you can do the following:
  + run Emacs
  + hit =M-x= (that is your Alt/Option key followed by the letter =x=)
  + type =describe-variable= and hit return
  + type =user-emacs-directory= and hit return again

  A window (or is it a frame?) should pop up telling you the path

  Finally run =git clone git@gitlab.com:Walheimat/emacs-config.git ~/.emacs.d=
  (replace =~/.emacs.d= with your actual path if it differs)

[fn:4] This config uses the =all-the-icons= package
whose icons need to be downloaded manually
by running =M-x all-the-icons-install-fonts= and selecting =yes=.

This config uses =dash=.

We will try to install it before installing the other packages
but this might fail.

If that is the case do the following:

+ hit =M-x=, type =package-install= and hit return
+ type =dash= and hit return again

Once the installation is complete, re-run Emacs.

[fn:5] Around 140 code blocks.

[fn:6] Send me an email, why don't you?

[fn:7] To get a full overview you'll have to call =describe-personal-keybindings=
and =general-describe-keybindings=. From my count around 150.

[fn:8] Be careful! If you make a mistake you could render your
keyboard unusable.

[fn:9] Repositories:
+ [[https://github.com/abo-abo/ace-window][ace-window]]
+ [[https://github.com/codesuki/add-node-modules-path][add-node-modules-path]]
+ [[https://github.com/Wilfred/ag.el][ag]]
+ [[https://github.com/domtronn/all-the-icons.el][all-the-icons]]
+ [[https://github.com/jtbm37/all-the-icons-dired][all-the-icons-dired]]
+ [[https://github.com/jwiegley/emacs-async][async]]
+ [[https://github.com/rranelli/auto-package-update.el][auto-package-update]]
+ [[https://github.com/jasonm23/autothemer][autothemer]]
+ [[https://github.com/abo-abo/avy][avy]]
+ [[https://github.com/Malabarba/beacon][beacon]]
+ [[https://github.com/joodland/bm][bm]]
+ [[https://company-mode.github.io/][company]]
+ [[https://github.com/ericdanan/counsel-projectile][counsel-projectile]]
+ [[https://github.com/bbatsov/crux][crux]]
+ [[https://github.com/raxod502/ctrlf][ctrlf]]
+ [[https://github.com/emacs-lsp/dap-mode][dap-mode]]
+ [[https://github.com/magnars/dash.el][dash]]
+ [[https://github.com/emacs-dashboard/emacs-dashboard][dashboard]]
+ [[https://github.com/purcell/default-text-scale][default-text-scale]]
+ [[https://elpa.gnu.org/packages/delight.html][delight]]
+ [[https://github.com/dgutov/diff-hl][diff-hl]]
+ [[https://github.com/emacsmirror/diminish][diminish]]
+ [[https://github.com/gonewest818/dimmer.el][dimmer]]
+ [[https://github.com/Fuco1/dired-hacks/][dired-filter]]
+ [[https://github.com/purcell/diredfl][diredfl]]
+ [[https://github.com/Silex/docker.el][docker]]
+ [[https://github.com/seagle0128/doom-modeline][doom-modeline]]
+ [[https://github.com/rejeep/drag-stuff.el][drag-stuff]]
+ [[https://github.com/jacktasia/dumb-jump][dumb-jump]]
+ [[https://github.com/elixir-editors/emacs-elixir][elixir-mode]]
+ [[https://github.com/iqbalansari/emacs-emojify][emojify]]
+ [[https://github.com/dieggsy/esh-autosuggest/][esh-autosuggest]]
+ [[https://github.com/zwild/eshell-prompt-extras][eshell-prompt-extras]]
+ [[https://github.com/akreisher/eshell-syntax-highlighting][eshell-syntax-highlighting]]
+ [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]]
+ [[https://github.com/magnars/expand-region.el][expand-region]]
+ [[https://github.com/technomancy/find-file-in-project][find-file-in-project]]
+ [[https://github.com/jming422/fira-code-mode][fira-code-mode]]
+ [[https://github.com/flycheck/flycheck][flycheck]]
+ [[https://github.com/d12frosted/flyspell-correct][flyspell-correct(-ivy)]]
+ [[https://github.com/noctuid/general.el][general]]
+ [[https://github.com/emacsmirror/git-timemachine][git-timemachine]]
+ [[https://github.com/roman/golden-ratio.el][golden-ratio]]
+ [[https://github.com/Malabarba/emacs-google-this][google-this]]
+ [[https://github.com/haskell/haskell-mode][haskell-mode]]
+ [[https://github.com/Wilfred/helpful][helpful]]
+ [[https://github.com/zk-phi/indent-guide][highlight-indent-guides]]
+ [[https://github.com/Fanael/highlight-numbers][highlight-numbers]]
+ [[https://github.com/fgeller/highlight-thing.el][highlight-thing]]
+ [[https://github.com/tarsius/hl-todo][hl-todo]]
+ [[https://github.com/abo-abo/hydra][hydra]]
+ [[https://github.com/Yevgnen/ivy-rich][ivy-rich]]
+ [[https://github.com/abo-abo/swiper][ivy/swiper/counsel]]
+ [[https://github.com/mooz/js2-mode/][js2-mode]]
+ [[https://github.com/ogdenwebb/emacs-kaolin-themes][kaolin]]
+ [[https://github.com/chrisbarrett/kubernetes-el][kubernetes]]
+ [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]]
+ [[https://github.com/emacs-lsp/lsp-ui][lsp-ui]]
+ [[https://github.com/immerrr/lua-mode/tree/345ebfc1e236d9676e7e9f7364493785e7756348][lua-mode]]
+ [[https://magit.vc/][magit]]
+ [[https://jblevins.org/projects/markdown-mode/][markdown-mode]]
+ [[https://github.com/purcell/mode-line-bell][mode-line-bell]]
+ [[https://github.com/magnars/multiple-cursors.el][multiple-cursors]]
+ [[https://github.com/alezost/mwim.el][mwim]]
+ [[https://orgmode.org/][org-mode]]
+ [[https://github.com/org-roam/org-roam][org-roam]]
+ [[https://github.com/alphapapa/org-super-agenda][org-super-agenda]]
+ [[https://github.com/takaxp/org-tree-slide][org-tree-slide]]
+ [[https://github.com/gregsexton/origami.el][origami]]
+ [[https://github.com/nex3/perspective-el][perspective]]
+ [[https://github.com/raxod502/prescient.el][prescient]]
+ [[https://github.com/prettier/prettier-emacs/tree/e9b73e81d3e1642aec682195f127a42dfb0b5774][prettier-js]]
+ [[https://github.com/bbatsov/projectile][projectile]]
+ [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]]
+ [[https://github.com/emacsmirror/rainbow-mode][rainbow-mode]]
+ [[https://github.com/tkf/emacs-request][request]]
+ [[https://github.com/iqbalansari/restart-emacs][restart-emacs]]
+ [[https://github.com/pashky/restclient.el][restclient]]
+ [[https://github.com/felipeochoa/rjsx-mode][rjsx-mode]]
+ [[https://github.com/magnars/s.el][s]]
+ [[https://github.com/Fuco1/smartparens][smartparens]]
+ [[https://github.com/emacsorphanage/smeargle][smeargle]]
+ [[https://github.com/nonsequitur/smex/][smex]]
+ [[https://github.com/aspiers/smooth-scrolling/tree/2462c13640aa4c75ab3ddad443fedc29acf68f84][smooth-scrolling]]
+ [[https://www.emacswiki.org/emacs/SoLong][so-long]]
+ [[https://github.com/nflath/sudo-edit][sudo-edit]]
+ [[https://github.com/zk-phi/symon][symon]]
+ [[https://github.com/dbordak/telephone-line][telephone-line]]
+ [[https://github.com/Alexander-Miller/treemacs][treemacs]]
+ [[https://github.com/jorgenschaefer/typoel][typo]]
+ [[https://gitlab.com/ideasman42/emacs-undo-fu][undo-fu]]
+ [[https://github.com/jwiegley/use-package][use-package]]
+ [[https://github.com/waymondo/use-package-ensure-system-package][ensure-system-package]]
+ [[https://github.com/justbur/emacs-vdiff-magit][vdiff-magit]]
+ [[https://github.com/akermu/emacs-libvterm][vterm]]
+ [[https://github.com/jixiuf/vterm-toggle][vterm-toggle]]
+ [[http://web-mode.org/][web-mode]]
+ [[https://github.com/justbur/emacs-which-key][which-key]]
+ [[https://github.com/joostkremers/writeroom-mode][writeroom-mode]]
+ [[https://github.com/joaotavora/yasnippet][yasnippet]]
+ [[https://www.emacswiki.org/emacs/ZoneMode][zone]]

[fn:10] All languages listed [[https://emacs-lsp.github.io/lsp-mode/page/languages/][here]].

Currently I only need three:
+ [[https://github.com/elixir-lsp/elixir-ls][Elixir]]
+ [[https://emacs-lsp.github.io/lsp-mode/page/lsp-prolog/][Prolog]]
+ [[https://emacs-lsp.github.io/lsp-mode/page/lsp-pyls/][Python]]

[fn:11] If you want to see all personal keybindings, execute =describe-personal-keybindings=.
